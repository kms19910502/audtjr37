
IOT_Smartfarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000ea4  00000f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800176  00800176  00000fae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d8d  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4b  00000000  00000000  00002f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a1  00000000  00000000  00003dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00005160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  00005494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001282  00000000  00000000  00005a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  9e:	0c 94 50 07 	jmp	0xea0	; 0xea0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ReadADC1>:
#include <avr/io.h>
#include "ADC.h"

unsigned short ReadADC1(void)  //조도 PC3
{
	ADMUX = 0x43; // ADC3을 사용할 것이다.
  a6:	83 e4       	ldi	r24, 0x43	; 67
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC); // 변환시작
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <ReadADC1+0x10>
	return ADC;
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c6:	08 95       	ret

000000c8 <ReadADC2>:

/*  ADC channel 2값을 읽어서 리턴하는 함수 */
unsigned short ReadADC2(void) //토양 PC4
{
	ADMUX = 0x44; // ADC4를 사용할 것이다.
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC); // 변환시작
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	86 fd       	sbrc	r24, 6
  de:	fc cf       	rjmp	.-8      	; 0xd8 <ReadADC2+0x10>
	return ADC;
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e8:	08 95       	ret

000000ea <init_pwm>:
#define PRESCALER 8   // 분주비
#define PWM_FREQ 440  // PWM 주파수 (Hz)

void init_pwm() {
	// PWM 제어 레지스터 설정
	TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20); // 비반전 모드, 고속 PWM 모드
  ea:	e0 eb       	ldi	r30, 0xB0	; 176
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	83 62       	ori	r24, 0x23	; 35
  f2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS21); // 분주비 8 설정
  f4:	e1 eb       	ldi	r30, 0xB1	; 177
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24
	DDRD |= (1 << PD3); // OC2B 핀(PD3) 출력으로 설정
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8a b9       	out	0x0a, r24	; 10
 104:	08 95       	ret

00000106 <play_tone>:
}

void play_tone(int freq, int duration) {
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	eb 01       	movw	r28, r22
	OCR2B = (F_CPU / (2 * PRESCALER * freq)) - 1;
 10c:	82 95       	swap	r24
 10e:	92 95       	swap	r25
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	98 27       	eor	r25, r24
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	98 27       	eor	r25, r24
 118:	9c 01       	movw	r18, r24
 11a:	99 0f       	add	r25, r25
 11c:	44 0b       	sbc	r20, r20
 11e:	55 0b       	sbc	r21, r21
 120:	60 e4       	ldi	r22, 0x40	; 64
 122:	72 e4       	ldi	r23, 0x42	; 66
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 44 04 	call	0x888	; 0x888 <__udivmodsi4>
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	for (int i = 0; i < duration; i++) {
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	07 c0       	rjmp	.+14     	; 0x146 <play_tone+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	e9 ef       	ldi	r30, 0xF9	; 249
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <play_tone+0x36>
 140:	00 c0       	rjmp	.+0      	; 0x142 <play_tone+0x3c>
 142:	00 00       	nop
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	8c 17       	cp	r24, r28
 148:	9d 07       	cpc	r25, r29
 14a:	b4 f3       	brlt	.-20     	; 0x138 <play_tone+0x32>
		_delay_ms(1);
	}
	OCR2B = 0;
 14c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <getdata>:
#include <avr/io.h>
#include <util/delay.h>
#include "dht11.h"

/* get data from dht11 */
uint8_t getdata(uint8_t select) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <getdata+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <getdata+0x8>
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	78 2f       	mov	r23, r24
	uint8_t bits[5];
	uint8_t i,j = 0;
	
	memset(bits, 0, sizeof(bits));
 166:	fe 01       	movw	r30, r28
 168:	31 96       	adiw	r30, 0x01	; 1
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	df 01       	movw	r26, r30
 16e:	1d 92       	st	X+, r1
 170:	9a 95       	dec	r25
 172:	e9 f7       	brne	.-6      	; 0x16e <getdata+0x18>
	
	//reset port
	DHT11_DDR |= (1<<DHT11_INPUTPIN); //output
 174:	97 b1       	in	r25, 0x07	; 7
 176:	90 62       	ori	r25, 0x20	; 32
 178:	97 b9       	out	0x07, r25	; 7
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
 17a:	98 b1       	in	r25, 0x08	; 8
 17c:	90 62       	ori	r25, 0x20	; 32
 17e:	98 b9       	out	0x08, r25	; 8
 180:	bf ef       	ldi	r27, 0xFF	; 255
 182:	21 ee       	ldi	r18, 0xE1	; 225
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	b1 50       	subi	r27, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <getdata+0x30>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <getdata+0x3a>
 190:	00 00       	nop
	_delay_ms(100);
	
	//send request
	DHT11_PORT &= ~(1<<DHT11_INPUTPIN); //low
 192:	98 b1       	in	r25, 0x08	; 8
 194:	9f 7d       	andi	r25, 0xDF	; 223
 196:	98 b9       	out	0x08, r25	; 8
 198:	9f ef       	ldi	r25, 0xFF	; 255
 19a:	a0 ee       	ldi	r26, 0xE0	; 224
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	91 50       	subi	r25, 0x01	; 1
 1a0:	a0 40       	sbci	r26, 0x00	; 0
 1a2:	b0 40       	sbci	r27, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <getdata+0x48>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <getdata+0x52>
 1a8:	00 00       	nop
	_delay_ms(18);
	//-- MCU pulls up voltage and waits for DHT response (20-40us)
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
 1aa:	98 b1       	in	r25, 0x08	; 8
 1ac:	90 62       	ori	r25, 0x20	; 32
 1ae:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	25 e0       	ldi	r18, 0x05	; 5
 1b2:	2a 95       	dec	r18
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <getdata+0x5c>
 1b6:	00 00       	nop
	_delay_us(1);
	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input
 1b8:	97 b1       	in	r25, 0x07	; 7
 1ba:	9f 7d       	andi	r25, 0xDF	; 223
 1bc:	97 b9       	out	0x07, r25	; 7
 1be:	80 ed       	ldi	r24, 0xD0	; 208
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <getdata+0x6a>
	_delay_us(39);
	//--
	
	//check start condition 1 (low)
	if((DHT11_PIN & (1<<DHT11_INPUTPIN))) {
 1c4:	35 99       	sbic	0x06, 5	; 6
 1c6:	5a c0       	rjmp	.+180    	; 0x27c <getdata+0x126>
 1c8:	af e3       	ldi	r26, 0x3F	; 63
 1ca:	b1 e0       	ldi	r27, 0x01	; 1
 1cc:	11 97       	sbiw	r26, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <getdata+0x76>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <getdata+0x7c>
 1d2:	00 00       	nop
		return DHT11_ERROR;
	}
	_delay_us(80);
	//check start condition 2 (high)
	if(!(DHT11_PIN & (1<<DHT11_INPUTPIN))) {
 1d4:	35 9b       	sbis	0x06, 5	; 6
 1d6:	54 c0       	rjmp	.+168    	; 0x280 <getdata+0x12a>
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <getdata+0x86>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <getdata+0x8c>
 1e2:	00 00       	nop
		return DHT11_ERROR;
	}
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <getdata+0xd8>
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			while(!(DHT11_PIN & (1<<DHT11_INPUTPIN))); //wait for an high input
 1e8:	35 9b       	sbis	0x06, 5	; 6
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <getdata+0x92>
 1ec:	a0 ea       	ldi	r26, 0xA0	; 160
 1ee:	aa 95       	dec	r26
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <getdata+0x98>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
 1f2:	35 9b       	sbis	0x06, 5	; 6
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <getdata+0xb8>
			result |= (1<<(7-i));
 1f6:	47 e0       	ldi	r20, 0x07	; 7
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	49 1b       	sub	r20, r25
 1fc:	51 09       	sbc	r21, r1
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <getdata+0xb2>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	4a 95       	dec	r20
 20a:	e2 f7       	brpl	.-8      	; 0x204 <getdata+0xae>
 20c:	62 2b       	or	r22, r18
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
 20e:	35 99       	sbic	0x06, 5	; 6
 210:	fe cf       	rjmp	.-4      	; 0x20e <getdata+0xb8>
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
 212:	9f 5f       	subi	r25, 0xFF	; 255
 214:	02 c0       	rjmp	.+4      	; 0x21a <getdata+0xc4>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	98 30       	cpi	r25, 0x08	; 8
 21c:	28 f3       	brcs	.-54     	; 0x1e8 <getdata+0x92>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
		}
		bits[j] = result;
 21e:	e1 e0       	ldi	r30, 0x01	; 1
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ec 0f       	add	r30, r28
 224:	fd 1f       	adc	r31, r29
 226:	e8 0f       	add	r30, r24
 228:	f1 1d       	adc	r31, r1
 22a:	60 83       	st	Z, r22
		return DHT11_ERROR;
	}
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	85 30       	cpi	r24, 0x05	; 5
 230:	90 f3       	brcs	.-28     	; 0x216 <getdata+0xc0>
		}
		bits[j] = result;
	}
	
	//reset port
	DHT11_DDR |= (1<<DHT11_INPUTPIN); //output
 232:	87 b1       	in	r24, 0x07	; 7
 234:	80 62       	ori	r24, 0x20	; 32
 236:	87 b9       	out	0x07, r24	; 7
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //low
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	bf ef       	ldi	r27, 0xFF	; 255
 240:	21 ee       	ldi	r18, 0xE1	; 225
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	b1 50       	subi	r27, 0x01	; 1
 246:	20 40       	sbci	r18, 0x00	; 0
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <getdata+0xee>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <getdata+0xf8>
 24e:	00 00       	nop
	_delay_ms(100);
	
	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) {
 250:	99 81       	ldd	r25, Y+1	; 0x01
 252:	2a 81       	ldd	r18, Y+2	; 0x02
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	29 0f       	add	r18, r25
 258:	31 1d       	adc	r19, r1
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	28 0f       	add	r18, r24
 25e:	31 1d       	adc	r19, r1
 260:	4c 81       	ldd	r20, Y+4	; 0x04
 262:	24 0f       	add	r18, r20
 264:	31 1d       	adc	r19, r1
 266:	4d 81       	ldd	r20, Y+5	; 0x05
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	24 17       	cp	r18, r20
 26c:	35 07       	cpc	r19, r21
 26e:	51 f4       	brne	.+20     	; 0x284 <getdata+0x12e>
		if (select == 0) { //return temperature
 270:	77 23       	and	r23, r23
 272:	59 f0       	breq	.+22     	; 0x28a <getdata+0x134>
			return(bits[2]);
			} else if(select == 1){ //return humidity
 274:	71 30       	cpi	r23, 0x01	; 1
 276:	41 f0       	breq	.+16     	; 0x288 <getdata+0x132>
			return(bits[0]);
		}
	}
	
	return DHT11_ERROR;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	07 c0       	rjmp	.+14     	; 0x28a <getdata+0x134>
	_delay_us(39);
	//--
	
	//check start condition 1 (low)
	if((DHT11_PIN & (1<<DHT11_INPUTPIN))) {
		return DHT11_ERROR;
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	05 c0       	rjmp	.+10     	; 0x28a <getdata+0x134>
	}
	_delay_us(80);
	//check start condition 2 (high)
	if(!(DHT11_PIN & (1<<DHT11_INPUTPIN))) {
		return DHT11_ERROR;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	03 c0       	rjmp	.+6      	; 0x28a <getdata+0x134>
			} else if(select == 1){ //return humidity
			return(bits[0]);
		}
	}
	
	return DHT11_ERROR;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	01 c0       	rjmp	.+2      	; 0x28a <getdata+0x134>
	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) {
		if (select == 0) { //return temperature
			return(bits[2]);
			} else if(select == 1){ //return humidity
			return(bits[0]);
 288:	89 2f       	mov	r24, r25
		}
	}
	
	return DHT11_ERROR;
}
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <dht11_getdata>:

void dht11_getdata(uint8_t num, uint8_t *data){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	eb 01       	movw	r28, r22
	uint8_t buf = getdata(num);
 2a0:	0e 94 ab 00 	call	0x156	; 0x156 <getdata>
	if(buf == DHT11_ERROR){
 2a4:	8f 3f       	cpi	r24, 0xFF	; 255
 2a6:	09 f0       	breq	.+2      	; 0x2aa <dht11_getdata+0x10>
		;
	}
	else{
		*data = buf;
 2a8:	88 83       	st	Y, r24
	}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <main>:
#include "SenSor/SenSor.h"

bool forward = true;

int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	a9 97       	sbiw	r28, 0x29	; 41
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
   ADCSRA |= ( 1 << ADSC );         //   변환시작
   */
   
   //   위의 설정을 한 번에 처리한 문장이 아래의 두 문장
   
   ADCSRA = 0x87;   //   0x87 = 0b1000 0111
 2c4:	87 e8       	ldi	r24, 0x87	; 135
 2c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
   
   uint8_t data = 0;
 2ca:	19 82       	std	Y+1, r1	; 0x01
   char buf[40] = {0,};
 2cc:	fe 01       	movw	r30, r28
 2ce:	32 96       	adiw	r30, 0x02	; 2
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	df 01       	movw	r26, r30
 2d4:	1d 92       	st	X+, r1
 2d6:	8a 95       	dec	r24
 2d8:	e9 f7       	brne	.-6      	; 0x2d4 <main+0x24>
   USART_Init();
 2da:	0e 94 12 04 	call	0x824	; 0x824 <USART_Init>
   Init_UART0();
 2de:	0e 94 06 04 	call	0x80c	; 0x80c <Init_UART0>
   Sensor_init();
 2e2:	0e 94 17 02 	call	0x42e	; 0x42e <Sensor_init>
   Step_init();
 2e6:	0e 94 b0 02 	call	0x560	; 0x560 <Step_init>

   while (1)
   {
      
	  
		dht11_getdata(0, &data);
 2ea:	be 01       	movw	r22, r28
 2ec:	6f 5f       	subi	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 4d 01 	call	0x29a	; 0x29a <dht11_getdata>
		temperature=data;
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
		sprintf(buf, "temperature:%d", temperature); //temperature:
 2f8:	1f 92       	push	r1
 2fa:	8f 93       	push	r24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	8e 01       	movw	r16, r28
 306:	0e 5f       	subi	r16, 0xFE	; 254
 308:	1f 4f       	sbci	r17, 0xFF	; 255
 30a:	1f 93       	push	r17
 30c:	0f 93       	push	r16
 30e:	0e 94 66 04 	call	0x8cc	; 0x8cc <sprintf>
		strTransmit(buf);
 312:	c8 01       	movw	r24, r16
 314:	0e 94 27 04 	call	0x84e	; 0x84e <strTransmit>
		memset(buf, 0x00, 40);
 318:	0f 2e       	mov	r0, r31
 31a:	f8 e2       	ldi	r31, 0x28	; 40
 31c:	ff 2e       	mov	r15, r31
 31e:	f0 2d       	mov	r31, r0
 320:	f8 01       	movw	r30, r16
 322:	2f 2d       	mov	r18, r15
 324:	11 92       	st	Z+, r1
 326:	2a 95       	dec	r18
 328:	e9 f7       	brne	.-6      	; 0x324 <main+0x74>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	93 ed       	ldi	r25, 0xD3	; 211
 32e:	a0 e3       	ldi	r26, 0x30	; 48
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x80>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x8a>
 33a:	00 00       	nop
		_delay_ms(1000);
     
		dht11_getdata(1, &data);
 33c:	be 01       	movw	r22, r28
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 4d 01 	call	0x29a	; 0x29a <dht11_getdata>
		humidity=data;
 348:	89 81       	ldd	r24, Y+1	; 0x01
		sprintf(buf, "humidity: %d", humidity); ////humidity:
 34a:	1f 92       	push	r1
 34c:	8f 93       	push	r24
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	1f 93       	push	r17
 358:	0f 93       	push	r16
 35a:	0e 94 66 04 	call	0x8cc	; 0x8cc <sprintf>
		strTransmit(buf);
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 27 04 	call	0x84e	; 0x84e <strTransmit>
		memset(buf, 0x00, 40);
 364:	f8 01       	movw	r30, r16
 366:	11 92       	st	Z+, r1
 368:	fa 94       	dec	r15
 36a:	e9 f7       	brne	.-6      	; 0x366 <main+0xb6>
 36c:	ff ef       	ldi	r31, 0xFF	; 255
 36e:	23 ed       	ldi	r18, 0xD3	; 211
 370:	80 e3       	ldi	r24, 0x30	; 48
 372:	f1 50       	subi	r31, 0x01	; 1
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0xc2>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0xcc>
 37c:	00 00       	nop
		_delay_ms( 1000 );
	 
	 
		sprintf( p, "soil : %d \n", ReadADC2() ); // ADC2의 값을 문자열로 변경. 채널4  //soil :
 37e:	0e 94 64 00 	call	0xc8	; 0xc8 <ReadADC2>
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	8d e1       	ldi	r24, 0x1D	; 29
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	06 e7       	ldi	r16, 0x76	; 118
 390:	11 e0       	ldi	r17, 0x01	; 1
 392:	1f 93       	push	r17
 394:	0f 93       	push	r16
 396:	0e 94 66 04 	call	0x8cc	; 0x8cc <sprintf>
		Puts0( p );
 39a:	c8 01       	movw	r24, r16
 39c:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	a3 ed       	ldi	r26, 0xD3	; 211
 3a4:	b0 e3       	ldi	r27, 0x30	; 48
 3a6:	91 50       	subi	r25, 0x01	; 1
 3a8:	a0 40       	sbci	r26, 0x00	; 0
 3aa:	b0 40       	sbci	r27, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0xf6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x100>
 3b0:	00 00       	nop
		_delay_ms( 1000 );
     
		sprintf( p, "light : %d \n", ReadADC1() ); // ADC1의 값을 문자열로 변경. 채널1   //light :
 3b2:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadADC1>
 3b6:	9f 93       	push	r25
 3b8:	8f 93       	push	r24
 3ba:	89 e2       	ldi	r24, 0x29	; 41
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	1f 93       	push	r17
 3c4:	0f 93       	push	r16
 3c6:	0e 94 66 04 	call	0x8cc	; 0x8cc <sprintf>
		Puts0( p );
 3ca:	c8 01       	movw	r24, r16
 3cc:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
 3d0:	ef ef       	ldi	r30, 0xFF	; 255
 3d2:	f3 ed       	ldi	r31, 0xD3	; 211
 3d4:	20 e3       	ldi	r18, 0x30	; 48
 3d6:	e1 50       	subi	r30, 0x01	; 1
 3d8:	f0 40       	sbci	r31, 0x00	; 0
 3da:	20 40       	sbci	r18, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x126>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x130>
 3e0:	00 00       	nop
		_delay_ms( 1000 );
		
		
		Fire();
 3e2:	0e 94 24 02 	call	0x448	; 0x448 <Fire>
	 
     
		water();
 3e6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <water>
	
	
	    uint8_t pulse_width = read_ir();   //IR센서및 스텝모터 관련
 3ea:	0e 94 a6 03 	call	0x74c	; 0x74c <read_ir>
 3ee:	18 2f       	mov	r17, r24
		Pulse();
 3f0:	0e 94 c2 03 	call	0x784	; 0x784 <Pulse>
		if (pulse_width > 0 && forward == true)
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	11 23       	and	r17, r17
 400:	49 f0       	breq	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 402:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 406:	88 23       	and	r24, r24
 408:	29 f0       	breq	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			step_forward();
 40a:	0e 94 bc 02 	call	0x578	; 0x578 <step_forward>
			forward = false;
 40e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	6b cf       	rjmp	.-298    	; 0x2ea <main+0x3a>
		}
		else if(pulse_width > 0 && forward == false)
 414:	11 23       	and	r17, r17
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	68 cf       	rjmp	.-304    	; 0x2ea <main+0x3a>
 41a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41e:	81 11       	cpse	r24, r1
 420:	64 cf       	rjmp	.-312    	; 0x2ea <main+0x3a>
		{
			step_backward();
 422:	0e 94 31 03 	call	0x662	; 0x662 <step_backward>
			forward = true;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 42c:	5e cf       	rjmp	.-324    	; 0x2ea <main+0x3a>

0000042e <Sensor_init>:
#include "../uart/uart.h"
#include "../ADC/ADC.h"

void Sensor_init()
{
	DDRD |= (1 << RELAY4_PIN); //1채널 릴레이 모듈 핀을 출력으로 설정
 42e:	8a b1       	in	r24, 0x0a	; 10
 430:	84 60       	ori	r24, 0x04	; 4
 432:	8a b9       	out	0x0a, r24	; 10
	
	// 수위센서 핀을 풀업 모드로 설정
	DDRC &= ~(1 << SENSOR1_PIN);
 434:	87 b1       	in	r24, 0x07	; 7
 436:	8e 7f       	andi	r24, 0xFE	; 254
 438:	87 b9       	out	0x07, r24	; 7
	
	// 내부 풀업 저항 사용
	PORTC |= (1 << SENSOR1_PIN);
 43a:	88 b1       	in	r24, 0x08	; 8
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	88 b9       	out	0x08, r24	; 8
	
	// 불꽃 감지 센서 모듈 핀을 입력으로 설정
	PORTC |= (1 << SENSOR2_PIN);
 440:	88 b1       	in	r24, 0x08	; 8
 442:	82 60       	ori	r24, 0x02	; 2
 444:	88 b9       	out	0x08, r24	; 8
 446:	08 95       	ret

00000448 <Fire>:
}

void Fire()
{
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
	if (PINC & (1 << SENSOR2_PIN))
 44c:	31 9b       	sbis	0x06, 1	; 6
 44e:	1d c0       	rjmp	.+58     	; 0x48a <Fire+0x42>
	{
		
		sprintf( p, "fire : 0 \n" ); //불꽃 미감지
 450:	8b e0       	ldi	r24, 0x0B	; 11
 452:	e6 e3       	ldi	r30, 0x36	; 54
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	a6 e7       	ldi	r26, 0x76	; 118
 458:	b1 e0       	ldi	r27, 0x01	; 1
 45a:	01 90       	ld	r0, Z+
 45c:	0d 92       	st	X+, r0
 45e:	8a 95       	dec	r24
 460:	e1 f7       	brne	.-8      	; 0x45a <Fire+0x12>
		Puts0( p );
 462:	86 e7       	ldi	r24, 0x76	; 118
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
		// 불꽃이 감지되지 않았다면 부저 끄기
		PORTD &= ~(1 << BUZZER_PIN);
 46a:	8b b1       	in	r24, 0x0b	; 11
 46c:	87 7f       	andi	r24, 0xF7	; 247
 46e:	8b b9       	out	0x0b, r24	; 11
		DDRD &= ~(1 << BUZZER_PIN);
 470:	8a b1       	in	r24, 0x0a	; 10
 472:	87 7f       	andi	r24, 0xF7	; 247
 474:	8a b9       	out	0x0a, r24	; 10
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	83 ed       	ldi	r24, 0xD3	; 211
 47a:	90 e3       	ldi	r25, 0x30	; 48
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <Fire+0x34>
 484:	00 c0       	rjmp	.+0      	; 0x486 <Fire+0x3e>
 486:	00 00       	nop
 488:	1c c0       	rjmp	.+56     	; 0x4c2 <Fire+0x7a>
		
		
	}
	else
	{
		sprintf( p, "fire : 1 \n" );  //불꽃감지!
 48a:	8b e0       	ldi	r24, 0x0B	; 11
 48c:	e1 e4       	ldi	r30, 0x41	; 65
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	a6 e7       	ldi	r26, 0x76	; 118
 492:	b1 e0       	ldi	r27, 0x01	; 1
 494:	01 90       	ld	r0, Z+
 496:	0d 92       	st	X+, r0
 498:	8a 95       	dec	r24
 49a:	e1 f7       	brne	.-8      	; 0x494 <Fire+0x4c>
		Puts0( p );
 49c:	86 e7       	ldi	r24, 0x76	; 118
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
		// 부저 핀을 출력으로 설정
		init_pwm();
 4a4:	0e 94 75 00 	call	0xea	; 0xea <init_pwm>
		
		for(int r=1;r<=5;r++)
 4a8:	c1 e0       	ldi	r28, 0x01	; 1
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <Fire+0x74>
		{
			// 불꽃이 감지되었다면 피에조 부저 울리기
			play_tone(500, 10000);
 4ae:	60 e1       	ldi	r22, 0x10	; 16
 4b0:	77 e2       	ldi	r23, 0x27	; 39
 4b2:	84 ef       	ldi	r24, 0xF4	; 244
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 83 00 	call	0x106	; 0x106 <play_tone>
		sprintf( p, "fire : 1 \n" );  //불꽃감지!
		Puts0( p );
		// 부저 핀을 출력으로 설정
		init_pwm();
		
		for(int r=1;r<=5;r++)
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	c6 30       	cpi	r28, 0x06	; 6
 4be:	d1 05       	cpc	r29, r1
 4c0:	b4 f3       	brlt	.-20     	; 0x4ae <Fire+0x66>
			// 불꽃이 감지되었다면 피에조 부저 울리기
			play_tone(500, 10000);
		}
		
	}
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <water>:

void water()
{
	//수위센서 관련
	if (PINC & (1 << SENSOR1_PIN))  // 수위센서 핀이 LOW인 경우
 4c8:	30 9b       	sbis	0x06, 0	; 6
 4ca:	1a c0       	rjmp	.+52     	; 0x500 <water+0x38>
	{
		sprintf( p, "water : 0 \n" ); //물이 부족합니다.
 4cc:	8c e0       	ldi	r24, 0x0C	; 12
 4ce:	ec e4       	ldi	r30, 0x4C	; 76
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	a6 e7       	ldi	r26, 0x76	; 118
 4d4:	b1 e0       	ldi	r27, 0x01	; 1
 4d6:	01 90       	ld	r0, Z+
 4d8:	0d 92       	st	X+, r0
 4da:	8a 95       	dec	r24
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <water+0xe>
		Puts0( p );
 4de:	86 e7       	ldi	r24, 0x76	; 118
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	39 e6       	ldi	r19, 0x69	; 105
 4ea:	88 e1       	ldi	r24, 0x18	; 24
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	30 40       	sbci	r19, 0x00	; 0
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <water+0x24>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <water+0x2e>
 4f6:	00 00       	nop
		_delay_ms( 500 );
		PORTD |= (1 << RELAY4_PIN);
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	84 60       	ori	r24, 0x04	; 4
 4fc:	8b b9       	out	0x0b, r24	; 11
 4fe:	08 95       	ret
		
	}
	
	else
	{
		sprintf( p, "water : 1 \n" );
 500:	8c e0       	ldi	r24, 0x0C	; 12
 502:	e8 e5       	ldi	r30, 0x58	; 88
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	a6 e7       	ldi	r26, 0x76	; 118
 508:	b1 e0       	ldi	r27, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <water+0x42>
		Puts0( p );
 512:	86 e7       	ldi	r24, 0x76	; 118
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 37 04 	call	0x86e	; 0x86e <Puts0>
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	29 e6       	ldi	r18, 0x69	; 105
 51e:	38 e1       	ldi	r19, 0x18	; 24
 520:	91 50       	subi	r25, 0x01	; 1
 522:	20 40       	sbci	r18, 0x00	; 0
 524:	30 40       	sbci	r19, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <water+0x58>
 528:	00 c0       	rjmp	.+0      	; 0x52a <water+0x62>
 52a:	00 00       	nop
		_delay_ms( 500 );
		
		if(ReadADC2()<440 )//수중펌프 동작관련
 52c:	0e 94 64 00 	call	0xc8	; 0xc8 <ReadADC2>
 530:	88 3b       	cpi	r24, 0xB8	; 184
 532:	91 40       	sbci	r25, 0x01	; 1
 534:	88 f4       	brcc	.+34     	; 0x558 <water+0x90>
		{
			PORTD &= ~(1 << RELAY4_PIN);
 536:	8b b1       	in	r24, 0x0b	; 11
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	8b b9       	out	0x0b, r24	; 11
 53c:	3a ea       	ldi	r19, 0xAA	; 170
 53e:	86 ee       	ldi	r24, 0xE6	; 230
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	31 50       	subi	r19, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	d9 f7       	brne	.-10     	; 0x544 <water+0x7c>
 54e:	00 00       	nop
			_delay_ms( 10000 );
			PORTD |= (1 << RELAY4_PIN);
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	84 60       	ori	r24, 0x04	; 4
 554:	8b b9       	out	0x0b, r24	; 11
 556:	08 95       	ret
			
		}
		
		else
		{
			PORTD |= (1 << RELAY4_PIN);
 558:	8b b1       	in	r24, 0x0b	; 11
 55a:	84 60       	ori	r24, 0x04	; 4
 55c:	8b b9       	out	0x0b, r24	; 11
 55e:	08 95       	ret

00000560 <Step_init>:
#include "../uart/uart.h"


void Step_init() //핀설정
{
	DDRC &= ~(1<<IR_IN_PIN); // Set IR input pin as input
 560:	87 b1       	in	r24, 0x07	; 7
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<IR_IN_PIN); // Enable internal pull-up resistor for IR input pin
 566:	88 b1       	in	r24, 0x08	; 8
 568:	84 60       	ori	r24, 0x04	; 4
 56a:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1<<STEP_1_PIN)|(1<<STEP_2_PIN)|(1<<STEP_3_PIN)|(1<<STEP_4_PIN); // Set step motor pins as output
 56c:	8a b1       	in	r24, 0x0a	; 10
 56e:	80 6f       	ori	r24, 0xF0	; 240
 570:	8a b9       	out	0x0a, r24	; 10
	Init_UART0();
 572:	0e 94 06 04 	call	0x80c	; 0x80c <Init_UART0>
 576:	08 95       	ret

00000578 <step_forward>:
}

void step_forward()   // 정방향
{
	for(int i=0; i < 64; i++)
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	6b c0       	rjmp	.+214    	; 0x654 <step_forward+0xdc>
	{
		for(int j=0; j<8;j++)
		{
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN));   // low
 57e:	8b b1       	in	r24, 0x0b	; 11
 580:	8f 78       	andi	r24, 0x8F	; 143
 582:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_4_PIN);      // high
 584:	8b b1       	in	r24, 0x0b	; 11
 586:	80 68       	ori	r24, 0x80	; 128
 588:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58a:	8f e9       	ldi	r24, 0x9F	; 159
 58c:	9f e0       	ldi	r25, 0x0F	; 15
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <step_forward+0x16>
 592:	00 c0       	rjmp	.+0      	; 0x594 <step_forward+0x1c>
 594:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN));   // low
 596:	8b b1       	in	r24, 0x0b	; 11
 598:	8f 7c       	andi	r24, 0xCF	; 207
 59a:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_3_PIN) | (1 << STEP_4_PIN);      // high
 59c:	8b b1       	in	r24, 0x0b	; 11
 59e:	80 6c       	ori	r24, 0xC0	; 192
 5a0:	8b b9       	out	0x0b, r24	; 11
 5a2:	8f e9       	ldi	r24, 0x9F	; 159
 5a4:	9f e0       	ldi	r25, 0x0F	; 15
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <step_forward+0x2e>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <step_forward+0x34>
 5ac:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_4_PIN));   // low
 5ae:	8b b1       	in	r24, 0x0b	; 11
 5b0:	8f 74       	andi	r24, 0x4F	; 79
 5b2:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_3_PIN);      // high
 5b4:	8b b1       	in	r24, 0x0b	; 11
 5b6:	80 64       	ori	r24, 0x40	; 64
 5b8:	8b b9       	out	0x0b, r24	; 11
 5ba:	8f e9       	ldi	r24, 0x9F	; 159
 5bc:	9f e0       	ldi	r25, 0x0F	; 15
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <step_forward+0x46>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <step_forward+0x4c>
 5c4:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_4_PIN));   // low
 5c6:	8b b1       	in	r24, 0x0b	; 11
 5c8:	8f 76       	andi	r24, 0x6F	; 111
 5ca:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_2_PIN) | (1 << STEP_3_PIN);      // high
 5cc:	8b b1       	in	r24, 0x0b	; 11
 5ce:	80 66       	ori	r24, 0x60	; 96
 5d0:	8b b9       	out	0x0b, r24	; 11
 5d2:	8f e9       	ldi	r24, 0x9F	; 159
 5d4:	9f e0       	ldi	r25, 0x0F	; 15
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <step_forward+0x5e>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <step_forward+0x64>
 5dc:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN));   // low
 5de:	8b b1       	in	r24, 0x0b	; 11
 5e0:	8f 72       	andi	r24, 0x2F	; 47
 5e2:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_2_PIN);      // high
 5e4:	8b b1       	in	r24, 0x0b	; 11
 5e6:	80 62       	ori	r24, 0x20	; 32
 5e8:	8b b9       	out	0x0b, r24	; 11
 5ea:	8f e9       	ldi	r24, 0x9F	; 159
 5ec:	9f e0       	ldi	r25, 0x0F	; 15
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <step_forward+0x76>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <step_forward+0x7c>
 5f4:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_3_PIN) | (1 << STEP_4_PIN));   // low
 5f6:	8b b1       	in	r24, 0x0b	; 11
 5f8:	8f 73       	andi	r24, 0x3F	; 63
 5fa:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_1_PIN) | (1 << STEP_2_PIN);      // high
 5fc:	8b b1       	in	r24, 0x0b	; 11
 5fe:	80 63       	ori	r24, 0x30	; 48
 600:	8b b9       	out	0x0b, r24	; 11
 602:	8f e9       	ldi	r24, 0x9F	; 159
 604:	9f e0       	ldi	r25, 0x0F	; 15
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <step_forward+0x8e>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <step_forward+0x94>
 60c:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN));   // low
 60e:	8b b1       	in	r24, 0x0b	; 11
 610:	8f 71       	andi	r24, 0x1F	; 31
 612:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_1_PIN);      // high
 614:	8b b1       	in	r24, 0x0b	; 11
 616:	80 61       	ori	r24, 0x10	; 16
 618:	8b b9       	out	0x0b, r24	; 11
 61a:	8f e9       	ldi	r24, 0x9F	; 159
 61c:	9f e0       	ldi	r25, 0x0F	; 15
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <step_forward+0xa6>
 622:	00 c0       	rjmp	.+0      	; 0x624 <step_forward+0xac>
 624:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN));   // low
 626:	8b b1       	in	r24, 0x0b	; 11
 628:	8f 79       	andi	r24, 0x9F	; 159
 62a:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_4_PIN) | (1 << STEP_1_PIN);      // high
 62c:	8b b1       	in	r24, 0x0b	; 11
 62e:	80 69       	ori	r24, 0x90	; 144
 630:	8b b9       	out	0x0b, r24	; 11
 632:	8f e9       	ldi	r24, 0x9F	; 159
 634:	9f e0       	ldi	r25, 0x0F	; 15
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <step_forward+0xbe>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <step_forward+0xc4>
 63c:	00 00       	nop

void step_forward()   // 정방향
{
	for(int i=0; i < 64; i++)
	{
		for(int j=0; j<8;j++)
 63e:	2f 5f       	subi	r18, 0xFF	; 255
 640:	3f 4f       	sbci	r19, 0xFF	; 255
 642:	02 c0       	rjmp	.+4      	; 0x648 <step_forward+0xd0>
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	28 30       	cpi	r18, 0x08	; 8
 64a:	31 05       	cpc	r19, r1
 64c:	0c f4       	brge	.+2      	; 0x650 <step_forward+0xd8>
 64e:	97 cf       	rjmp	.-210    	; 0x57e <step_forward+0x6>
	Init_UART0();
}

void step_forward()   // 정방향
{
	for(int i=0; i < 64; i++)
 650:	4f 5f       	subi	r20, 0xFF	; 255
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	40 34       	cpi	r20, 0x40	; 64
 656:	51 05       	cpc	r21, r1
 658:	ac f3       	brlt	.-22     	; 0x644 <step_forward+0xcc>
			PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN));   // low
			PORTD |= (1 << STEP_4_PIN) | (1 << STEP_1_PIN);      // high
			_delay_us(1000);
		}
	}
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)| (1 << STEP_4_PIN));
 65a:	8b b1       	in	r24, 0x0b	; 11
 65c:	8f 70       	andi	r24, 0x0F	; 15
 65e:	8b b9       	out	0x0b, r24	; 11
 660:	08 95       	ret

00000662 <step_backward>:
}

void step_backward() //역방향
{
	for(int i=0; i < 64; i++)
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	6b c0       	rjmp	.+214    	; 0x73e <step_backward+0xdc>
	{
		for(int j=0; j<8;j++)
		{
			PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)); // low
 668:	8b b1       	in	r24, 0x0b	; 11
 66a:	8f 79       	andi	r24, 0x9F	; 159
 66c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_4_PIN) | (1 << STEP_1_PIN); // high
 66e:	8b b1       	in	r24, 0x0b	; 11
 670:	80 69       	ori	r24, 0x90	; 144
 672:	8b b9       	out	0x0b, r24	; 11
 674:	8f e9       	ldi	r24, 0x9F	; 159
 676:	9f e0       	ldi	r25, 0x0F	; 15
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <step_backward+0x16>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <step_backward+0x1c>
 67e:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN)); // low
 680:	8b b1       	in	r24, 0x0b	; 11
 682:	8f 71       	andi	r24, 0x1F	; 31
 684:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_1_PIN); // high
 686:	8b b1       	in	r24, 0x0b	; 11
 688:	80 61       	ori	r24, 0x10	; 16
 68a:	8b b9       	out	0x0b, r24	; 11
 68c:	8f e9       	ldi	r24, 0x9F	; 159
 68e:	9f e0       	ldi	r25, 0x0F	; 15
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <step_backward+0x2e>
 694:	00 c0       	rjmp	.+0      	; 0x696 <step_backward+0x34>
 696:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_3_PIN) | (1 << STEP_4_PIN)); // low
 698:	8b b1       	in	r24, 0x0b	; 11
 69a:	8f 73       	andi	r24, 0x3F	; 63
 69c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_1_PIN) | (1 << STEP_2_PIN); // high
 69e:	8b b1       	in	r24, 0x0b	; 11
 6a0:	80 63       	ori	r24, 0x30	; 48
 6a2:	8b b9       	out	0x0b, r24	; 11
 6a4:	8f e9       	ldi	r24, 0x9F	; 159
 6a6:	9f e0       	ldi	r25, 0x0F	; 15
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <step_backward+0x46>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <step_backward+0x4c>
 6ae:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN)); // low
 6b0:	8b b1       	in	r24, 0x0b	; 11
 6b2:	8f 72       	andi	r24, 0x2F	; 47
 6b4:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_2_PIN); // high
 6b6:	8b b1       	in	r24, 0x0b	; 11
 6b8:	80 62       	ori	r24, 0x20	; 32
 6ba:	8b b9       	out	0x0b, r24	; 11
 6bc:	8f e9       	ldi	r24, 0x9F	; 159
 6be:	9f e0       	ldi	r25, 0x0F	; 15
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <step_backward+0x5e>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <step_backward+0x64>
 6c6:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_4_PIN)); // low
 6c8:	8b b1       	in	r24, 0x0b	; 11
 6ca:	8f 76       	andi	r24, 0x6F	; 111
 6cc:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_2_PIN) | (1 << STEP_3_PIN); // high
 6ce:	8b b1       	in	r24, 0x0b	; 11
 6d0:	80 66       	ori	r24, 0x60	; 96
 6d2:	8b b9       	out	0x0b, r24	; 11
 6d4:	8f e9       	ldi	r24, 0x9F	; 159
 6d6:	9f e0       	ldi	r25, 0x0F	; 15
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <step_backward+0x76>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <step_backward+0x7c>
 6de:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_4_PIN)); // low
 6e0:	8b b1       	in	r24, 0x0b	; 11
 6e2:	8f 74       	andi	r24, 0x4F	; 79
 6e4:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_3_PIN); // high
 6e6:	8b b1       	in	r24, 0x0b	; 11
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	8b b9       	out	0x0b, r24	; 11
 6ec:	8f e9       	ldi	r24, 0x9F	; 159
 6ee:	9f e0       	ldi	r25, 0x0F	; 15
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <step_backward+0x8e>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <step_backward+0x94>
 6f6:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)); // low
 6f8:	8b b1       	in	r24, 0x0b	; 11
 6fa:	8f 7c       	andi	r24, 0xCF	; 207
 6fc:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_3_PIN) | (1 << STEP_4_PIN); // high
 6fe:	8b b1       	in	r24, 0x0b	; 11
 700:	80 6c       	ori	r24, 0xC0	; 192
 702:	8b b9       	out	0x0b, r24	; 11
 704:	8f e9       	ldi	r24, 0x9F	; 159
 706:	9f e0       	ldi	r25, 0x0F	; 15
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <step_backward+0xa6>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <step_backward+0xac>
 70e:	00 00       	nop
			_delay_us(1000);
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)); // low
 710:	8b b1       	in	r24, 0x0b	; 11
 712:	8f 78       	andi	r24, 0x8F	; 143
 714:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << STEP_4_PIN); // high
 716:	8b b1       	in	r24, 0x0b	; 11
 718:	80 68       	ori	r24, 0x80	; 128
 71a:	8b b9       	out	0x0b, r24	; 11
 71c:	8f e9       	ldi	r24, 0x9F	; 159
 71e:	9f e0       	ldi	r25, 0x0F	; 15
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <step_backward+0xbe>
 724:	00 c0       	rjmp	.+0      	; 0x726 <step_backward+0xc4>
 726:	00 00       	nop

void step_backward() //역방향
{
	for(int i=0; i < 64; i++)
	{
		for(int j=0; j<8;j++)
 728:	2f 5f       	subi	r18, 0xFF	; 255
 72a:	3f 4f       	sbci	r19, 0xFF	; 255
 72c:	02 c0       	rjmp	.+4      	; 0x732 <step_backward+0xd0>
 72e:	20 e0       	ldi	r18, 0x00	; 0
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	28 30       	cpi	r18, 0x08	; 8
 734:	31 05       	cpc	r19, r1
 736:	0c f4       	brge	.+2      	; 0x73a <step_backward+0xd8>
 738:	97 cf       	rjmp	.-210    	; 0x668 <step_backward+0x6>
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)| (1 << STEP_4_PIN));
}

void step_backward() //역방향
{
	for(int i=0; i < 64; i++)
 73a:	4f 5f       	subi	r20, 0xFF	; 255
 73c:	5f 4f       	sbci	r21, 0xFF	; 255
 73e:	40 34       	cpi	r20, 0x40	; 64
 740:	51 05       	cpc	r21, r1
 742:	ac f3       	brlt	.-22     	; 0x72e <step_backward+0xcc>
			PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)); // low
			PORTD |= (1 << STEP_4_PIN); // high
			_delay_us(1000);
		}
	}
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)| (1 << STEP_4_PIN));
 744:	8b b1       	in	r24, 0x0b	; 11
 746:	8f 70       	andi	r24, 0x0F	; 15
 748:	8b b9       	out	0x0b, r24	; 11
 74a:	08 95       	ret

0000074c <read_ir>:
}

uint8_t read_ir() //IR신호 수신
{
	uint8_t pulse_width = 0;
	int timeout = 100;
 74c:	84 e6       	ldi	r24, 0x64	; 100
 74e:	90 e0       	ldi	r25, 0x00	; 0
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
 750:	07 c0       	rjmp	.+14     	; 0x760 <read_ir+0x14>
 752:	ef e1       	ldi	r30, 0x1F	; 31
 754:	fe e4       	ldi	r31, 0x4E	; 78
 756:	31 97       	sbiw	r30, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <read_ir+0xa>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <read_ir+0x10>
 75c:	00 00       	nop
	{
		_delay_us(5000);
		timeout--;
 75e:	01 97       	sbiw	r24, 0x01	; 1

uint8_t read_ir() //IR신호 수신
{
	uint8_t pulse_width = 0;
	int timeout = 100;
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
 760:	32 9b       	sbis	0x06, 2	; 6
 762:	0c c0       	rjmp	.+24     	; 0x77c <read_ir+0x30>
 764:	00 97       	sbiw	r24, 0x00	; 0
 766:	a9 f7       	brne	.-22     	; 0x752 <read_ir+0x6>
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	09 c0       	rjmp	.+18     	; 0x77e <read_ir+0x32>
 76c:	ef e1       	ldi	r30, 0x1F	; 31
 76e:	fe e4       	ldi	r31, 0x4E	; 78
 770:	31 97       	sbiw	r30, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <read_ir+0x24>
 774:	00 c0       	rjmp	.+0      	; 0x776 <read_ir+0x2a>
 776:	00 00       	nop
		timeout--;
	}
	while(!(PINC & (1<<IR_IN_PIN))) // Measure IR signal pulse width
	{
		_delay_us(5000);
		pulse_width++;
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	01 c0       	rjmp	.+2      	; 0x77e <read_ir+0x32>
 77c:	80 e0       	ldi	r24, 0x00	; 0
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
	{
		_delay_us(5000);
		timeout--;
	}
	while(!(PINC & (1<<IR_IN_PIN))) // Measure IR signal pulse width
 77e:	32 9b       	sbis	0x06, 2	; 6
 780:	f5 cf       	rjmp	.-22     	; 0x76c <read_ir+0x20>
	{
		_delay_us(5000);
		pulse_width++;
	}
	return pulse_width;
}
 782:	08 95       	ret

00000784 <Pulse>:

void Pulse()
{
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	60 97       	sbiw	r28, 0x10	; 16
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	sprintf(buffer, "Pulse width: %d\r\n", read_ir());
 798:	0e 94 a6 03 	call	0x74c	; 0x74c <read_ir>
 79c:	1f 92       	push	r1
 79e:	8f 93       	push	r24
 7a0:	84 e6       	ldi	r24, 0x64	; 100
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	9f 93       	push	r25
 7a6:	8f 93       	push	r24
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	9f 93       	push	r25
 7ae:	8f 93       	push	r24
 7b0:	0e 94 66 04 	call	0x8cc	; 0x8cc <sprintf>
	for (int i = 0; buffer[i] != 0; i++)
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <Pulse+0x52>
	{
		while (!(UCSR0A & (1 << UDRE0)));
 7c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7ca:	85 ff       	sbrs	r24, 5
 7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <Pulse+0x42>
		UDR0 = buffer[i];
 7ce:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

void Pulse()
{
	char buffer[16];
	sprintf(buffer, "Pulse width: %d\r\n", read_ir());
	for (int i = 0; buffer[i] != 0; i++)
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	e1 e0       	ldi	r30, 0x01	; 1
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	ec 0f       	add	r30, r28
 7dc:	fd 1f       	adc	r31, r29
 7de:	e2 0f       	add	r30, r18
 7e0:	f3 1f       	adc	r31, r19
 7e2:	90 81       	ld	r25, Z
 7e4:	91 11       	cpse	r25, r1
 7e6:	ef cf       	rjmp	.-34     	; 0x7c6 <Pulse+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	83 ed       	ldi	r24, 0xD3	; 211
 7ec:	90 e3       	ldi	r25, 0x30	; 48
 7ee:	21 50       	subi	r18, 0x01	; 1
 7f0:	80 40       	sbci	r24, 0x00	; 0
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <Pulse+0x6a>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <Pulse+0x74>
 7f8:	00 00       	nop
	{
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = buffer[i];
	}
	_delay_ms(1000);
 7fa:	60 96       	adiw	r28, 0x10	; 16
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <Init_UART0>:
	
	//   데이터가 들어오지 않았다면 while문 반복
	while ( !( UCSR0A & 0x20 ) );   //   5번째 bit를 사용
	
	//   데이터를 전송
	UDR0 = c;
 80c:	88 e1       	ldi	r24, 0x18	; 24
 80e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 812:	86 e0       	ldi	r24, 0x06	; 6
 814:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 818:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 81c:	87 e6       	ldi	r24, 0x67	; 103
 81e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 822:	08 95       	ret

00000824 <USART_Init>:
 824:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 828:	88 e1       	ldi	r24, 0x18	; 24
 82a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 82e:	86 e0       	ldi	r24, 0x06	; 6
 830:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 834:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 838:	87 e6       	ldi	r24, 0x67	; 103
 83a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 83e:	08 95       	ret

00000840 <USART_Transmit>:
 840:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 844:	95 ff       	sbrs	r25, 5
 846:	fc cf       	rjmp	.-8      	; 0x840 <USART_Transmit>
 848:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 84c:	08 95       	ret

0000084e <strTransmit>:
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	ec 01       	movw	r28, r24
 854:	03 c0       	rjmp	.+6      	; 0x85c <strTransmit+0xe>
 856:	0e 94 20 04 	call	0x840	; 0x840 <USART_Transmit>
 85a:	21 96       	adiw	r28, 0x01	; 1
 85c:	88 81       	ld	r24, Y
 85e:	81 11       	cpse	r24, r1
 860:	fa cf       	rjmp	.-12     	; 0x856 <strTransmit+0x8>
 862:	8a e0       	ldi	r24, 0x0A	; 10
 864:	0e 94 20 04 	call	0x840	; 0x840 <USART_Transmit>
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

0000086e <Puts0>:
}

void Puts0(char* str)
{
 86e:	fc 01       	movw	r30, r24
	while(*str)
 870:	07 c0       	rjmp	.+14     	; 0x880 <Puts0+0x12>
	{
		while(!(UCSR0A & (1 << UDRE0)));
 872:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 876:	95 ff       	sbrs	r25, 5
 878:	fc cf       	rjmp	.-8      	; 0x872 <Puts0+0x4>
		UDR0 = *str++;
 87a:	31 96       	adiw	r30, 0x01	; 1
 87c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = c;
}

void Puts0(char* str)
{
	while(*str)
 880:	80 81       	ld	r24, Z
 882:	81 11       	cpse	r24, r1
 884:	f6 cf       	rjmp	.-20     	; 0x872 <Puts0+0x4>
	{
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = *str++;
	}
}
 886:	08 95       	ret

00000888 <__udivmodsi4>:
 888:	a1 e2       	ldi	r26, 0x21	; 33
 88a:	1a 2e       	mov	r1, r26
 88c:	aa 1b       	sub	r26, r26
 88e:	bb 1b       	sub	r27, r27
 890:	fd 01       	movw	r30, r26
 892:	0d c0       	rjmp	.+26     	; 0x8ae <__udivmodsi4_ep>

00000894 <__udivmodsi4_loop>:
 894:	aa 1f       	adc	r26, r26
 896:	bb 1f       	adc	r27, r27
 898:	ee 1f       	adc	r30, r30
 89a:	ff 1f       	adc	r31, r31
 89c:	a2 17       	cp	r26, r18
 89e:	b3 07       	cpc	r27, r19
 8a0:	e4 07       	cpc	r30, r20
 8a2:	f5 07       	cpc	r31, r21
 8a4:	20 f0       	brcs	.+8      	; 0x8ae <__udivmodsi4_ep>
 8a6:	a2 1b       	sub	r26, r18
 8a8:	b3 0b       	sbc	r27, r19
 8aa:	e4 0b       	sbc	r30, r20
 8ac:	f5 0b       	sbc	r31, r21

000008ae <__udivmodsi4_ep>:
 8ae:	66 1f       	adc	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a 94       	dec	r1
 8b8:	69 f7       	brne	.-38     	; 0x894 <__udivmodsi4_loop>
 8ba:	60 95       	com	r22
 8bc:	70 95       	com	r23
 8be:	80 95       	com	r24
 8c0:	90 95       	com	r25
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	bd 01       	movw	r22, r26
 8c8:	cf 01       	movw	r24, r30
 8ca:	08 95       	ret

000008cc <sprintf>:
 8cc:	ae e0       	ldi	r26, 0x0E	; 14
 8ce:	b0 e0       	ldi	r27, 0x00	; 0
 8d0:	ec e6       	ldi	r30, 0x6C	; 108
 8d2:	f4 e0       	ldi	r31, 0x04	; 4
 8d4:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__prologue_saves__+0x1c>
 8d8:	0d 89       	ldd	r16, Y+21	; 0x15
 8da:	1e 89       	ldd	r17, Y+22	; 0x16
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	8c 83       	std	Y+4, r24	; 0x04
 8e0:	1a 83       	std	Y+2, r17	; 0x02
 8e2:	09 83       	std	Y+1, r16	; 0x01
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	9f e7       	ldi	r25, 0x7F	; 127
 8e8:	9e 83       	std	Y+6, r25	; 0x06
 8ea:	8d 83       	std	Y+5, r24	; 0x05
 8ec:	ae 01       	movw	r20, r28
 8ee:	47 5e       	subi	r20, 0xE7	; 231
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	6f 89       	ldd	r22, Y+23	; 0x17
 8f4:	78 8d       	ldd	r23, Y+24	; 0x18
 8f6:	ce 01       	movw	r24, r28
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	0e 94 88 04 	call	0x910	; 0x910 <vfprintf>
 8fe:	ef 81       	ldd	r30, Y+7	; 0x07
 900:	f8 85       	ldd	r31, Y+8	; 0x08
 902:	e0 0f       	add	r30, r16
 904:	f1 1f       	adc	r31, r17
 906:	10 82       	st	Z, r1
 908:	2e 96       	adiw	r28, 0x0e	; 14
 90a:	e4 e0       	ldi	r30, 0x04	; 4
 90c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__epilogue_restores__+0x1c>

00000910 <vfprintf>:
 910:	ab e0       	ldi	r26, 0x0B	; 11
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	ee e8       	ldi	r30, 0x8E	; 142
 916:	f4 e0       	ldi	r31, 0x04	; 4
 918:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__prologue_saves__>
 91c:	6c 01       	movw	r12, r24
 91e:	7b 01       	movw	r14, r22
 920:	8a 01       	movw	r16, r20
 922:	fc 01       	movw	r30, r24
 924:	17 82       	std	Z+7, r1	; 0x07
 926:	16 82       	std	Z+6, r1	; 0x06
 928:	83 81       	ldd	r24, Z+3	; 0x03
 92a:	81 ff       	sbrs	r24, 1
 92c:	cc c1       	rjmp	.+920    	; 0xcc6 <vfprintf+0x3b6>
 92e:	ce 01       	movw	r24, r28
 930:	01 96       	adiw	r24, 0x01	; 1
 932:	3c 01       	movw	r6, r24
 934:	f6 01       	movw	r30, r12
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	f7 01       	movw	r30, r14
 93a:	93 fd       	sbrc	r25, 3
 93c:	85 91       	lpm	r24, Z+
 93e:	93 ff       	sbrs	r25, 3
 940:	81 91       	ld	r24, Z+
 942:	7f 01       	movw	r14, r30
 944:	88 23       	and	r24, r24
 946:	09 f4       	brne	.+2      	; 0x94a <vfprintf+0x3a>
 948:	ba c1       	rjmp	.+884    	; 0xcbe <vfprintf+0x3ae>
 94a:	85 32       	cpi	r24, 0x25	; 37
 94c:	39 f4       	brne	.+14     	; 0x95c <vfprintf+0x4c>
 94e:	93 fd       	sbrc	r25, 3
 950:	85 91       	lpm	r24, Z+
 952:	93 ff       	sbrs	r25, 3
 954:	81 91       	ld	r24, Z+
 956:	7f 01       	movw	r14, r30
 958:	85 32       	cpi	r24, 0x25	; 37
 95a:	29 f4       	brne	.+10     	; 0x966 <vfprintf+0x56>
 95c:	b6 01       	movw	r22, r12
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 964:	e7 cf       	rjmp	.-50     	; 0x934 <vfprintf+0x24>
 966:	91 2c       	mov	r9, r1
 968:	21 2c       	mov	r2, r1
 96a:	31 2c       	mov	r3, r1
 96c:	ff e1       	ldi	r31, 0x1F	; 31
 96e:	f3 15       	cp	r31, r3
 970:	d8 f0       	brcs	.+54     	; 0x9a8 <vfprintf+0x98>
 972:	8b 32       	cpi	r24, 0x2B	; 43
 974:	79 f0       	breq	.+30     	; 0x994 <vfprintf+0x84>
 976:	38 f4       	brcc	.+14     	; 0x986 <vfprintf+0x76>
 978:	80 32       	cpi	r24, 0x20	; 32
 97a:	79 f0       	breq	.+30     	; 0x99a <vfprintf+0x8a>
 97c:	83 32       	cpi	r24, 0x23	; 35
 97e:	a1 f4       	brne	.+40     	; 0x9a8 <vfprintf+0x98>
 980:	23 2d       	mov	r18, r3
 982:	20 61       	ori	r18, 0x10	; 16
 984:	1d c0       	rjmp	.+58     	; 0x9c0 <vfprintf+0xb0>
 986:	8d 32       	cpi	r24, 0x2D	; 45
 988:	61 f0       	breq	.+24     	; 0x9a2 <vfprintf+0x92>
 98a:	80 33       	cpi	r24, 0x30	; 48
 98c:	69 f4       	brne	.+26     	; 0x9a8 <vfprintf+0x98>
 98e:	23 2d       	mov	r18, r3
 990:	21 60       	ori	r18, 0x01	; 1
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <vfprintf+0xb0>
 994:	83 2d       	mov	r24, r3
 996:	82 60       	ori	r24, 0x02	; 2
 998:	38 2e       	mov	r3, r24
 99a:	e3 2d       	mov	r30, r3
 99c:	e4 60       	ori	r30, 0x04	; 4
 99e:	3e 2e       	mov	r3, r30
 9a0:	2a c0       	rjmp	.+84     	; 0x9f6 <vfprintf+0xe6>
 9a2:	f3 2d       	mov	r31, r3
 9a4:	f8 60       	ori	r31, 0x08	; 8
 9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <vfprintf+0xd2>
 9a8:	37 fc       	sbrc	r3, 7
 9aa:	2d c0       	rjmp	.+90     	; 0xa06 <vfprintf+0xf6>
 9ac:	20 ed       	ldi	r18, 0xD0	; 208
 9ae:	28 0f       	add	r18, r24
 9b0:	2a 30       	cpi	r18, 0x0A	; 10
 9b2:	40 f0       	brcs	.+16     	; 0x9c4 <vfprintf+0xb4>
 9b4:	8e 32       	cpi	r24, 0x2E	; 46
 9b6:	b9 f4       	brne	.+46     	; 0x9e6 <vfprintf+0xd6>
 9b8:	36 fc       	sbrc	r3, 6
 9ba:	81 c1       	rjmp	.+770    	; 0xcbe <vfprintf+0x3ae>
 9bc:	23 2d       	mov	r18, r3
 9be:	20 64       	ori	r18, 0x40	; 64
 9c0:	32 2e       	mov	r3, r18
 9c2:	19 c0       	rjmp	.+50     	; 0x9f6 <vfprintf+0xe6>
 9c4:	36 fe       	sbrs	r3, 6
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <vfprintf+0xc4>
 9c8:	8a e0       	ldi	r24, 0x0A	; 10
 9ca:	98 9e       	mul	r9, r24
 9cc:	20 0d       	add	r18, r0
 9ce:	11 24       	eor	r1, r1
 9d0:	92 2e       	mov	r9, r18
 9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <vfprintf+0xe6>
 9d4:	ea e0       	ldi	r30, 0x0A	; 10
 9d6:	2e 9e       	mul	r2, r30
 9d8:	20 0d       	add	r18, r0
 9da:	11 24       	eor	r1, r1
 9dc:	22 2e       	mov	r2, r18
 9de:	f3 2d       	mov	r31, r3
 9e0:	f0 62       	ori	r31, 0x20	; 32
 9e2:	3f 2e       	mov	r3, r31
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <vfprintf+0xe6>
 9e6:	8c 36       	cpi	r24, 0x6C	; 108
 9e8:	21 f4       	brne	.+8      	; 0x9f2 <vfprintf+0xe2>
 9ea:	83 2d       	mov	r24, r3
 9ec:	80 68       	ori	r24, 0x80	; 128
 9ee:	38 2e       	mov	r3, r24
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0xe6>
 9f2:	88 36       	cpi	r24, 0x68	; 104
 9f4:	41 f4       	brne	.+16     	; 0xa06 <vfprintf+0xf6>
 9f6:	f7 01       	movw	r30, r14
 9f8:	93 fd       	sbrc	r25, 3
 9fa:	85 91       	lpm	r24, Z+
 9fc:	93 ff       	sbrs	r25, 3
 9fe:	81 91       	ld	r24, Z+
 a00:	7f 01       	movw	r14, r30
 a02:	81 11       	cpse	r24, r1
 a04:	b3 cf       	rjmp	.-154    	; 0x96c <vfprintf+0x5c>
 a06:	98 2f       	mov	r25, r24
 a08:	9f 7d       	andi	r25, 0xDF	; 223
 a0a:	95 54       	subi	r25, 0x45	; 69
 a0c:	93 30       	cpi	r25, 0x03	; 3
 a0e:	28 f4       	brcc	.+10     	; 0xa1a <vfprintf+0x10a>
 a10:	0c 5f       	subi	r16, 0xFC	; 252
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	9f e3       	ldi	r25, 0x3F	; 63
 a16:	99 83       	std	Y+1, r25	; 0x01
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <vfprintf+0x124>
 a1a:	83 36       	cpi	r24, 0x63	; 99
 a1c:	31 f0       	breq	.+12     	; 0xa2a <vfprintf+0x11a>
 a1e:	83 37       	cpi	r24, 0x73	; 115
 a20:	71 f0       	breq	.+28     	; 0xa3e <vfprintf+0x12e>
 a22:	83 35       	cpi	r24, 0x53	; 83
 a24:	09 f0       	breq	.+2      	; 0xa28 <vfprintf+0x118>
 a26:	59 c0       	rjmp	.+178    	; 0xada <vfprintf+0x1ca>
 a28:	21 c0       	rjmp	.+66     	; 0xa6c <vfprintf+0x15c>
 a2a:	f8 01       	movw	r30, r16
 a2c:	80 81       	ld	r24, Z
 a2e:	89 83       	std	Y+1, r24	; 0x01
 a30:	0e 5f       	subi	r16, 0xFE	; 254
 a32:	1f 4f       	sbci	r17, 0xFF	; 255
 a34:	88 24       	eor	r8, r8
 a36:	83 94       	inc	r8
 a38:	91 2c       	mov	r9, r1
 a3a:	53 01       	movw	r10, r6
 a3c:	13 c0       	rjmp	.+38     	; 0xa64 <vfprintf+0x154>
 a3e:	28 01       	movw	r4, r16
 a40:	f2 e0       	ldi	r31, 0x02	; 2
 a42:	4f 0e       	add	r4, r31
 a44:	51 1c       	adc	r5, r1
 a46:	f8 01       	movw	r30, r16
 a48:	a0 80       	ld	r10, Z
 a4a:	b1 80       	ldd	r11, Z+1	; 0x01
 a4c:	36 fe       	sbrs	r3, 6
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <vfprintf+0x146>
 a50:	69 2d       	mov	r22, r9
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <vfprintf+0x14a>
 a56:	6f ef       	ldi	r22, 0xFF	; 255
 a58:	7f ef       	ldi	r23, 0xFF	; 255
 a5a:	c5 01       	movw	r24, r10
 a5c:	0e 94 74 06 	call	0xce8	; 0xce8 <strnlen>
 a60:	4c 01       	movw	r8, r24
 a62:	82 01       	movw	r16, r4
 a64:	f3 2d       	mov	r31, r3
 a66:	ff 77       	andi	r31, 0x7F	; 127
 a68:	3f 2e       	mov	r3, r31
 a6a:	16 c0       	rjmp	.+44     	; 0xa98 <vfprintf+0x188>
 a6c:	28 01       	movw	r4, r16
 a6e:	22 e0       	ldi	r18, 0x02	; 2
 a70:	42 0e       	add	r4, r18
 a72:	51 1c       	adc	r5, r1
 a74:	f8 01       	movw	r30, r16
 a76:	a0 80       	ld	r10, Z
 a78:	b1 80       	ldd	r11, Z+1	; 0x01
 a7a:	36 fe       	sbrs	r3, 6
 a7c:	03 c0       	rjmp	.+6      	; 0xa84 <vfprintf+0x174>
 a7e:	69 2d       	mov	r22, r9
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <vfprintf+0x178>
 a84:	6f ef       	ldi	r22, 0xFF	; 255
 a86:	7f ef       	ldi	r23, 0xFF	; 255
 a88:	c5 01       	movw	r24, r10
 a8a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <strnlen_P>
 a8e:	4c 01       	movw	r8, r24
 a90:	f3 2d       	mov	r31, r3
 a92:	f0 68       	ori	r31, 0x80	; 128
 a94:	3f 2e       	mov	r3, r31
 a96:	82 01       	movw	r16, r4
 a98:	33 fc       	sbrc	r3, 3
 a9a:	1b c0       	rjmp	.+54     	; 0xad2 <vfprintf+0x1c2>
 a9c:	82 2d       	mov	r24, r2
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	88 16       	cp	r8, r24
 aa2:	99 06       	cpc	r9, r25
 aa4:	b0 f4       	brcc	.+44     	; 0xad2 <vfprintf+0x1c2>
 aa6:	b6 01       	movw	r22, r12
 aa8:	80 e2       	ldi	r24, 0x20	; 32
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 ab0:	2a 94       	dec	r2
 ab2:	f4 cf       	rjmp	.-24     	; 0xa9c <vfprintf+0x18c>
 ab4:	f5 01       	movw	r30, r10
 ab6:	37 fc       	sbrc	r3, 7
 ab8:	85 91       	lpm	r24, Z+
 aba:	37 fe       	sbrs	r3, 7
 abc:	81 91       	ld	r24, Z+
 abe:	5f 01       	movw	r10, r30
 ac0:	b6 01       	movw	r22, r12
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 ac8:	21 10       	cpse	r2, r1
 aca:	2a 94       	dec	r2
 acc:	21 e0       	ldi	r18, 0x01	; 1
 ace:	82 1a       	sub	r8, r18
 ad0:	91 08       	sbc	r9, r1
 ad2:	81 14       	cp	r8, r1
 ad4:	91 04       	cpc	r9, r1
 ad6:	71 f7       	brne	.-36     	; 0xab4 <vfprintf+0x1a4>
 ad8:	e8 c0       	rjmp	.+464    	; 0xcaa <vfprintf+0x39a>
 ada:	84 36       	cpi	r24, 0x64	; 100
 adc:	11 f0       	breq	.+4      	; 0xae2 <vfprintf+0x1d2>
 ade:	89 36       	cpi	r24, 0x69	; 105
 ae0:	41 f5       	brne	.+80     	; 0xb32 <vfprintf+0x222>
 ae2:	f8 01       	movw	r30, r16
 ae4:	37 fe       	sbrs	r3, 7
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <vfprintf+0x1e6>
 ae8:	60 81       	ld	r22, Z
 aea:	71 81       	ldd	r23, Z+1	; 0x01
 aec:	82 81       	ldd	r24, Z+2	; 0x02
 aee:	93 81       	ldd	r25, Z+3	; 0x03
 af0:	0c 5f       	subi	r16, 0xFC	; 252
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	08 c0       	rjmp	.+16     	; 0xb06 <vfprintf+0x1f6>
 af6:	60 81       	ld	r22, Z
 af8:	71 81       	ldd	r23, Z+1	; 0x01
 afa:	07 2e       	mov	r0, r23
 afc:	00 0c       	add	r0, r0
 afe:	88 0b       	sbc	r24, r24
 b00:	99 0b       	sbc	r25, r25
 b02:	0e 5f       	subi	r16, 0xFE	; 254
 b04:	1f 4f       	sbci	r17, 0xFF	; 255
 b06:	f3 2d       	mov	r31, r3
 b08:	ff 76       	andi	r31, 0x6F	; 111
 b0a:	3f 2e       	mov	r3, r31
 b0c:	97 ff       	sbrs	r25, 7
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <vfprintf+0x212>
 b10:	90 95       	com	r25
 b12:	80 95       	com	r24
 b14:	70 95       	com	r23
 b16:	61 95       	neg	r22
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	f0 68       	ori	r31, 0x80	; 128
 b20:	3f 2e       	mov	r3, r31
 b22:	2a e0       	ldi	r18, 0x0A	; 10
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	a3 01       	movw	r20, r6
 b28:	0e 94 bb 06 	call	0xd76	; 0xd76 <__ultoa_invert>
 b2c:	88 2e       	mov	r8, r24
 b2e:	86 18       	sub	r8, r6
 b30:	45 c0       	rjmp	.+138    	; 0xbbc <vfprintf+0x2ac>
 b32:	85 37       	cpi	r24, 0x75	; 117
 b34:	31 f4       	brne	.+12     	; 0xb42 <vfprintf+0x232>
 b36:	23 2d       	mov	r18, r3
 b38:	2f 7e       	andi	r18, 0xEF	; 239
 b3a:	b2 2e       	mov	r11, r18
 b3c:	2a e0       	ldi	r18, 0x0A	; 10
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	25 c0       	rjmp	.+74     	; 0xb8c <vfprintf+0x27c>
 b42:	93 2d       	mov	r25, r3
 b44:	99 7f       	andi	r25, 0xF9	; 249
 b46:	b9 2e       	mov	r11, r25
 b48:	8f 36       	cpi	r24, 0x6F	; 111
 b4a:	c1 f0       	breq	.+48     	; 0xb7c <vfprintf+0x26c>
 b4c:	18 f4       	brcc	.+6      	; 0xb54 <vfprintf+0x244>
 b4e:	88 35       	cpi	r24, 0x58	; 88
 b50:	79 f0       	breq	.+30     	; 0xb70 <vfprintf+0x260>
 b52:	b5 c0       	rjmp	.+362    	; 0xcbe <vfprintf+0x3ae>
 b54:	80 37       	cpi	r24, 0x70	; 112
 b56:	19 f0       	breq	.+6      	; 0xb5e <vfprintf+0x24e>
 b58:	88 37       	cpi	r24, 0x78	; 120
 b5a:	21 f0       	breq	.+8      	; 0xb64 <vfprintf+0x254>
 b5c:	b0 c0       	rjmp	.+352    	; 0xcbe <vfprintf+0x3ae>
 b5e:	e9 2f       	mov	r30, r25
 b60:	e0 61       	ori	r30, 0x10	; 16
 b62:	be 2e       	mov	r11, r30
 b64:	b4 fe       	sbrs	r11, 4
 b66:	0d c0       	rjmp	.+26     	; 0xb82 <vfprintf+0x272>
 b68:	fb 2d       	mov	r31, r11
 b6a:	f4 60       	ori	r31, 0x04	; 4
 b6c:	bf 2e       	mov	r11, r31
 b6e:	09 c0       	rjmp	.+18     	; 0xb82 <vfprintf+0x272>
 b70:	34 fe       	sbrs	r3, 4
 b72:	0a c0       	rjmp	.+20     	; 0xb88 <vfprintf+0x278>
 b74:	29 2f       	mov	r18, r25
 b76:	26 60       	ori	r18, 0x06	; 6
 b78:	b2 2e       	mov	r11, r18
 b7a:	06 c0       	rjmp	.+12     	; 0xb88 <vfprintf+0x278>
 b7c:	28 e0       	ldi	r18, 0x08	; 8
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	05 c0       	rjmp	.+10     	; 0xb8c <vfprintf+0x27c>
 b82:	20 e1       	ldi	r18, 0x10	; 16
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0x27c>
 b88:	20 e1       	ldi	r18, 0x10	; 16
 b8a:	32 e0       	ldi	r19, 0x02	; 2
 b8c:	f8 01       	movw	r30, r16
 b8e:	b7 fe       	sbrs	r11, 7
 b90:	07 c0       	rjmp	.+14     	; 0xba0 <vfprintf+0x290>
 b92:	60 81       	ld	r22, Z
 b94:	71 81       	ldd	r23, Z+1	; 0x01
 b96:	82 81       	ldd	r24, Z+2	; 0x02
 b98:	93 81       	ldd	r25, Z+3	; 0x03
 b9a:	0c 5f       	subi	r16, 0xFC	; 252
 b9c:	1f 4f       	sbci	r17, 0xFF	; 255
 b9e:	06 c0       	rjmp	.+12     	; 0xbac <vfprintf+0x29c>
 ba0:	60 81       	ld	r22, Z
 ba2:	71 81       	ldd	r23, Z+1	; 0x01
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	0e 5f       	subi	r16, 0xFE	; 254
 baa:	1f 4f       	sbci	r17, 0xFF	; 255
 bac:	a3 01       	movw	r20, r6
 bae:	0e 94 bb 06 	call	0xd76	; 0xd76 <__ultoa_invert>
 bb2:	88 2e       	mov	r8, r24
 bb4:	86 18       	sub	r8, r6
 bb6:	fb 2d       	mov	r31, r11
 bb8:	ff 77       	andi	r31, 0x7F	; 127
 bba:	3f 2e       	mov	r3, r31
 bbc:	36 fe       	sbrs	r3, 6
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x2ca>
 bc0:	23 2d       	mov	r18, r3
 bc2:	2e 7f       	andi	r18, 0xFE	; 254
 bc4:	a2 2e       	mov	r10, r18
 bc6:	89 14       	cp	r8, r9
 bc8:	58 f4       	brcc	.+22     	; 0xbe0 <vfprintf+0x2d0>
 bca:	34 fe       	sbrs	r3, 4
 bcc:	0b c0       	rjmp	.+22     	; 0xbe4 <vfprintf+0x2d4>
 bce:	32 fc       	sbrc	r3, 2
 bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <vfprintf+0x2d4>
 bd2:	83 2d       	mov	r24, r3
 bd4:	8e 7e       	andi	r24, 0xEE	; 238
 bd6:	a8 2e       	mov	r10, r24
 bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <vfprintf+0x2d4>
 bda:	b8 2c       	mov	r11, r8
 bdc:	a3 2c       	mov	r10, r3
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <vfprintf+0x2d6>
 be0:	b8 2c       	mov	r11, r8
 be2:	01 c0       	rjmp	.+2      	; 0xbe6 <vfprintf+0x2d6>
 be4:	b9 2c       	mov	r11, r9
 be6:	a4 fe       	sbrs	r10, 4
 be8:	0f c0       	rjmp	.+30     	; 0xc08 <vfprintf+0x2f8>
 bea:	fe 01       	movw	r30, r28
 bec:	e8 0d       	add	r30, r8
 bee:	f1 1d       	adc	r31, r1
 bf0:	80 81       	ld	r24, Z
 bf2:	80 33       	cpi	r24, 0x30	; 48
 bf4:	21 f4       	brne	.+8      	; 0xbfe <vfprintf+0x2ee>
 bf6:	9a 2d       	mov	r25, r10
 bf8:	99 7e       	andi	r25, 0xE9	; 233
 bfa:	a9 2e       	mov	r10, r25
 bfc:	09 c0       	rjmp	.+18     	; 0xc10 <vfprintf+0x300>
 bfe:	a2 fe       	sbrs	r10, 2
 c00:	06 c0       	rjmp	.+12     	; 0xc0e <vfprintf+0x2fe>
 c02:	b3 94       	inc	r11
 c04:	b3 94       	inc	r11
 c06:	04 c0       	rjmp	.+8      	; 0xc10 <vfprintf+0x300>
 c08:	8a 2d       	mov	r24, r10
 c0a:	86 78       	andi	r24, 0x86	; 134
 c0c:	09 f0       	breq	.+2      	; 0xc10 <vfprintf+0x300>
 c0e:	b3 94       	inc	r11
 c10:	a3 fc       	sbrc	r10, 3
 c12:	11 c0       	rjmp	.+34     	; 0xc36 <vfprintf+0x326>
 c14:	a0 fe       	sbrs	r10, 0
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x314>
 c18:	b2 14       	cp	r11, r2
 c1a:	88 f4       	brcc	.+34     	; 0xc3e <vfprintf+0x32e>
 c1c:	28 0c       	add	r2, r8
 c1e:	92 2c       	mov	r9, r2
 c20:	9b 18       	sub	r9, r11
 c22:	0e c0       	rjmp	.+28     	; 0xc40 <vfprintf+0x330>
 c24:	b2 14       	cp	r11, r2
 c26:	60 f4       	brcc	.+24     	; 0xc40 <vfprintf+0x330>
 c28:	b6 01       	movw	r22, r12
 c2a:	80 e2       	ldi	r24, 0x20	; 32
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 c32:	b3 94       	inc	r11
 c34:	f7 cf       	rjmp	.-18     	; 0xc24 <vfprintf+0x314>
 c36:	b2 14       	cp	r11, r2
 c38:	18 f4       	brcc	.+6      	; 0xc40 <vfprintf+0x330>
 c3a:	2b 18       	sub	r2, r11
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x332>
 c3e:	98 2c       	mov	r9, r8
 c40:	21 2c       	mov	r2, r1
 c42:	a4 fe       	sbrs	r10, 4
 c44:	10 c0       	rjmp	.+32     	; 0xc66 <vfprintf+0x356>
 c46:	b6 01       	movw	r22, r12
 c48:	80 e3       	ldi	r24, 0x30	; 48
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 c50:	a2 fe       	sbrs	r10, 2
 c52:	17 c0       	rjmp	.+46     	; 0xc82 <vfprintf+0x372>
 c54:	a1 fc       	sbrc	r10, 1
 c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x34e>
 c58:	88 e7       	ldi	r24, 0x78	; 120
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x352>
 c5e:	88 e5       	ldi	r24, 0x58	; 88
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	b6 01       	movw	r22, r12
 c64:	0c c0       	rjmp	.+24     	; 0xc7e <vfprintf+0x36e>
 c66:	8a 2d       	mov	r24, r10
 c68:	86 78       	andi	r24, 0x86	; 134
 c6a:	59 f0       	breq	.+22     	; 0xc82 <vfprintf+0x372>
 c6c:	a1 fe       	sbrs	r10, 1
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <vfprintf+0x364>
 c70:	8b e2       	ldi	r24, 0x2B	; 43
 c72:	01 c0       	rjmp	.+2      	; 0xc76 <vfprintf+0x366>
 c74:	80 e2       	ldi	r24, 0x20	; 32
 c76:	a7 fc       	sbrc	r10, 7
 c78:	8d e2       	ldi	r24, 0x2D	; 45
 c7a:	b6 01       	movw	r22, r12
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 c82:	89 14       	cp	r8, r9
 c84:	38 f4       	brcc	.+14     	; 0xc94 <vfprintf+0x384>
 c86:	b6 01       	movw	r22, r12
 c88:	80 e3       	ldi	r24, 0x30	; 48
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 c90:	9a 94       	dec	r9
 c92:	f7 cf       	rjmp	.-18     	; 0xc82 <vfprintf+0x372>
 c94:	8a 94       	dec	r8
 c96:	f3 01       	movw	r30, r6
 c98:	e8 0d       	add	r30, r8
 c9a:	f1 1d       	adc	r31, r1
 c9c:	80 81       	ld	r24, Z
 c9e:	b6 01       	movw	r22, r12
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 ca6:	81 10       	cpse	r8, r1
 ca8:	f5 cf       	rjmp	.-22     	; 0xc94 <vfprintf+0x384>
 caa:	22 20       	and	r2, r2
 cac:	09 f4       	brne	.+2      	; 0xcb0 <vfprintf+0x3a0>
 cae:	42 ce       	rjmp	.-892    	; 0x934 <vfprintf+0x24>
 cb0:	b6 01       	movw	r22, r12
 cb2:	80 e2       	ldi	r24, 0x20	; 32
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <fputc>
 cba:	2a 94       	dec	r2
 cbc:	f6 cf       	rjmp	.-20     	; 0xcaa <vfprintf+0x39a>
 cbe:	f6 01       	movw	r30, r12
 cc0:	86 81       	ldd	r24, Z+6	; 0x06
 cc2:	97 81       	ldd	r25, Z+7	; 0x07
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x3ba>
 cc6:	8f ef       	ldi	r24, 0xFF	; 255
 cc8:	9f ef       	ldi	r25, 0xFF	; 255
 cca:	2b 96       	adiw	r28, 0x0b	; 11
 ccc:	e2 e1       	ldi	r30, 0x12	; 18
 cce:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__epilogue_restores__>

00000cd2 <strnlen_P>:
 cd2:	fc 01       	movw	r30, r24
 cd4:	05 90       	lpm	r0, Z+
 cd6:	61 50       	subi	r22, 0x01	; 1
 cd8:	70 40       	sbci	r23, 0x00	; 0
 cda:	01 10       	cpse	r0, r1
 cdc:	d8 f7       	brcc	.-10     	; 0xcd4 <strnlen_P+0x2>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	8e 0f       	add	r24, r30
 ce4:	9f 1f       	adc	r25, r31
 ce6:	08 95       	ret

00000ce8 <strnlen>:
 ce8:	fc 01       	movw	r30, r24
 cea:	61 50       	subi	r22, 0x01	; 1
 cec:	70 40       	sbci	r23, 0x00	; 0
 cee:	01 90       	ld	r0, Z+
 cf0:	01 10       	cpse	r0, r1
 cf2:	d8 f7       	brcc	.-10     	; 0xcea <strnlen+0x2>
 cf4:	80 95       	com	r24
 cf6:	90 95       	com	r25
 cf8:	8e 0f       	add	r24, r30
 cfa:	9f 1f       	adc	r25, r31
 cfc:	08 95       	ret

00000cfe <fputc>:
 cfe:	0f 93       	push	r16
 d00:	1f 93       	push	r17
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	fb 01       	movw	r30, r22
 d08:	23 81       	ldd	r18, Z+3	; 0x03
 d0a:	21 fd       	sbrc	r18, 1
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <fputc+0x16>
 d0e:	8f ef       	ldi	r24, 0xFF	; 255
 d10:	9f ef       	ldi	r25, 0xFF	; 255
 d12:	2c c0       	rjmp	.+88     	; 0xd6c <fputc+0x6e>
 d14:	22 ff       	sbrs	r18, 2
 d16:	16 c0       	rjmp	.+44     	; 0xd44 <fputc+0x46>
 d18:	46 81       	ldd	r20, Z+6	; 0x06
 d1a:	57 81       	ldd	r21, Z+7	; 0x07
 d1c:	24 81       	ldd	r18, Z+4	; 0x04
 d1e:	35 81       	ldd	r19, Z+5	; 0x05
 d20:	42 17       	cp	r20, r18
 d22:	53 07       	cpc	r21, r19
 d24:	44 f4       	brge	.+16     	; 0xd36 <fputc+0x38>
 d26:	a0 81       	ld	r26, Z
 d28:	b1 81       	ldd	r27, Z+1	; 0x01
 d2a:	9d 01       	movw	r18, r26
 d2c:	2f 5f       	subi	r18, 0xFF	; 255
 d2e:	3f 4f       	sbci	r19, 0xFF	; 255
 d30:	31 83       	std	Z+1, r19	; 0x01
 d32:	20 83       	st	Z, r18
 d34:	8c 93       	st	X, r24
 d36:	26 81       	ldd	r18, Z+6	; 0x06
 d38:	37 81       	ldd	r19, Z+7	; 0x07
 d3a:	2f 5f       	subi	r18, 0xFF	; 255
 d3c:	3f 4f       	sbci	r19, 0xFF	; 255
 d3e:	37 83       	std	Z+7, r19	; 0x07
 d40:	26 83       	std	Z+6, r18	; 0x06
 d42:	14 c0       	rjmp	.+40     	; 0xd6c <fputc+0x6e>
 d44:	8b 01       	movw	r16, r22
 d46:	ec 01       	movw	r28, r24
 d48:	fb 01       	movw	r30, r22
 d4a:	00 84       	ldd	r0, Z+8	; 0x08
 d4c:	f1 85       	ldd	r31, Z+9	; 0x09
 d4e:	e0 2d       	mov	r30, r0
 d50:	09 95       	icall
 d52:	89 2b       	or	r24, r25
 d54:	e1 f6       	brne	.-72     	; 0xd0e <fputc+0x10>
 d56:	d8 01       	movw	r26, r16
 d58:	16 96       	adiw	r26, 0x06	; 6
 d5a:	8d 91       	ld	r24, X+
 d5c:	9c 91       	ld	r25, X
 d5e:	17 97       	sbiw	r26, 0x07	; 7
 d60:	01 96       	adiw	r24, 0x01	; 1
 d62:	17 96       	adiw	r26, 0x07	; 7
 d64:	9c 93       	st	X, r25
 d66:	8e 93       	st	-X, r24
 d68:	16 97       	sbiw	r26, 0x06	; 6
 d6a:	ce 01       	movw	r24, r28
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	1f 91       	pop	r17
 d72:	0f 91       	pop	r16
 d74:	08 95       	ret

00000d76 <__ultoa_invert>:
 d76:	fa 01       	movw	r30, r20
 d78:	aa 27       	eor	r26, r26
 d7a:	28 30       	cpi	r18, 0x08	; 8
 d7c:	51 f1       	breq	.+84     	; 0xdd2 <__ultoa_invert+0x5c>
 d7e:	20 31       	cpi	r18, 0x10	; 16
 d80:	81 f1       	breq	.+96     	; 0xde2 <__ultoa_invert+0x6c>
 d82:	e8 94       	clt
 d84:	6f 93       	push	r22
 d86:	6e 7f       	andi	r22, 0xFE	; 254
 d88:	6e 5f       	subi	r22, 0xFE	; 254
 d8a:	7f 4f       	sbci	r23, 0xFF	; 255
 d8c:	8f 4f       	sbci	r24, 0xFF	; 255
 d8e:	9f 4f       	sbci	r25, 0xFF	; 255
 d90:	af 4f       	sbci	r26, 0xFF	; 255
 d92:	b1 e0       	ldi	r27, 0x01	; 1
 d94:	3e d0       	rcall	.+124    	; 0xe12 <__ultoa_invert+0x9c>
 d96:	b4 e0       	ldi	r27, 0x04	; 4
 d98:	3c d0       	rcall	.+120    	; 0xe12 <__ultoa_invert+0x9c>
 d9a:	67 0f       	add	r22, r23
 d9c:	78 1f       	adc	r23, r24
 d9e:	89 1f       	adc	r24, r25
 da0:	9a 1f       	adc	r25, r26
 da2:	a1 1d       	adc	r26, r1
 da4:	68 0f       	add	r22, r24
 da6:	79 1f       	adc	r23, r25
 da8:	8a 1f       	adc	r24, r26
 daa:	91 1d       	adc	r25, r1
 dac:	a1 1d       	adc	r26, r1
 dae:	6a 0f       	add	r22, r26
 db0:	71 1d       	adc	r23, r1
 db2:	81 1d       	adc	r24, r1
 db4:	91 1d       	adc	r25, r1
 db6:	a1 1d       	adc	r26, r1
 db8:	20 d0       	rcall	.+64     	; 0xdfa <__ultoa_invert+0x84>
 dba:	09 f4       	brne	.+2      	; 0xdbe <__ultoa_invert+0x48>
 dbc:	68 94       	set
 dbe:	3f 91       	pop	r19
 dc0:	2a e0       	ldi	r18, 0x0A	; 10
 dc2:	26 9f       	mul	r18, r22
 dc4:	11 24       	eor	r1, r1
 dc6:	30 19       	sub	r19, r0
 dc8:	30 5d       	subi	r19, 0xD0	; 208
 dca:	31 93       	st	Z+, r19
 dcc:	de f6       	brtc	.-74     	; 0xd84 <__ultoa_invert+0xe>
 dce:	cf 01       	movw	r24, r30
 dd0:	08 95       	ret
 dd2:	46 2f       	mov	r20, r22
 dd4:	47 70       	andi	r20, 0x07	; 7
 dd6:	40 5d       	subi	r20, 0xD0	; 208
 dd8:	41 93       	st	Z+, r20
 dda:	b3 e0       	ldi	r27, 0x03	; 3
 ddc:	0f d0       	rcall	.+30     	; 0xdfc <__ultoa_invert+0x86>
 dde:	c9 f7       	brne	.-14     	; 0xdd2 <__ultoa_invert+0x5c>
 de0:	f6 cf       	rjmp	.-20     	; 0xdce <__ultoa_invert+0x58>
 de2:	46 2f       	mov	r20, r22
 de4:	4f 70       	andi	r20, 0x0F	; 15
 de6:	40 5d       	subi	r20, 0xD0	; 208
 de8:	4a 33       	cpi	r20, 0x3A	; 58
 dea:	18 f0       	brcs	.+6      	; 0xdf2 <__ultoa_invert+0x7c>
 dec:	49 5d       	subi	r20, 0xD9	; 217
 dee:	31 fd       	sbrc	r19, 1
 df0:	40 52       	subi	r20, 0x20	; 32
 df2:	41 93       	st	Z+, r20
 df4:	02 d0       	rcall	.+4      	; 0xdfa <__ultoa_invert+0x84>
 df6:	a9 f7       	brne	.-22     	; 0xde2 <__ultoa_invert+0x6c>
 df8:	ea cf       	rjmp	.-44     	; 0xdce <__ultoa_invert+0x58>
 dfa:	b4 e0       	ldi	r27, 0x04	; 4
 dfc:	a6 95       	lsr	r26
 dfe:	97 95       	ror	r25
 e00:	87 95       	ror	r24
 e02:	77 95       	ror	r23
 e04:	67 95       	ror	r22
 e06:	ba 95       	dec	r27
 e08:	c9 f7       	brne	.-14     	; 0xdfc <__ultoa_invert+0x86>
 e0a:	00 97       	sbiw	r24, 0x00	; 0
 e0c:	61 05       	cpc	r22, r1
 e0e:	71 05       	cpc	r23, r1
 e10:	08 95       	ret
 e12:	9b 01       	movw	r18, r22
 e14:	ac 01       	movw	r20, r24
 e16:	0a 2e       	mov	r0, r26
 e18:	06 94       	lsr	r0
 e1a:	57 95       	ror	r21
 e1c:	47 95       	ror	r20
 e1e:	37 95       	ror	r19
 e20:	27 95       	ror	r18
 e22:	ba 95       	dec	r27
 e24:	c9 f7       	brne	.-14     	; 0xe18 <__ultoa_invert+0xa2>
 e26:	62 0f       	add	r22, r18
 e28:	73 1f       	adc	r23, r19
 e2a:	84 1f       	adc	r24, r20
 e2c:	95 1f       	adc	r25, r21
 e2e:	a0 1d       	adc	r26, r0
 e30:	08 95       	ret

00000e32 <__prologue_saves__>:
 e32:	2f 92       	push	r2
 e34:	3f 92       	push	r3
 e36:	4f 92       	push	r4
 e38:	5f 92       	push	r5
 e3a:	6f 92       	push	r6
 e3c:	7f 92       	push	r7
 e3e:	8f 92       	push	r8
 e40:	9f 92       	push	r9
 e42:	af 92       	push	r10
 e44:	bf 92       	push	r11
 e46:	cf 92       	push	r12
 e48:	df 92       	push	r13
 e4a:	ef 92       	push	r14
 e4c:	ff 92       	push	r15
 e4e:	0f 93       	push	r16
 e50:	1f 93       	push	r17
 e52:	cf 93       	push	r28
 e54:	df 93       	push	r29
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	ca 1b       	sub	r28, r26
 e5c:	db 0b       	sbc	r29, r27
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	de bf       	out	0x3e, r29	; 62
 e64:	0f be       	out	0x3f, r0	; 63
 e66:	cd bf       	out	0x3d, r28	; 61
 e68:	09 94       	ijmp

00000e6a <__epilogue_restores__>:
 e6a:	2a 88       	ldd	r2, Y+18	; 0x12
 e6c:	39 88       	ldd	r3, Y+17	; 0x11
 e6e:	48 88       	ldd	r4, Y+16	; 0x10
 e70:	5f 84       	ldd	r5, Y+15	; 0x0f
 e72:	6e 84       	ldd	r6, Y+14	; 0x0e
 e74:	7d 84       	ldd	r7, Y+13	; 0x0d
 e76:	8c 84       	ldd	r8, Y+12	; 0x0c
 e78:	9b 84       	ldd	r9, Y+11	; 0x0b
 e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e7c:	b9 84       	ldd	r11, Y+9	; 0x09
 e7e:	c8 84       	ldd	r12, Y+8	; 0x08
 e80:	df 80       	ldd	r13, Y+7	; 0x07
 e82:	ee 80       	ldd	r14, Y+6	; 0x06
 e84:	fd 80       	ldd	r15, Y+5	; 0x05
 e86:	0c 81       	ldd	r16, Y+4	; 0x04
 e88:	1b 81       	ldd	r17, Y+3	; 0x03
 e8a:	aa 81       	ldd	r26, Y+2	; 0x02
 e8c:	b9 81       	ldd	r27, Y+1	; 0x01
 e8e:	ce 0f       	add	r28, r30
 e90:	d1 1d       	adc	r29, r1
 e92:	0f b6       	in	r0, 0x3f	; 63
 e94:	f8 94       	cli
 e96:	de bf       	out	0x3e, r29	; 62
 e98:	0f be       	out	0x3f, r0	; 63
 e9a:	cd bf       	out	0x3d, r28	; 61
 e9c:	ed 01       	movw	r28, r26
 e9e:	08 95       	ret

00000ea0 <_exit>:
 ea0:	f8 94       	cli

00000ea2 <__stop_program>:
 ea2:	ff cf       	rjmp	.-2      	; 0xea2 <__stop_program>
