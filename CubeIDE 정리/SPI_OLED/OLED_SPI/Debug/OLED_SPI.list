
OLED_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002040c  2**0
                  CONTENTS
 10 .bss          00000a5c  2000040c  2000040c  0002040c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e68  20000e68  0002040c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037de9  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003507  00000000  00000000  00058225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033a8  00000000  00000000  0005b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003228  00000000  00000000  0005ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024987  00000000  00000000  00061d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c58d  00000000  00000000  00086687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2dc2  00000000  00000000  000a2c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001859d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e3d4  00000000  00000000  00185a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000040c 	.word	0x2000040c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004248 	.word	0x08004248

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000410 	.word	0x20000410
 80001e8:	08004248 	.word	0x08004248

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fcbf 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f83f 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f935 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000502:	f000 f8db 	bl	80006bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000506:	f000 f903 	bl	8000710 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 800050a:	f000 f8a1 	bl	8000650 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0x78>)
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <main+0x7c>)
 8000512:	4917      	ldr	r1, [pc, #92]	; (8000570 <main+0x80>)
 8000514:	4817      	ldr	r0, [pc, #92]	; (8000574 <main+0x84>)
 8000516:	f002 ff95 	bl	8003444 <u8g2_Setup_ssd1306_128x64_noname_f>

  u8g2_InitDisplay(&u8g2);
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <main+0x84>)
 800051c:	f003 fdca 	bl	80040b4 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8000520:	2100      	movs	r1, #0
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <main+0x84>)
 8000524:	f003 fdd5 	bl	80040d2 <u8x8_SetPowerSave>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  u8g2_FirstPage(&u8g2);
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <main+0x84>)
 800052a:	f002 ff38 	bl	800339e <u8g2_FirstPage>
	  		do
	  		{
	  			u8g2_ClearBuffer(&u8g2);
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <main+0x84>)
 8000530:	f002 feaa 	bl	8003288 <u8g2_ClearBuffer>
	  			u8g2_SetDrawColor(&u8g2,1);
 8000534:	2101      	movs	r1, #1
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <main+0x84>)
 8000538:	f003 f8c2 	bl	80036c0 <u8g2_SetDrawColor>
	  			u8g2_SetBitmapMode(&u8g2,1);
 800053c:	2101      	movs	r1, #1
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <main+0x84>)
 8000540:	f002 fde4 	bl	800310c <u8g2_SetBitmapMode>
	  			u8g2_DrawBitmap(&u8g2, 0, 0, 16, bitmap_height,bitmap);
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <main+0x88>)
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2310      	movs	r3, #16
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x84>)
 8000554:	f002 fe58 	bl	8003208 <u8g2_DrawBitmap>

	  		} while (u8g2_NextPage(&u8g2));
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x84>)
 800055a:	f002 ff34 	bl	80033c6 <u8g2_NextPage>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1e4      	bne.n	800052e <main+0x3e>
	  u8g2_FirstPage(&u8g2);
 8000564:	e7e0      	b.n	8000528 <main+0x38>
 8000566:	bf00      	nop
 8000568:	08000cb9 	.word	0x08000cb9
 800056c:	08000db5 	.word	0x08000db5
 8000570:	08004278 	.word	0x08004278
 8000574:	200009d0 	.word	0x200009d0
 8000578:	20000000 	.word	0x20000000

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fe54 	bl	8004238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	; 0xa8
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f897 	bl	8001734 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f9b6 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f001 faf8 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 f99f 	bl	800097c <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_SPI2_Init+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI2_Init+0x64>)
 800065c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_SPI2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI2_Init+0x64>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000684:	2210      	movs	r2, #16
 8000686:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_SPI2_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI2_Init+0x64>)
 800069c:	220a      	movs	r2, #10
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_SPI2_Init+0x64>)
 80006a2:	f001 fcdf 	bl	8002064 <HAL_SPI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f966 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000428 	.word	0x20000428
 80006b8:	40003800 	.word	0x40003800

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART3_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f001 ff46 	bl	8002584 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f93d 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000480 	.word	0x20000480
 800070c:	40004800 	.word	0x40004800

08000710 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800071a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2204      	movs	r2, #4
 8000720:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2202      	movs	r2, #2
 8000726:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2202      	movs	r2, #2
 8000732:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2201      	movs	r2, #1
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	f000 fed1 	bl	80014fa <HAL_PCD_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f90d 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200004c4 	.word	0x200004c4

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b78      	ldr	r3, [pc, #480]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a77      	ldr	r2, [pc, #476]	; (8000968 <MX_GPIO_Init+0x1fc>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b75      	ldr	r3, [pc, #468]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b71      	ldr	r3, [pc, #452]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a70      	ldr	r2, [pc, #448]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b6e      	ldr	r3, [pc, #440]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b6a      	ldr	r3, [pc, #424]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a69      	ldr	r2, [pc, #420]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b67      	ldr	r3, [pc, #412]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b63      	ldr	r3, [pc, #396]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a62      	ldr	r2, [pc, #392]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b60      	ldr	r3, [pc, #384]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b5c      	ldr	r3, [pc, #368]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a5b      	ldr	r2, [pc, #364]	; (8000968 <MX_GPIO_Init+0x1fc>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b59      	ldr	r3, [pc, #356]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b55      	ldr	r3, [pc, #340]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a54      	ldr	r2, [pc, #336]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <MX_GPIO_Init+0x1fc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000830:	484e      	ldr	r0, [pc, #312]	; (800096c <MX_GPIO_Init+0x200>)
 8000832:	f000 fe49 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800083c:	484b      	ldr	r0, [pc, #300]	; (800096c <MX_GPIO_Init+0x200>)
 800083e:	f000 fe43 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	484a      	ldr	r0, [pc, #296]	; (8000970 <MX_GPIO_Init+0x204>)
 8000848:	f000 fe3e 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4848      	ldr	r0, [pc, #288]	; (8000974 <MX_GPIO_Init+0x208>)
 8000852:	f000 fe39 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4841      	ldr	r0, [pc, #260]	; (8000974 <MX_GPIO_Init+0x208>)
 800086e:	f000 fc7f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000872:	2332      	movs	r3, #50	; 0x32
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000882:	230b      	movs	r3, #11
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4839      	ldr	r0, [pc, #228]	; (8000974 <MX_GPIO_Init+0x208>)
 800088e:	f000 fc6f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000892:	2386      	movs	r3, #134	; 0x86
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a2:	230b      	movs	r3, #11
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4832      	ldr	r0, [pc, #200]	; (8000978 <MX_GPIO_Init+0x20c>)
 80008ae:	f000 fc5f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <MX_GPIO_Init+0x200>)
 80008cc:	f000 fc50 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_CS_Pin;
 80008d0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008da:	2301      	movs	r3, #1
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4820      	ldr	r0, [pc, #128]	; (800096c <MX_GPIO_Init+0x200>)
 80008ea:	f000 fc41 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <MX_GPIO_Init+0x204>)
 8000906:	f000 fc33 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0x204>)
 800091e:	f000 fc27 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000922:	2340      	movs	r3, #64	; 0x40
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_GPIO_Init+0x208>)
 800093a:	f000 fc19 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800093e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0x204>)
 800095c:	f000 fc08 	bl	8001170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400
 8000970:	40021800 	.word	0x40021800
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <HAL_SPI_MspInit+0xc0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d14a      	bne.n	8000a90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <HAL_SPI_MspInit+0xc8>)
 8000a6a:	f000 fb81 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a80:	2305      	movs	r3, #5
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_SPI_MspInit+0xcc>)
 8000a8c:	f000 fb70 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40003800 	.word	0x40003800
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_UART_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12c      	bne.n	8000b24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b14:	2307      	movs	r3, #7
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000b20:	f000 fb26 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020c00 	.word	0x40020c00

08000b38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b58:	d13f      	bne.n	8000bda <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <HAL_PCD_MspInit+0xb0>)
 8000b94:	f000 faec 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <HAL_PCD_MspInit+0xb0>)
 8000bae:	f000 fadf 	bl	8001170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_PCD_MspInit+0xac>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f970 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f003 faad 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc2b 	bl	80004f0 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8000ca8:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 8000cac:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8000cb0:	20000e68 	.word	0x20000e68

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi2;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	72fb      	strb	r3, [r7, #11]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000cca:	7afb      	ldrb	r3, [r7, #11]
 8000ccc:	3b28      	subs	r3, #40	; 0x28
 8000cce:	2b23      	cmp	r3, #35	; 0x23
 8000cd0:	d866      	bhi.n	8000da0 <u8x8_stm32_gpio_and_delay+0xe8>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <u8x8_stm32_gpio_and_delay+0x20>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000da1 	.word	0x08000da1
 8000cdc:	08000d69 	.word	0x08000d69
 8000ce0:	08000da1 	.word	0x08000da1
 8000ce4:	08000da1 	.word	0x08000da1
 8000ce8:	08000da1 	.word	0x08000da1
 8000cec:	08000da1 	.word	0x08000da1
 8000cf0:	08000da1 	.word	0x08000da1
 8000cf4:	08000da1 	.word	0x08000da1
 8000cf8:	08000da1 	.word	0x08000da1
 8000cfc:	08000da1 	.word	0x08000da1
 8000d00:	08000da1 	.word	0x08000da1
 8000d04:	08000da1 	.word	0x08000da1
 8000d08:	08000da1 	.word	0x08000da1
 8000d0c:	08000da1 	.word	0x08000da1
 8000d10:	08000da1 	.word	0x08000da1
 8000d14:	08000da1 	.word	0x08000da1
 8000d18:	08000da1 	.word	0x08000da1
 8000d1c:	08000da1 	.word	0x08000da1
 8000d20:	08000da1 	.word	0x08000da1
 8000d24:	08000da1 	.word	0x08000da1
 8000d28:	08000da1 	.word	0x08000da1
 8000d2c:	08000da1 	.word	0x08000da1
 8000d30:	08000da1 	.word	0x08000da1
 8000d34:	08000da1 	.word	0x08000da1
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000da1 	.word	0x08000da1
 8000d40:	08000da1 	.word	0x08000da1
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000da1 	.word	0x08000da1
 8000d4c:	08000da1 	.word	0x08000da1
 8000d50:	08000da1 	.word	0x08000da1
 8000d54:	08000da1 	.word	0x08000da1
 8000d58:	08000da1 	.word	0x08000da1
 8000d5c:	08000d73 	.word	0x08000d73
 8000d60:	08000d83 	.word	0x08000d83
 8000d64:	08000d93 	.word	0x08000d93
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000d68:	7abb      	ldrb	r3, [r7, #10]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f8f6 	bl	8000f5c <HAL_Delay>
		break;
 8000d70:	e016      	b.n	8000da0 <u8x8_stm32_gpio_and_delay+0xe8>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000d72:	7abb      	ldrb	r3, [r7, #10]
 8000d74:	461a      	mov	r2, r3
 8000d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <u8x8_stm32_gpio_and_delay+0xf4>)
 8000d7c:	f000 fba4 	bl	80014c8 <HAL_GPIO_WritePin>
		break;
 8000d80:	e00e      	b.n	8000da0 <u8x8_stm32_gpio_and_delay+0xe8>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000d82:	7abb      	ldrb	r3, [r7, #10]
 8000d84:	461a      	mov	r2, r3
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <u8x8_stm32_gpio_and_delay+0xf4>)
 8000d8c:	f000 fb9c 	bl	80014c8 <HAL_GPIO_WritePin>
		break;
 8000d90:	e006      	b.n	8000da0 <u8x8_stm32_gpio_and_delay+0xe8>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	461a      	mov	r2, r3
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <u8x8_stm32_gpio_and_delay+0xf8>)
 8000d9a:	f000 fb95 	bl	80014c8 <HAL_GPIO_WritePin>
		break;
 8000d9e:	bf00      	nop
	}
	return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020800 	.word	0x40020800

08000db4 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	72fb      	strb	r3, [r7, #11]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	3b14      	subs	r3, #20
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	d847      	bhi.n	8000e5e <u8x8_byte_stm32_hw_spi+0xaa>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <u8x8_byte_stm32_hw_spi+0x20>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000e63 	.word	0x08000e63
 8000dd8:	08000e5f 	.word	0x08000e5f
 8000ddc:	08000e5f 	.word	0x08000e5f
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	08000e2f 	.word	0x08000e2f
 8000de8:	08000e47 	.word	0x08000e47
 8000dec:	08000e5f 	.word	0x08000e5f
 8000df0:	08000e5f 	.word	0x08000e5f
 8000df4:	08000e5f 	.word	0x08000e5f
 8000df8:	08000e5f 	.word	0x08000e5f
 8000dfc:	08000e5f 	.word	0x08000e5f
 8000e00:	08000e5f 	.word	0x08000e5f
 8000e04:	08000e21 	.word	0x08000e21
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000e08:	7abb      	ldrb	r3, [r7, #10]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4818      	ldr	r0, [pc, #96]	; (8000e74 <u8x8_byte_stm32_hw_spi+0xc0>)
 8000e12:	f001 f9b0 	bl	8002176 <HAL_SPI_Transmit>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d024      	beq.n	8000e66 <u8x8_byte_stm32_hw_spi+0xb2>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e024      	b.n	8000e6a <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000e20:	7abb      	ldrb	r3, [r7, #10]
 8000e22:	461a      	mov	r2, r3
 8000e24:	214a      	movs	r1, #74	; 0x4a
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f003 f973 	bl	8004112 <u8x8_gpio_call>
		break;
 8000e2c:	e01c      	b.n	8000e68 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	2149      	movs	r1, #73	; 0x49
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f003 f96a 	bl	8004112 <u8x8_gpio_call>
		HAL_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 f88c 	bl	8000f5c <HAL_Delay>
		break;
 8000e44:	e010      	b.n	8000e68 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 f888 	bl	8000f5c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	461a      	mov	r2, r3
 8000e54:	2149      	movs	r1, #73	; 0x49
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f003 f95b 	bl	8004112 <u8x8_gpio_call>
		break;
 8000e5c:	e004      	b.n	8000e68 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e003      	b.n	8000e6a <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8000e66:	bf00      	nop
	}
	return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000428 	.word	0x20000428

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f931 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fd6c 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f93b 	bl	8001156 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f911 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000400 	.word	0x20000400
 8000f14:	20000408 	.word	0x20000408
 8000f18:	20000404 	.word	0x20000404

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000408 	.word	0x20000408
 8000f40:	20000a64 	.word	0x20000a64

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000a64 	.word	0x20000a64

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000408 	.word	0x20000408

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff47 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5c 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e177      	b.n	800147c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8166 	bne.w	8001476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80c0 	beq.w	8001476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_GPIO_Init+0x324>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_GPIO_Init+0x324>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_GPIO_Init+0x324>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a61      	ldr	r2, [pc, #388]	; (8001498 <HAL_GPIO_Init+0x328>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_GPIO_Init+0x32c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d037      	beq.n	80013ae <HAL_GPIO_Init+0x23e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_GPIO_Init+0x330>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d031      	beq.n	80013aa <HAL_GPIO_Init+0x23a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x334>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d02b      	beq.n	80013a6 <HAL_GPIO_Init+0x236>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d025      	beq.n	80013a2 <HAL_GPIO_Init+0x232>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01f      	beq.n	800139e <HAL_GPIO_Init+0x22e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d019      	beq.n	800139a <HAL_GPIO_Init+0x22a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0x226>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_Init+0x222>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a50      	ldr	r2, [pc, #320]	; (80014bc <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <HAL_GPIO_Init+0x21e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	; (80014c0 <HAL_GPIO_Init+0x350>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_GPIO_Init+0x21a>
 8001386:	2309      	movs	r3, #9
 8001388:	e012      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 800138a:	230a      	movs	r3, #10
 800138c:	e010      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 800138e:	2308      	movs	r3, #8
 8001390:	e00e      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 8001392:	2307      	movs	r3, #7
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 8001396:	2306      	movs	r3, #6
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x240>
 80013ae:	2300      	movs	r3, #0
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c0:	4935      	ldr	r1, [pc, #212]	; (8001498 <HAL_GPIO_Init+0x328>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_GPIO_Init+0x354>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a34      	ldr	r2, [pc, #208]	; (80014c4 <HAL_GPIO_Init+0x354>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_GPIO_Init+0x354>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_GPIO_Init+0x354>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_GPIO_Init+0x354>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001446:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x354>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x354>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_GPIO_Init+0x354>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	f67f ae84 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40022000 	.word	0x40022000
 80014c0:	40022400 	.word	0x40022400
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fc:	b08f      	sub	sp, #60	; 0x3c
 80014fe:	af0a      	add	r7, sp, #40	; 0x28
 8001500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e10f      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fb06 	bl	8000b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fb3d 	bl	8002bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	687e      	ldr	r6, [r7, #4]
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800156a:	e885 0003 	stmia.w	r5, {r0, r1}
 800156e:	1d33      	adds	r3, r6, #4
 8001570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f001 fac8 	bl	8002b08 <USB_CoreInit>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0d0      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fb2b 	bl	8002bec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e04a      	b.n	8001632 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	333d      	adds	r3, #61	; 0x3d
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	333c      	adds	r3, #60	; 0x3c
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b298      	uxth	r0, r3
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3344      	adds	r3, #68	; 0x44
 80015d8:	4602      	mov	r2, r0
 80015da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3340      	adds	r3, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3348      	adds	r3, #72	; 0x48
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	334c      	adds	r3, #76	; 0x4c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3354      	adds	r3, #84	; 0x54
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3af      	bcc.n	800159c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e044      	b.n	80016cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3b5      	bcc.n	8001642 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	687e      	ldr	r6, [r7, #4]
 80016de:	466d      	mov	r5, sp
 80016e0:	f106 0410 	add.w	r4, r6, #16
 80016e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f4:	1d33      	adds	r3, r6, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f001 fac3 	bl	8002c84 <USB_DevInit>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00d      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fc8e 	bl	8003046 <USB_DevDisconnect>

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e267      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d075      	beq.n	800183e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d00c      	beq.n	8001778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001766:	2b08      	cmp	r3, #8
 8001768:	d112      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d157      	bne.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e242      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x74>
 800179a:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a75      	ldr	r2, [pc, #468]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b70      	ldr	r3, [pc, #448]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6c      	ldr	r2, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017cc:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a68      	ldr	r2, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fbaa 	bl	8000f44 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fba6 	bl	8000f44 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e207      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb96 	bl	8000f44 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb92 	bl	8000f44 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1f3      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1c7      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x244>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb4b 	bl	8000f44 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb47 	bl	8000f44 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1a8      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x244>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb2a 	bl	8000f44 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb26 	bl	8000f44 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e187      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d036      	beq.n	800198c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x248>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fb0a 	bl	8000f44 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fb06 	bl	8000f44 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e167      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x200>
 8001952:	e01b      	b.n	800198c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_OscConfig+0x248>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff faf3 	bl	8000f44 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	e00e      	b.n	8001980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff faef 	bl	8000f44 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d907      	bls.n	8001980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e150      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
 8001974:	40023800 	.word	0x40023800
 8001978:	42470000 	.word	0x42470000
 800197c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ea      	bne.n	8001962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8097 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a7c      	ldr	r2, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d6:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a73      	ldr	r2, [pc, #460]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7ff faaf 	bl	8000f44 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff faab 	bl	8000f44 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e10c      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2ea>
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x324>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x30c>
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0x324>
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d015      	beq.n	8001a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fa70 	bl	8000f44 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fa6c 	bl	8000f44 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0cb      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0ee      	beq.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa5a 	bl	8000f44 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa56 	bl	8000f44 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0b5      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a1 	beq.w	8001c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d05c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d141      	bne.n	8001b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa2a 	bl	8000f44 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa26 	bl	8000f44 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e087      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff f9ff 	bl	8000f44 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff f9fb 	bl	8000f44 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e05c      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x416>
 8001b68:	e054      	b.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f9e8 	bl	8000f44 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f9e4 	bl	8000f44 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e045      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
 8001b96:	e03d      	b.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e038      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d028      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d121      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d111      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0cc      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d90c      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e067      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f916 	bl	8000f44 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f912 	bl	8000f44 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20c      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f876 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08004260 	.word	0x08004260
 8001de8:	20000400 	.word	0x20000400
 8001dec:	20000404 	.word	0x20000404

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b094      	sub	sp, #80	; 0x50
 8001df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d00d      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x40>
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f200 80e1 	bhi.w	8001fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e22:	e0db      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e28:	e0db      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2e:	e0d8      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e62:	4622      	mov	r2, r4
 8001e64:	462b      	mov	r3, r5
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	1a51      	subs	r1, r2, r1
 8001e7e:	6139      	str	r1, [r7, #16]
 8001e80:	4629      	mov	r1, r5
 8001e82:	eb63 0301 	sbc.w	r3, r3, r1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e94:	4659      	mov	r1, fp
 8001e96:	018b      	lsls	r3, r1, #6
 8001e98:	4651      	mov	r1, sl
 8001e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	018a      	lsls	r2, r1, #6
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec2:	4690      	mov	r8, r2
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	eb18 0303 	adds.w	r3, r8, r3
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	462b      	mov	r3, r5
 8001ed0:	eb49 0303 	adc.w	r3, r9, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	024b      	lsls	r3, r1, #9
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eec:	4621      	mov	r1, r4
 8001eee:	024a      	lsls	r2, r1, #9
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f00:	f7fe f974 	bl	80001ec <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f0c:	e058      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	2200      	movs	r2, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	4611      	mov	r1, r2
 8001f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f28:	4642      	mov	r2, r8
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	f04f 0100 	mov.w	r1, #0
 8001f34:	0159      	lsls	r1, r3, #5
 8001f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3a:	0150      	lsls	r0, r2, #5
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4641      	mov	r1, r8
 8001f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f46:	4649      	mov	r1, r9
 8001f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f60:	ebb2 040a 	subs.w	r4, r2, sl
 8001f64:	eb63 050b 	sbc.w	r5, r3, fp
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	00eb      	lsls	r3, r5, #3
 8001f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f76:	00e2      	lsls	r2, r4, #3
 8001f78:	4614      	mov	r4, r2
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	18e3      	adds	r3, r4, r3
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	464b      	mov	r3, r9
 8001f84:	eb45 0303 	adc.w	r3, r5, r3
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f96:	4629      	mov	r1, r5
 8001f98:	028b      	lsls	r3, r1, #10
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	028a      	lsls	r2, r1, #10
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001faa:	2200      	movs	r2, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	61fa      	str	r2, [r7, #28]
 8001fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb4:	f7fe f91a 	bl	80001ec <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3750      	adds	r7, #80	; 0x50
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000400 	.word	0x20000400

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002018:	f7ff fff0 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0a9b      	lsrs	r3, r3, #10
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	08004270 	.word	0x08004270

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002040:	f7ff ffdc 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0b5b      	lsrs	r3, r3, #13
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08004270 	.word	0x08004270

08002064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07b      	b.n	800216e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002086:	d009      	beq.n	800209c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
 800208e:	e005      	b.n	800209c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fc8e 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	ea42 0103 	orr.w	r1, r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	f003 0104 	and.w	r1, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f003 0210 	and.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b088      	sub	sp, #32
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_SPI_Transmit+0x22>
 8002194:	2302      	movs	r3, #2
 8002196:	e126      	b.n	80023e6 <HAL_SPI_Transmit+0x270>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a0:	f7fe fed0 	bl	8000f44 <HAL_GetTick>
 80021a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ba:	e10b      	b.n	80023d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_SPI_Transmit+0x52>
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021cc:	e102      	b.n	80023d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002214:	d10f      	bne.n	8002236 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d007      	beq.n	8002254 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225c:	d14b      	bne.n	80022f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_SPI_Transmit+0xf6>
 8002266:	8afb      	ldrh	r3, [r7, #22]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d13e      	bne.n	80022ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	1c9a      	adds	r2, r3, #2
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002290:	e02b      	b.n	80022ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b02      	cmp	r3, #2
 800229e:	d112      	bne.n	80022c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022c4:	e011      	b.n	80022ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c6:	f7fe fe3d 	bl	8000f44 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d803      	bhi.n	80022de <HAL_SPI_Transmit+0x168>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d102      	bne.n	80022e4 <HAL_SPI_Transmit+0x16e>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022e8:	e074      	b.n	80023d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ce      	bne.n	8002292 <HAL_SPI_Transmit+0x11c>
 80022f4:	e04c      	b.n	8002390 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Transmit+0x18e>
 80022fe:	8afb      	ldrh	r3, [r7, #22]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d140      	bne.n	8002386 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800232a:	e02c      	b.n	8002386 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d113      	bne.n	8002362 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002360:	e011      	b.n	8002386 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe fdef 	bl	8000f44 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Transmit+0x204>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Transmit+0x20a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002384:	e026      	b.n	80023d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1cd      	bne.n	800232c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8b3 	bl	8002500 <SPI_EndRxTxTransaction>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	e000      	b.n	80023d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80023d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002400:	f7fe fda0 	bl	8000f44 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002410:	f7fe fd98 	bl	8000f44 <HAL_GetTick>
 8002414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	015b      	lsls	r3, r3, #5
 800241c:	0d1b      	lsrs	r3, r3, #20
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002426:	e054      	b.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d050      	beq.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002430:	f7fe fd88 	bl	8000f44 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	d902      	bls.n	8002446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d13d      	bne.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245e:	d111      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002468:	d004      	beq.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d107      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248c:	d10f      	bne.n	80024ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e017      	b.n	80024f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4013      	ands	r3, r2
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d19b      	bne.n	8002428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000400 	.word	0x20000400

08002500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <SPI_EndRxTxTransaction+0x7c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <SPI_EndRxTxTransaction+0x80>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0d5b      	lsrs	r3, r3, #21
 8002518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800252a:	d112      	bne.n	8002552 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2200      	movs	r2, #0
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff ff5a 	bl	80023f0 <SPI_WaitFlagStateUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e00f      	b.n	8002572 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3b01      	subs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d0f2      	beq.n	8002552 <SPI_EndRxTxTransaction+0x52>
 800256c:	e000      	b.n	8002570 <SPI_EndRxTxTransaction+0x70>
        break;
 800256e:	bf00      	nop
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000400 	.word	0x20000400
 8002580:	165e9f81 	.word	0x165e9f81

08002584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e03f      	b.n	8002616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fa7c 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f829 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0c0      	sub	sp, #256	; 0x100
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	ea40 0301 	orr.w	r3, r0, r1
 8002648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002678:	f021 010c 	bic.w	r1, r1, #12
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	6999      	ldr	r1, [r3, #24]
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	ea40 0301 	orr.w	r3, r0, r1
 80026a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <UART_SetConfig+0x2cc>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d005      	beq.n	80026c0 <UART_SetConfig+0xa0>
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <UART_SetConfig+0x2d0>)
 80026bc:	429a      	cmp	r2, r3
 80026be:	d104      	bne.n	80026ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7ff fcbc 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 80026c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026c8:	e003      	b.n	80026d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fca3 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80026ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	f040 810c 	bne.w	80028f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80026fa:	415b      	adcs	r3, r3
 80026fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002702:	4621      	mov	r1, r4
 8002704:	eb12 0801 	adds.w	r8, r2, r1
 8002708:	4629      	mov	r1, r5
 800270a:	eb43 0901 	adc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002730:	462b      	mov	r3, r5
 8002732:	eb49 0303 	adc.w	r3, r9, r3
 8002736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800274a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800274e:	460b      	mov	r3, r1
 8002750:	18db      	adds	r3, r3, r3
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
 8002754:	4613      	mov	r3, r2
 8002756:	eb42 0303 	adc.w	r3, r2, r3
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 800275c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002764:	f7fd fd42 	bl	80001ec <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <UART_SetConfig+0x2d4>)
 800276e:	fba3 2302 	umull	r2, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	011c      	lsls	r4, r3, #4
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	1891      	adds	r1, r2, r2
 800278e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002790:	415b      	adcs	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002798:	4641      	mov	r1, r8
 800279a:	eb12 0a01 	adds.w	sl, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb43 0b01 	adc.w	fp, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b8:	4692      	mov	sl, r2
 80027ba:	469b      	mov	fp, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	eb1a 0303 	adds.w	r3, sl, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027e4:	460b      	mov	r3, r1
 80027e6:	18db      	adds	r3, r3, r3
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ea:	4613      	mov	r3, r2
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
 80027f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027fa:	f7fd fcf7 	bl	80001ec <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4611      	mov	r1, r2
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <UART_SetConfig+0x2d4>)
 8002806:	fba3 2301 	umull	r2, r3, r3, r1
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <UART_SetConfig+0x2d4>)
 800281c:	fba3 2302 	umull	r2, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002828:	441c      	add	r4, r3
 800282a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	1891      	adds	r1, r2, r2
 8002842:	63b9      	str	r1, [r7, #56]	; 0x38
 8002844:	415b      	adcs	r3, r3
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800284c:	4641      	mov	r1, r8
 800284e:	1851      	adds	r1, r2, r1
 8002850:	6339      	str	r1, [r7, #48]	; 0x30
 8002852:	4649      	mov	r1, r9
 8002854:	414b      	adcs	r3, r1
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002864:	4659      	mov	r1, fp
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4651      	mov	r1, sl
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4651      	mov	r1, sl
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4642      	mov	r2, r8
 800287a:	189b      	adds	r3, r3, r2
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002880:	464b      	mov	r3, r9
 8002882:	460a      	mov	r2, r1
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800289c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a0:	460b      	mov	r3, r1
 80028a2:	18db      	adds	r3, r3, r3
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	4613      	mov	r3, r2
 80028a8:	eb42 0303 	adc.w	r3, r2, r3
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028b6:	f7fd fc99 	bl	80001ec <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4422      	add	r2, r4
 80028e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028e8:	e105      	b.n	8002af6 <UART_SetConfig+0x4d6>
 80028ea:	bf00      	nop
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	1891      	adds	r1, r2, r2
 8002910:	6239      	str	r1, [r7, #32]
 8002912:	415b      	adcs	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291a:	4641      	mov	r1, r8
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4649      	mov	r1, r9
 8002920:	eb43 0501 	adc.w	r5, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	00eb      	lsls	r3, r5, #3
 800292e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002932:	00e2      	lsls	r2, r4, #3
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4643      	mov	r3, r8
 800293a:	18e3      	adds	r3, r4, r3
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002940:	464b      	mov	r3, r9
 8002942:	eb45 0303 	adc.w	r3, r5, r3
 8002946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002966:	4629      	mov	r1, r5
 8002968:	008b      	lsls	r3, r1, #2
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002970:	4621      	mov	r1, r4
 8002972:	008a      	lsls	r2, r1, #2
 8002974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002978:	f7fd fc38 	bl	80001ec <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	61b9      	str	r1, [r7, #24]
 80029a4:	415b      	adcs	r3, r3
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	4641      	mov	r1, r8
 80029ae:	1851      	adds	r1, r2, r1
 80029b0:	6139      	str	r1, [r7, #16]
 80029b2:	4649      	mov	r1, r9
 80029b4:	414b      	adcs	r3, r1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c4:	4659      	mov	r1, fp
 80029c6:	00cb      	lsls	r3, r1, #3
 80029c8:	4651      	mov	r1, sl
 80029ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ce:	4651      	mov	r1, sl
 80029d0:	00ca      	lsls	r2, r1, #3
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	4642      	mov	r2, r8
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e0:	464b      	mov	r3, r9
 80029e2:	460a      	mov	r2, r1
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a04:	4649      	mov	r1, r9
 8002a06:	008b      	lsls	r3, r1, #2
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a0e:	4641      	mov	r1, r8
 8002a10:	008a      	lsls	r2, r1, #2
 8002a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a16:	f7fd fbe9 	bl	80001ec <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3e:	441c      	add	r4, r3
 8002a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a44:	2200      	movs	r2, #0
 8002a46:	673b      	str	r3, [r7, #112]	; 0x70
 8002a48:	677a      	str	r2, [r7, #116]	; 0x74
 8002a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5e:	4641      	mov	r1, r8
 8002a60:	1851      	adds	r1, r2, r1
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	4649      	mov	r1, r9
 8002a66:	414b      	adcs	r3, r1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a76:	4659      	mov	r1, fp
 8002a78:	00cb      	lsls	r3, r1, #3
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a80:	4651      	mov	r1, sl
 8002a82:	00ca      	lsls	r2, r1, #3
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	008b      	lsls	r3, r1, #2
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abc:	4641      	mov	r1, r8
 8002abe:	008a      	lsls	r2, r1, #2
 8002ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ac4:	f7fd fb92 	bl	80001ec <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ace:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2164      	movs	r1, #100	; 0x64
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	3332      	adds	r3, #50	; 0x32
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4422      	add	r2, r4
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	bf00      	nop
 8002af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b08:	b084      	sub	sp, #16
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	f107 001c 	add.w	r0, r7, #28
 8002b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d122      	bne.n	8002b66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 faa2 	bl	80030a4 <USB_CoreReset>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e01a      	b.n	8002b9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa96 	bl	80030a4 <USB_CoreReset>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b8e:	e005      	b.n	8002b9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10b      	bne.n	8002bba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f043 0206 	orr.w	r2, r3, #6
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bc6:	b004      	add	sp, #16
 8002bc8:	4770      	bx	lr

08002bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d115      	bne.n	8002c3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7fe f99e 	bl	8000f5c <HAL_Delay>
      ms++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa2e 	bl	8003088 <USB_GetMode>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d01e      	beq.n	8002c70 <USB_SetCurrentMode+0x84>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b31      	cmp	r3, #49	; 0x31
 8002c36:	d9f0      	bls.n	8002c1a <USB_SetCurrentMode+0x2e>
 8002c38:	e01a      	b.n	8002c70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d115      	bne.n	8002c6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7fe f985 	bl	8000f5c <HAL_Delay>
      ms++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa15 	bl	8003088 <USB_GetMode>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <USB_SetCurrentMode+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b31      	cmp	r3, #49	; 0x31
 8002c68:	d9f0      	bls.n	8002c4c <USB_SetCurrentMode+0x60>
 8002c6a:	e001      	b.n	8002c70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e005      	b.n	8002c7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b32      	cmp	r3, #50	; 0x32
 8002c74:	d101      	bne.n	8002c7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c84:	b084      	sub	sp, #16
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e009      	b.n	8002cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	3340      	adds	r3, #64	; 0x40
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0e      	cmp	r3, #14
 8002cbc:	d9f2      	bls.n	8002ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11c      	bne.n	8002cfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8002cfc:	e00b      	b.n	8002d16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	4619      	mov	r1, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	461a      	mov	r2, r3
 8002d32:	680b      	ldr	r3, [r1, #0]
 8002d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10c      	bne.n	8002d56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d42:	2100      	movs	r1, #0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f965 	bl	8003014 <USB_SetDevSpeed>
 8002d4a:	e008      	b.n	8002d5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f960 	bl	8003014 <USB_SetDevSpeed>
 8002d54:	e003      	b.n	8002d5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d56:	2103      	movs	r1, #3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f95b 	bl	8003014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d5e:	2110      	movs	r1, #16
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f3 	bl	8002f4c <USB_FlushTxFifo>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f91f 	bl	8002fb4 <USB_FlushRxFifo>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	461a      	mov	r2, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e043      	b.n	8002e32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc0:	d118      	bne.n	8002df4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e013      	b.n	8002e06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e008      	b.n	8002e06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3b7      	bcc.n	8002daa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e043      	b.n	8002ec8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e56:	d118      	bne.n	8002e8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e013      	b.n	8002e9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e008      	b.n	8002e9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3b7      	bcc.n	8002e40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <USB_DevInit+0x2c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f44:	b004      	add	sp, #16
 8002f46:	4770      	bx	lr
 8002f48:	803c3800 	.word	0x803c3800

08002f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <USB_FlushTxFifo+0x64>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e01b      	b.n	8002fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	daf2      	bge.n	8002f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <USB_FlushTxFifo+0x64>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e006      	b.n	8002fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d0f0      	beq.n	8002f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	00030d40 	.word	0x00030d40

08002fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <USB_FlushRxFifo+0x5c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e018      	b.n	8003004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	daf2      	bge.n	8002fc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <USB_FlushRxFifo+0x5c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e006      	b.n	8003004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d0f0      	beq.n	8002fe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	00030d40 	.word	0x00030d40

08003014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003060:	f023 0303 	bic.w	r3, r3, #3
 8003064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0301 	and.w	r3, r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <USB_CoreReset+0x64>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e01b      	b.n	80030fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	daf2      	bge.n	80030b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <USB_CoreReset+0x64>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e006      	b.n	80030fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d0f0      	beq.n	80030da <USB_CoreReset+0x36>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	00030d40 	.word	0x00030d40

0800310c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	460b      	mov	r3, r1
 8003140:	813b      	strh	r3, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800314c:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800314e:	7dbb      	ldrb	r3, [r7, #22]
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	757b      	strb	r3, [r7, #21]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800315c:	897a      	ldrh	r2, [r7, #10]
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	4413      	add	r3, r2
 8003162:	b298      	uxth	r0, r3
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	3301      	adds	r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	893a      	ldrh	r2, [r7, #8]
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4603      	mov	r3, r0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 faee 	bl	8003754 <u8g2_IsIntersection>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 8003182:	e035      	b.n	80031f0 <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	4013      	ands	r3, r2
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	7dba      	ldrb	r2, [r7, #22]
 8003196:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800319a:	893a      	ldrh	r2, [r7, #8]
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2301      	movs	r3, #1
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa00 	bl	80035aa <u8g2_DrawHVLine>
 80031aa:	e010      	b.n	80031ce <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	7d7a      	ldrb	r2, [r7, #21]
 80031ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80031be:	893a      	ldrh	r2, [r7, #8]
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	2300      	movs	r3, #0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f9ee 	bl	80035aa <u8g2_DrawHVLine>
    }

    x++;
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	3301      	adds	r3, #1
 80031d2:	817b      	strh	r3, [r7, #10]
    mask >>= 1;
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	75fb      	strb	r3, [r7, #23]
      b++;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	3301      	adds	r3, #1
 80031e8:	623b      	str	r3, [r7, #32]
    }
    len--;
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1c6      	bne.n	8003184 <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	7dba      	ldrb	r2, [r7, #22]
 80031fa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80031fe:	e000      	b.n	8003202 <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 8003200:	bf00      	nop
}
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4603      	mov	r3, r0
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	460b      	mov	r3, r1
 800321c:	813b      	strh	r3, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w;
  w = cnt;
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	82fb      	strh	r3, [r7, #22]
  w *= 8;
 8003226:	8afb      	ldrh	r3, [r7, #22]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800322c:	897a      	ldrh	r2, [r7, #10]
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	4413      	add	r3, r2
 8003232:	b298      	uxth	r0, r3
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	8c3b      	ldrh	r3, [r7, #32]
 8003238:	4413      	add	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	4603      	mov	r3, r0
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fa85 	bl	8003754 <u8g2_IsIntersection>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8003250:	e012      	b.n	8003278 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 8003252:	8af8      	ldrh	r0, [r7, #22]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	8979      	ldrh	r1, [r7, #10]
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4603      	mov	r3, r0
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff64 	bl	800312c <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	4413      	add	r3, r2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	3301      	adds	r3, #1
 8003270:	813b      	strh	r3, [r7, #8]
    h--;
 8003272:	8c3b      	ldrh	r3, [r7, #32]
 8003274:	3b01      	subs	r3, #1
 8003276:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8003278:	8c3b      	ldrh	r3, [r7, #32]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e9      	bne.n	8003252 <u8g2_DrawBitmap+0x4a>
 800327e:	e000      	b.n	8003282 <u8g2_DrawBitmap+0x7a>
    return;
 8003280:	bf00      	nop
  }
}
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	7c1b      	ldrb	r3, [r3, #16]
 8003296:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 ffbe 	bl	8004238 <memset>
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
 80032d0:	4613      	mov	r3, r2
 80032d2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	7c1b      	ldrb	r3, [r3, #16]
 80032da:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	89ba      	ldrh	r2, [r7, #12]
 80032ec:	fb12 f303 	smulbb	r3, r2, r3
 80032f0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80032f8:	89bb      	ldrh	r3, [r7, #12]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003300:	7bf9      	ldrb	r1, [r7, #15]
 8003302:	78ba      	ldrb	r2, [r7, #2]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	460b      	mov	r3, r1
 800330a:	2100      	movs	r1, #0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fea0 	bl	8004052 <u8x8_DrawTile>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003334:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	7c5b      	ldrb	r3, [r3, #17]
 800333c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800333e:	7bba      	ldrb	r2, [r7, #14]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ffbd 	bl	80032c4 <u8g2_send_tile_row>
    src_row++;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	3301      	adds	r3, #1
 8003354:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	7b7b      	ldrb	r3, [r7, #13]
 800335a:	429a      	cmp	r2, r3
 800335c:	d203      	bcs.n	8003366 <u8g2_send_buffer+0x4c>
 800335e:	7bba      	ldrb	r2, [r7, #14]
 8003360:	7b3b      	ldrb	r3, [r7, #12]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3eb      	bcc.n	800333e <u8g2_send_buffer+0x24>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff69 	bl	8003288 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80033b6:	2100      	movs	r1, #0
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ffd8 	bl	800336e <u8g2_SetBufferCurrTileRow>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa3 	bl	800331a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033da:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	4413      	add	r3, r2
 80033e6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	7c5b      	ldrb	r3, [r3, #17]
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d304      	bcc.n	80033fe <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fe7d 	bl	80040f4 <u8x8_RefreshDisplay>
    return 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e00d      	b.n	800341a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff3d 	bl	8003288 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ffab 	bl	800336e <u8g2_SetBufferCurrTileRow>
  return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2208      	movs	r2, #8
 8003430:	701a      	strb	r2, [r3, #0]
  return buf;
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000a68 	.word	0x20000a68

08003444 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800345a:	490c      	ldr	r1, [pc, #48]	; (800348c <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fea9 	bl	80041b4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003462:	f107 0313 	add.w	r3, r7, #19
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ffdc 	bl	8003424 <u8g2_m_16_8_f>
 800346c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800346e:	7cfa      	ldrb	r2, [r7, #19]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa55 	bl	8003928 <u8g2_SetupBuffer>
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	08003d75 	.word	0x08003d75
 800348c:	08003f4d 	.word	0x08003f4d
 8003490:	080037ab 	.word	0x080037ab

08003494 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return 0;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <u8g2_SetFontPosBaseline+0x1c>)
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	08003495 	.word	0x08003495

080034cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	460b      	mov	r3, r1
 80034dc:	80fb      	strh	r3, [r7, #6]
 80034de:	4613      	mov	r3, r2
 80034e0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80034e8:	8afb      	ldrh	r3, [r7, #22]
 80034ea:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	881a      	ldrh	r2, [r3, #0]
 80034f0:	8abb      	ldrh	r3, [r7, #20]
 80034f2:	4413      	add	r3, r2
 80034f4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80034f6:	8afa      	ldrh	r2, [r7, #22]
 80034f8:	8abb      	ldrh	r3, [r7, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d90b      	bls.n	8003516 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80034fe:	8afa      	ldrh	r2, [r7, #22]
 8003500:	88bb      	ldrh	r3, [r7, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d205      	bcs.n	8003512 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003506:	88bb      	ldrh	r3, [r7, #4]
 8003508:	82bb      	strh	r3, [r7, #20]
      b--;
 800350a:	8abb      	ldrh	r3, [r7, #20]
 800350c:	3b01      	subs	r3, #1
 800350e:	82bb      	strh	r3, [r7, #20]
 8003510:	e001      	b.n	8003516 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003516:	8afa      	ldrh	r2, [r7, #22]
 8003518:	88bb      	ldrh	r3, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d301      	bcc.n	8003522 <u8g2_clip_intersection2+0x56>
    return 0;
 800351e:	2300      	movs	r3, #0
 8003520:	e01c      	b.n	800355c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003522:	8aba      	ldrh	r2, [r7, #20]
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	429a      	cmp	r2, r3
 8003528:	d801      	bhi.n	800352e <u8g2_clip_intersection2+0x62>
    return 0;
 800352a:	2300      	movs	r3, #0
 800352c:	e016      	b.n	800355c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800352e:	8afa      	ldrh	r2, [r7, #22]
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	429a      	cmp	r2, r3
 8003534:	d201      	bcs.n	800353a <u8g2_clip_intersection2+0x6e>
    a = c;
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800353a:	8aba      	ldrh	r2, [r7, #20]
 800353c:	88bb      	ldrh	r3, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d901      	bls.n	8003546 <u8g2_clip_intersection2+0x7a>
    b = d;
 8003542:	88bb      	ldrh	r3, [r7, #4]
 8003544:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8afa      	ldrh	r2, [r7, #22]
 800354a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800354c:	8aba      	ldrh	r2, [r7, #20]
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	8aba      	ldrh	r2, [r7, #20]
 8003558:	801a      	strh	r2, [r3, #0]
  return 1;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b087      	sub	sp, #28
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003586:	893a      	ldrh	r2, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003590:	88f8      	ldrh	r0, [r7, #6]
 8003592:	893a      	ldrh	r2, [r7, #8]
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4603      	mov	r3, r0
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	47a0      	blx	r4
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80035aa:	b590      	push	{r4, r7, lr}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	4608      	mov	r0, r1
 80035b4:	4611      	mov	r1, r2
 80035b6:	461a      	mov	r2, r3
 80035b8:	4603      	mov	r3, r0
 80035ba:	817b      	strh	r3, [r7, #10]
 80035bc:	460b      	mov	r3, r1
 80035be:	813b      	strh	r3, [r7, #8]
 80035c0:	4613      	mov	r3, r2
 80035c2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d075      	beq.n	80036ba <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d072      	beq.n	80036ba <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d91a      	bls.n	8003610 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80035da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d109      	bne.n	80035f6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80035e2:	897a      	ldrh	r2, [r7, #10]
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	817b      	strh	r3, [r7, #10]
	  x++;
 80035ec:	897b      	ldrh	r3, [r7, #10]
 80035ee:	3301      	adds	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	817b      	strh	r3, [r7, #10]
 80035f4:	e00c      	b.n	8003610 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80035f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d108      	bne.n	8003610 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80035fe:	893a      	ldrh	r2, [r7, #8]
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	b29b      	uxth	r3, r3
 8003606:	813b      	strh	r3, [r7, #8]
	  y++;
 8003608:	893b      	ldrh	r3, [r7, #8]
 800360a:	3301      	adds	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003610:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800361c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11a      	bne.n	800365a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800362a:	893b      	ldrh	r3, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d83b      	bhi.n	80036a8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003636:	893b      	ldrh	r3, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d937      	bls.n	80036ac <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003648:	1db9      	adds	r1, r7, #6
 800364a:	f107 000a 	add.w	r0, r7, #10
 800364e:	f7ff ff3d 	bl	80034cc <u8g2_clip_intersection2>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11a      	bne.n	800368e <u8g2_DrawHVLine+0xe4>
	  return;
 8003658:	e02f      	b.n	80036ba <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	429a      	cmp	r2, r3
 8003664:	d824      	bhi.n	80036b0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	429a      	cmp	r2, r3
 8003670:	d920      	bls.n	80036b4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800367e:	1db9      	adds	r1, r7, #6
 8003680:	f107 0008 	add.w	r0, r7, #8
 8003684:	f7ff ff22 	bl	80034cc <u8g2_clip_intersection2>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d014      	beq.n	80036b8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	689c      	ldr	r4, [r3, #8]
 8003694:	8979      	ldrh	r1, [r7, #10]
 8003696:	893a      	ldrh	r2, [r7, #8]
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	47a0      	blx	r4
 80036a6:	e008      	b.n	80036ba <u8g2_DrawHVLine+0x110>
	  return;
 80036a8:	bf00      	nop
 80036aa:	e006      	b.n	80036ba <u8g2_DrawHVLine+0x110>
	  return;
 80036ac:	bf00      	nop
 80036ae:	e004      	b.n	80036ba <u8g2_DrawHVLine+0x110>
	  return;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <u8g2_DrawHVLine+0x110>
	  return;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <u8g2_DrawHVLine+0x110>
	  return;
 80036b8:	bf00      	nop
    }
}
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d903      	bls.n	80036e2 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80036ee:	b490      	push	{r4, r7}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4604      	mov	r4, r0
 80036f6:	4608      	mov	r0, r1
 80036f8:	4611      	mov	r1, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	80fb      	strh	r3, [r7, #6]
 8003700:	4603      	mov	r3, r0
 8003702:	80bb      	strh	r3, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800370c:	887a      	ldrh	r2, [r7, #2]
 800370e:	88bb      	ldrh	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d20d      	bcs.n	8003730 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003714:	883a      	ldrh	r2, [r7, #0]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	429a      	cmp	r2, r3
 800371a:	d901      	bls.n	8003720 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800371c:	2301      	movs	r3, #1
 800371e:	e014      	b.n	800374a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	883b      	ldrh	r3, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d901      	bls.n	800372c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003728:	2301      	movs	r3, #1
 800372a:	e00e      	b.n	800374a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800372c:	2300      	movs	r3, #0
 800372e:	e00c      	b.n	800374a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003730:	883a      	ldrh	r2, [r7, #0]
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	429a      	cmp	r2, r3
 8003736:	d907      	bls.n	8003748 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	883b      	ldrh	r3, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d901      	bls.n	8003744 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003740:	2301      	movs	r3, #1
 8003742:	e002      	b.n	800374a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003748:	2300      	movs	r3, #0
    }
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bc90      	pop	{r4, r7}
 8003752:	4770      	bx	lr

08003754 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800377a:	8b3b      	ldrh	r3, [r7, #24]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	f7ff ffb6 	bl	80036ee <u8g2_is_intersection_decision_tree>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <u8g2_IsIntersection+0x38>
    return 0; 
 8003788:	2300      	movs	r3, #0
 800378a:	e00a      	b.n	80037a2 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	897a      	ldrh	r2, [r7, #10]
 800379c:	f7ff ffa7 	bl	80036ee <u8g2_is_intersection_decision_tree>
 80037a0:	4603      	mov	r3, r0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b089      	sub	sp, #36	; 0x24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	4608      	mov	r0, r1
 80037b4:	4611      	mov	r1, r2
 80037b6:	461a      	mov	r2, r3
 80037b8:	4603      	mov	r3, r0
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	460b      	mov	r3, r1
 80037be:	813b      	strh	r3, [r7, #8]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80037c4:	893b      	ldrh	r3, [r7, #8]
 80037c6:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80037c8:	7efb      	ldrb	r3, [r7, #27]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80037d4:	7e3a      	ldrb	r2, [r7, #24]
 80037d6:	7efb      	ldrb	r3, [r7, #27]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d801      	bhi.n	80037f4 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80037f0:	7e3b      	ldrb	r3, [r7, #24]
 80037f2:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80037fe:	7e3b      	ldrb	r3, [r7, #24]
 8003800:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003802:	893b      	ldrh	r3, [r7, #8]
 8003804:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003806:	8afb      	ldrh	r3, [r7, #22]
 8003808:	f023 0307 	bic.w	r3, r3, #7
 800380c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	7c1b      	ldrb	r3, [r3, #16]
 8003814:	b29b      	uxth	r3, r3
 8003816:	8afa      	ldrh	r2, [r7, #22]
 8003818:	fb12 f303 	smulbb	r3, r2, r3
 800381c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800382c:	897b      	ldrh	r3, [r7, #10]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d117      	bne.n	800386c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	7ebb      	ldrb	r3, [r7, #26]
 8003842:	4313      	orrs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	7e7b      	ldrb	r3, [r7, #25]
 8003850:	4053      	eors	r3, r2
 8003852:	b2da      	uxtb	r2, r3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
	len--;
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	3b01      	subs	r3, #1
 8003862:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e8      	bne.n	800383c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800386a:	e038      	b.n	80038de <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	7ebb      	ldrb	r3, [r7, #26]
 8003872:	4313      	orrs	r3, r2
 8003874:	b2da      	uxtb	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	7e7b      	ldrb	r3, [r7, #25]
 8003880:	4053      	eors	r3, r2
 8003882:	b2da      	uxtb	r2, r3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003888:	7efb      	ldrb	r3, [r7, #27]
 800388a:	3301      	adds	r3, #1
 800388c:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800388e:	7efb      	ldrb	r3, [r7, #27]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	76fb      	strb	r3, [r7, #27]
      len--;
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	3b01      	subs	r3, #1
 800389a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d114      	bne.n	80038cc <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80038a6:	461a      	mov	r2, r3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d801      	bhi.n	80038bc <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d008      	beq.n	80038d8 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	767b      	strb	r3, [r7, #25]
 80038ca:	e005      	b.n	80038d8 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80038cc:	7ebb      	ldrb	r3, [r7, #26]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80038d2:	7e7b      	ldrb	r3, [r7, #25]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1c6      	bne.n	800386c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80038de:	bf00      	nop
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003912:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	79fa      	ldrb	r2, [r7, #7]
 800394e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff ffa9 	bl	80038ea <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fd87 	bl	80034ac <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039c2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	89fa      	ldrh	r2, [r7, #14]
 80039ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	7c1b      	ldrb	r3, [r3, #16]
 80039d4:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	89fa      	ldrh	r2, [r7, #14]
 80039e0:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039e8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	89fa      	ldrh	r2, [r7, #14]
 80039f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039fc:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003a06:	4413      	add	r3, r2
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	7c52      	ldrb	r2, [r2, #17]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	dd08      	ble.n	8003a22 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	7c5b      	ldrb	r3, [r3, #17]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003a22:	89fb      	ldrh	r3, [r7, #14]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	4413      	add	r3, r2
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	8a9a      	ldrh	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	8ada      	ldrh	r2, [r3, #22]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4603      	mov	r3, r0
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fe5d 	bl	8003754 <u8g2_IsIntersection>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003aa8:	e03b      	b.n	8003b22 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d205      	bcs.n	8003ace <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d905      	bls.n	8003aea <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d205      	bcs.n	8003b06 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d905      	bls.n	8003b22 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff3b 	bl	80039ae <u8g2_update_dimension_common>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff7b 	bl	8003a70 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af02      	add	r7, sp, #8
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4603      	mov	r3, r0
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	460b      	mov	r3, r1
 8003b96:	813b      	strh	r3, [r7, #8]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003b9c:	88f8      	ldrh	r0, [r7, #6]
 8003b9e:	893a      	ldrh	r2, [r7, #8]
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	7e3b      	ldrb	r3, [r7, #24]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fcdd 	bl	8003568 <u8g2_draw_hv_line_2dir>
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003bb6:	b590      	push	{r4, r7, lr}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691c      	ldr	r4, [r3, #16]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2120      	movs	r1, #32
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	47a0      	blx	r4
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}

08003bda <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003bda:	b590      	push	{r4, r7, lr}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	460b      	mov	r3, r1
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691c      	ldr	r4, [r3, #16]
 8003bec:	7afa      	ldrb	r2, [r7, #11]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2117      	movs	r1, #23
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	47a0      	blx	r4
 8003bf6:	4603      	mov	r3, r0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}

08003c00 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003c0c:	1cfb      	adds	r3, r7, #3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2101      	movs	r1, #1
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ffe1 	bl	8003bda <u8x8_byte_SendBytes>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003c22:	b590      	push	{r4, r7, lr}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68dc      	ldr	r4, [r3, #12]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	2300      	movs	r3, #0
 8003c36:	2115      	movs	r1, #21
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	47a0      	blx	r4
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}

08003c46 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003c46:	b590      	push	{r4, r7, lr}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68dc      	ldr	r4, [r3, #12]
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2116      	movs	r1, #22
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	47a0      	blx	r4
 8003c60:	4603      	mov	r3, r0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd90      	pop	{r4, r7, pc}

08003c6a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003c6a:	b590      	push	{r4, r7, lr}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	460b      	mov	r3, r1
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68dc      	ldr	r4, [r3, #12]
 8003c7c:	7afa      	ldrb	r2, [r7, #11]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2117      	movs	r1, #23
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	47a0      	blx	r4
 8003c86:	4603      	mov	r3, r0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}

08003c90 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68dc      	ldr	r4, [r3, #12]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2118      	movs	r1, #24
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	47a0      	blx	r4
 8003ca6:	4603      	mov	r3, r0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd90      	pop	{r4, r7, pc}

08003cb0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68dc      	ldr	r4, [r3, #12]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2119      	movs	r1, #25
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	47a0      	blx	r4
 8003cc6:	4603      	mov	r3, r0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd90      	pop	{r4, r7, pc}

08003cd0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	73fb      	strb	r3, [r7, #15]
    data++;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2bfe      	cmp	r3, #254	; 0xfe
 8003cea:	d031      	beq.n	8003d50 <u8x8_cad_SendSequence+0x80>
 8003cec:	2bfe      	cmp	r3, #254	; 0xfe
 8003cee:	dc3d      	bgt.n	8003d6c <u8x8_cad_SendSequence+0x9c>
 8003cf0:	2b19      	cmp	r3, #25
 8003cf2:	dc3b      	bgt.n	8003d6c <u8x8_cad_SendSequence+0x9c>
 8003cf4:	2b18      	cmp	r3, #24
 8003cf6:	da23      	bge.n	8003d40 <u8x8_cad_SendSequence+0x70>
 8003cf8:	2b16      	cmp	r3, #22
 8003cfa:	dc02      	bgt.n	8003d02 <u8x8_cad_SendSequence+0x32>
 8003cfc:	2b15      	cmp	r3, #21
 8003cfe:	da03      	bge.n	8003d08 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003d00:	e034      	b.n	8003d6c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003d02:	2b17      	cmp	r3, #23
 8003d04:	d00e      	beq.n	8003d24 <u8x8_cad_SendSequence+0x54>
	return;
 8003d06:	e031      	b.n	8003d6c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68dc      	ldr	r4, [r3, #12]
 8003d12:	7bba      	ldrb	r2, [r7, #14]
 8003d14:	7bf9      	ldrb	r1, [r7, #15]
 8003d16:	2300      	movs	r3, #0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	47a0      	blx	r4
	  data++;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	603b      	str	r3, [r7, #0]
	  break;
 8003d22:	e022      	b.n	8003d6a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003d2a:	f107 030e 	add.w	r3, r7, #14
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2101      	movs	r1, #1
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff99 	bl	8003c6a <u8x8_cad_SendData>
	  data++;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	603b      	str	r3, [r7, #0]
	  break;
 8003d3e:	e014      	b.n	8003d6a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68dc      	ldr	r4, [r3, #12]
 8003d44:	7bf9      	ldrb	r1, [r7, #15]
 8003d46:	2300      	movs	r3, #0
 8003d48:	2200      	movs	r2, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	47a0      	blx	r4
	  break;
 8003d4e:	e00c      	b.n	8003d6a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003d56:	7bbb      	ldrb	r3, [r7, #14]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2129      	movs	r1, #41	; 0x29
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f9d8 	bl	8004112 <u8x8_gpio_call>
	  data++;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	603b      	str	r3, [r7, #0]
	  break;
 8003d68:	bf00      	nop
    cmd = *data;
 8003d6a:	e7b6      	b.n	8003cda <u8x8_cad_SendSequence+0xa>
	return;
 8003d6c:	bf00      	nop
    }
  }
}
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd90      	pop	{r4, r7, pc}

08003d74 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	72fb      	strb	r3, [r7, #11]
 8003d82:	4613      	mov	r3, r2
 8003d84:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	3b14      	subs	r3, #20
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d82f      	bhi.n	8003dee <u8x8_cad_001+0x7a>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <u8x8_cad_001+0x20>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003ddd 	.word	0x08003ddd
 8003d98:	08003dad 	.word	0x08003dad
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003ddd 	.word	0x08003ddd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003dac:	2100      	movs	r1, #0
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff ff01 	bl	8003bb6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003db4:	7abb      	ldrb	r3, [r7, #10]
 8003db6:	4619      	mov	r1, r3
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff21 	bl	8003c00 <u8x8_byte_SendByte>
      break;
 8003dbe:	e018      	b.n	8003df2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fef7 	bl	8003bb6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003dc8:	7abb      	ldrb	r3, [r7, #10]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff17 	bl	8003c00 <u8x8_byte_SendByte>
      break;
 8003dd2:	e00e      	b.n	8003df2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff feed 	bl	8003bb6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691c      	ldr	r4, [r3, #16]
 8003de0:	7aba      	ldrb	r2, [r7, #10]
 8003de2:	7af9      	ldrb	r1, [r7, #11]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	47a0      	blx	r4
 8003dea:	4603      	mov	r3, r0
 8003dec:	e002      	b.n	8003df4 <u8x8_cad_001+0x80>
    default:
      return 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <u8x8_cad_001+0x80>
  }
  return 1;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd90      	pop	{r4, r7, pc}

08003dfc <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	72fb      	strb	r3, [r7, #11]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	3b0b      	subs	r3, #11
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	f200 808a 	bhi.w	8003f2c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003f2d 	.word	0x08003f2d
 8003e28:	08003e4f 	.word	0x08003e4f
 8003e2c:	08003e81 	.word	0x08003e81
 8003e30:	08003ea1 	.word	0x08003ea1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003e34:	7abb      	ldrb	r3, [r7, #10]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8003e3a:	4940      	ldr	r1, [pc, #256]	; (8003f3c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff ff47 	bl	8003cd0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8003e42:	e075      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8003e44:	493e      	ldr	r1, [pc, #248]	; (8003f40 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff ff42 	bl	8003cd0 <u8x8_cad_SendSequence>
      break;
 8003e4c:	e070      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003e4e:	7abb      	ldrb	r3, [r7, #10]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8003e54:	493b      	ldr	r1, [pc, #236]	; (8003f44 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff ff3a 	bl	8003cd0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	7c9a      	ldrb	r2, [r3, #18]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003e68:	e062      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8003e6a:	4937      	ldr	r1, [pc, #220]	; (8003f48 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ff2f 	bl	8003cd0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	7cda      	ldrb	r2, [r3, #19]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003e7e:	e057      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff05 	bl	8003c90 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003e86:	2181      	movs	r1, #129	; 0x81
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff feca 	bl	8003c22 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003e8e:	7abb      	ldrb	r3, [r7, #10]
 8003e90:	4619      	mov	r1, r3
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fed7 	bl	8003c46 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ff09 	bl	8003cb0 <u8x8_cad_EndTransfer>
      break;
 8003e9e:	e047      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fef5 	bl	8003c90 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	795b      	ldrb	r3, [r3, #5]
 8003eaa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	4413      	add	r3, r2
 8003ebc:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff feae 	bl	8003c22 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0310 	orr.w	r3, r3, #16
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fea4 	bl	8003c22 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff feae 	bl	8003c46 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	799b      	ldrb	r3, [r3, #6]
 8003eee:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fea5 	bl	8003c46 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003f08:	7dbb      	ldrb	r3, [r7, #22]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4619      	mov	r1, r3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fea9 	bl	8003c6a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8003f18:	7abb      	ldrb	r3, [r7, #10]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003f1e:	7abb      	ldrb	r3, [r7, #10]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1eb      	bne.n	8003efc <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fec3 	bl	8003cb0 <u8x8_cad_EndTransfer>
      break;
 8003f2a:	e001      	b.n	8003f30 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8003f30:	2301      	movs	r3, #1
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	080042bc 	.word	0x080042bc
 8003f40:	080042c4 	.word	0x080042c4
 8003f44:	080042cc 	.word	0x080042cc
 8003f48:	080042d4 	.word	0x080042d4

08003f4c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	72fb      	strb	r3, [r7, #11]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003f5e:	7aba      	ldrb	r2, [r7, #10]
 8003f60:	7af9      	ldrb	r1, [r7, #11]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ff49 	bl	8003dfc <u8x8_d_ssd1306_sh1106_generic>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e014      	b.n	8003f9e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d009      	beq.n	8003f8e <u8x8_d_ssd1306_128x64_noname+0x42>
 8003f7a:	2b0a      	cmp	r3, #10
 8003f7c:	d10c      	bne.n	8003f98 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f82a 	bl	8003fd8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003f84:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fea2 	bl	8003cd0 <u8x8_cad_SendSequence>
      break;
 8003f8c:	e006      	b.n	8003f9c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003f8e:	4907      	ldr	r1, [pc, #28]	; (8003fac <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f80d 	bl	8003fb0 <u8x8_d_helper_display_setup_memory>
      break;
 8003f96:	e001      	b.n	8003f9c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8003f9c:	2301      	movs	r3, #1
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08004284 	.word	0x08004284
 8003fac:	080042dc 	.word	0x080042dc

08003fb0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	7c9a      	ldrb	r2, [r3, #18]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695c      	ldr	r4, [r3, #20]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2128      	movs	r1, #40	; 0x28
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68dc      	ldr	r4, [r3, #12]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2114      	movs	r1, #20
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	214b      	movs	r1, #75	; 0x4b
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f886 	bl	8004112 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	461a      	mov	r2, r3
 800400e:	2129      	movs	r1, #41	; 0x29
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f87e 	bl	8004112 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	214b      	movs	r1, #75	; 0x4b
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f879 	bl	8004112 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	791b      	ldrb	r3, [r3, #4]
 8004026:	461a      	mov	r2, r3
 8004028:	2129      	movs	r1, #41	; 0x29
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f871 	bl	8004112 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004030:	2201      	movs	r2, #1
 8004032:	214b      	movs	r1, #75	; 0x4b
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f86c 	bl	8004112 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	795b      	ldrb	r3, [r3, #5]
 8004040:	461a      	mov	r2, r3
 8004042:	2129      	movs	r1, #41	; 0x29
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f864 	bl	8004112 <u8x8_gpio_call>
}    
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	461a      	mov	r2, r3
 8004060:	4603      	mov	r3, r0
 8004062:	70fb      	strb	r3, [r7, #3]
 8004064:	460b      	mov	r3, r1
 8004066:	70bb      	strb	r3, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689c      	ldr	r4, [r3, #8]
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	2201      	movs	r2, #1
 8004086:	210f      	movs	r1, #15
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	47a0      	blx	r4
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bd90      	pop	{r4, r7, pc}

08004096 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004096:	b590      	push	{r4, r7, lr}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689c      	ldr	r4, [r3, #8]
 80040a2:	2300      	movs	r3, #0
 80040a4:	2200      	movs	r2, #0
 80040a6:	2109      	movs	r1, #9
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	47a0      	blx	r4
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd90      	pop	{r4, r7, pc}

080040b4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689c      	ldr	r4, [r3, #8]
 80040c0:	2300      	movs	r3, #0
 80040c2:	2200      	movs	r2, #0
 80040c4:	210a      	movs	r1, #10
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd90      	pop	{r4, r7, pc}

080040d2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80040d2:	b590      	push	{r4, r7, lr}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689c      	ldr	r4, [r3, #8]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	2300      	movs	r3, #0
 80040e6:	210b      	movs	r1, #11
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	47a0      	blx	r4
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689c      	ldr	r4, [r3, #8]
 8004100:	2300      	movs	r3, #0
 8004102:	2200      	movs	r2, #0
 8004104:	2110      	movs	r1, #16
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	47a0      	blx	r4
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}

08004112 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004112:	b590      	push	{r4, r7, lr}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
 800411e:	4613      	mov	r3, r2
 8004120:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695c      	ldr	r4, [r3, #20]
 8004126:	78ba      	ldrb	r2, [r7, #2]
 8004128:	78f9      	ldrb	r1, [r7, #3]
 800412a:	2300      	movs	r3, #0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	47a0      	blx	r4
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	72fb      	strb	r3, [r7, #11]
 8004146:	4613      	mov	r3, r2
 8004148:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <u8x8_SetupDefaults+0x58>)
 800416a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <u8x8_SetupDefaults+0x58>)
 8004170:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <u8x8_SetupDefaults+0x58>)
 8004176:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <u8x8_SetupDefaults+0x58>)
 800417c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	22ff      	movs	r2, #255	; 0xff
 80041a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	08004139 	.word	0x08004139

080041b4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ffc8 	bl	8004158 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff ff58 	bl	8004096 <u8x8_SetupMemory>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4d0d      	ldr	r5, [pc, #52]	; (8004228 <__libc_init_array+0x38>)
 80041f4:	4c0d      	ldr	r4, [pc, #52]	; (800422c <__libc_init_array+0x3c>)
 80041f6:	1b64      	subs	r4, r4, r5
 80041f8:	10a4      	asrs	r4, r4, #2
 80041fa:	2600      	movs	r6, #0
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	4d0b      	ldr	r5, [pc, #44]	; (8004230 <__libc_init_array+0x40>)
 8004202:	4c0c      	ldr	r4, [pc, #48]	; (8004234 <__libc_init_array+0x44>)
 8004204:	f000 f820 	bl	8004248 <_init>
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	2600      	movs	r6, #0
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f855 3b04 	ldr.w	r3, [r5], #4
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	080042fc 	.word	0x080042fc
 800422c:	080042fc 	.word	0x080042fc
 8004230:	080042fc 	.word	0x080042fc
 8004234:	08004300 	.word	0x08004300

08004238 <memset>:
 8004238:	4402      	add	r2, r0
 800423a:	4603      	mov	r3, r0
 800423c:	4293      	cmp	r3, r2
 800423e:	d100      	bne.n	8004242 <memset+0xa>
 8004240:	4770      	bx	lr
 8004242:	f803 1b01 	strb.w	r1, [r3], #1
 8004246:	e7f9      	b.n	800423c <memset+0x4>

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
