
ADC_with_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005618  08005618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000085c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001152a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e1  00000000  00000000  000315ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002647d  00000000  00000000  000353d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f806  00000000  00000000  0005b855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e85d6  00000000  00000000  0006b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153631  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a0  00000000  00000000  00153684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005538 	.word	0x08005538

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005538 	.word	0x08005538

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	230a      	movs	r3, #10
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <_write+0x24>)
 80005aa:	f003 f98e 	bl	80038ca <HAL_UART_Transmit>
	return len;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000035c 	.word	0x2000035c

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fd59 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f821 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f9a1 	bl	8000910 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 f97f 	bl	80008d0 <MX_DMA_Init>
  MX_ETH_Init();
 80005d2:	f000 f8d7 	bl	8000784 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f923 	bl	8000820 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005da:	f000 f94b 	bl	8000874 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005de:	f000 f87f 	bl	80006e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adcval[0] , 1);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <main+0x48>)
 80005ea:	f000 fe1f 	bl	800122c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("%4d \n\r",adcval[0]);
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <main+0x4c>)
 80005f6:	f004 f811 	bl	800461c <iprintf>
	  HAL_Delay(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fdad 	bl	800115c <HAL_Delay>
	  printf("%4d \n\r",adcval[0]);
 8000602:	e7f4      	b.n	80005ee <main+0x32>
 8000604:	20000204 	.word	0x20000204
 8000608:	08005550 	.word	0x08005550

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fff6 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fc35 	bl	8002f00 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f9e6 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fe96 	bl	80033f0 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f9cf 	bl	8000a6c <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC1_Init+0x98>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <MX_ADC1_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ADC1_Init+0x98>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_ADC1_Init+0x98>)
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_ADC1_Init+0xa0>)
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ADC1_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC1_Init+0x98>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_ADC1_Init+0x98>)
 8000742:	f000 fd2f 	bl	80011a4 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 f98e 	bl	8000a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000750:	2309      	movs	r3, #9
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000758:	2304      	movs	r3, #4
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_ADC1_Init+0x98>)
 8000762:	f000 fe91 	bl	8001488 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 f97e 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000204 	.word	0x20000204
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ETH_Init+0x84>)
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <MX_ETH_Init+0x88>)
 800078c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_ETH_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ETH_Init+0x8c>)
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ETH_Init+0x8c>)
 800079c:	22e1      	movs	r2, #225	; 0xe1
 800079e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ETH_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_ETH_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ETH_Init+0x84>)
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <MX_ETH_Init+0x8c>)
 80007b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_ETH_Init+0x84>)
 80007ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007be:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ETH_Init+0x84>)
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <MX_ETH_Init+0x90>)
 80007c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_ETH_Init+0x84>)
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_ETH_Init+0x94>)
 80007ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_ETH_Init+0x84>)
 80007ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_ETH_Init+0x84>)
 80007d6:	f001 fd89 	bl	80022ec <HAL_ETH_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007e0:	f000 f944 	bl	8000a6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e4:	2238      	movs	r2, #56	; 0x38
 80007e6:	2100      	movs	r1, #0
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_ETH_Init+0x98>)
 80007ea:	f003 ff0f 	bl	800460c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_ETH_Init+0x98>)
 80007f0:	2221      	movs	r2, #33	; 0x21
 80007f2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_ETH_Init+0x98>)
 80007f6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007fa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_ETH_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002ac 	.word	0x200002ac
 800080c:	40028000 	.word	0x40028000
 8000810:	200008ac 	.word	0x200008ac
 8000814:	20000164 	.word	0x20000164
 8000818:	200000c4 	.word	0x200000c4
 800081c:	2000008c 	.word	0x2000008c

08000820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART3_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART3_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART3_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART3_UART_Init+0x4c>)
 8000858:	f002 ffea 	bl	8003830 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f903 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000035c 	.word	0x2000035c
 8000870:	40004800 	.word	0x40004800

08000874 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2204      	movs	r2, #4
 8000884:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2202      	movs	r2, #2
 800088a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2202      	movs	r2, #2
 8000896:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2201      	movs	r2, #1
 800089c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	f002 fa05 	bl	8002cc6 <HAL_PCD_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f8d3 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200003a0 	.word	0x200003a0

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_DMA_Init+0x3c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <MX_DMA_Init+0x3c>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_DMA_Init+0x3c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2038      	movs	r0, #56	; 0x38
 80008f8:	f001 f951 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008fc:	2038      	movs	r0, #56	; 0x38
 80008fe:	f001 f96a 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a4b      	ldr	r2, [pc, #300]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b49      	ldr	r3, [pc, #292]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a44      	ldr	r2, [pc, #272]	; (8000a5c <MX_GPIO_Init+0x14c>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a3d      	ldr	r2, [pc, #244]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a36      	ldr	r2, [pc, #216]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_GPIO_Init+0x14c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a28      	ldr	r2, [pc, #160]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d4:	4822      	ldr	r0, [pc, #136]	; (8000a60 <MX_GPIO_Init+0x150>)
 80009d6:	f002 f95d 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	4821      	ldr	r0, [pc, #132]	; (8000a64 <MX_GPIO_Init+0x154>)
 80009e0:	f002 f958 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	481b      	ldr	r0, [pc, #108]	; (8000a68 <MX_GPIO_Init+0x158>)
 80009fc:	f001 ff9e 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0x150>)
 8000a1a:	f001 ff8f 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0x154>)
 8000a36:	f001 ff81 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_GPIO_Init+0x154>)
 8000a4e:	f001 ff75 	bl	800293c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40020800 	.word	0x40020800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <HAL_ADC_MspInit+0xdc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d157      	bne.n	8000b9a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <HAL_ADC_MspInit+0xe0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b22:	2302      	movs	r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <HAL_ADC_MspInit+0xe4>)
 8000b36:	f001 ff01 	bl	800293c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0xec>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b80:	f001 f844 	bl	8001c0c <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b8a:	f7ff ff6f 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b92:	639a      	str	r2, [r3, #56]	; 0x38
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_ADC_MspInit+0xe8>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40012000 	.word	0x40012000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	2000024c 	.word	0x2000024c
 8000bb4:	40026410 	.word	0x40026410

08000bb8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a55      	ldr	r2, [pc, #340]	; (8000d2c <HAL_ETH_MspInit+0x174>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f040 80a4 	bne.w	8000d24 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a44      	ldr	r2, [pc, #272]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca0:	2332      	movs	r3, #50	; 0x32
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <HAL_ETH_MspInit+0x17c>)
 8000cbc:	f001 fe3e 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc0:	2386      	movs	r3, #134	; 0x86
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_ETH_MspInit+0x180>)
 8000cdc:	f001 fe2e 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <HAL_ETH_MspInit+0x184>)
 8000cfe:	f001 fe1d 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_ETH_MspInit+0x188>)
 8000d20:	f001 fe0c 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dbc:	f001 fdbe 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df4:	d13f      	bne.n	8000e76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <HAL_PCD_MspInit+0xb0>)
 8000e30:	f001 fd84 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <HAL_PCD_MspInit+0xb0>)
 8000e4a:	f001 fd77 	bl	800293c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f922 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA2_Stream0_IRQHandler+0x10>)
 8000ee2:	f000 ff99 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000024c 	.word	0x2000024c

08000ef0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
  }

  return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
  return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f003 faf8 	bl	80045b8 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20030000 	.word	0x20030000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	200008b4 	.word	0x200008b4
 8000ffc:	200008d0 	.word	0x200008d0

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fab7 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fab1 	bl	80005bc <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800105c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001068:	08005620 	.word	0x08005620
  ldr r2, =_sbss
 800106c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001070:	200008cc 	.word	0x200008cc

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fd71 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fce4 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fd89 	bl	8001bf2 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 fd51 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	200008b8 	.word	0x200008b8

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200008b8 	.word	0x200008b8

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e033      	b.n	8001222 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fc80 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ea:	f023 0302 	bic.w	r3, r3, #2
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fa78 	bl	80016ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
 8001212:	e001      	b.n	8001218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_Start_DMA+0x1e>
 8001246:	2302      	movs	r3, #2
 8001248:	e0e9      	b.n	800141e <HAL_ADC_Start_DMA+0x1f2>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d018      	beq.n	8001292 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001270:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_ADC_Start_DMA+0x1fc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6d      	ldr	r2, [pc, #436]	; (800142c <HAL_ADC_Start_DMA+0x200>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9a      	lsrs	r2, r3, #18
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001284:	e002      	b.n	800128c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	3b01      	subs	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d107      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f040 80a1 	bne.w	8001404 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001300:	d106      	bne.n	8001310 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f023 0206 	bic.w	r2, r3, #6
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
 800130e:	e002      	b.n	8001316 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_ADC_Start_DMA+0x204>)
 8001320:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	4a43      	ldr	r2, [pc, #268]	; (8001434 <HAL_ADC_Start_DMA+0x208>)
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a42      	ldr	r2, [pc, #264]	; (8001438 <HAL_ADC_Start_DMA+0x20c>)
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	4a41      	ldr	r2, [pc, #260]	; (800143c <HAL_ADC_Start_DMA+0x210>)
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001342:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001352:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001362:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	334c      	adds	r3, #76	; 0x4c
 800136e:	4619      	mov	r1, r3
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f000 fcf8 	bl	8001d68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	2b00      	cmp	r3, #0
 8001382:	d12a      	bne.n	80013da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <HAL_ADC_Start_DMA+0x214>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d015      	beq.n	80013ba <HAL_ADC_Start_DMA+0x18e>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <HAL_ADC_Start_DMA+0x218>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d105      	bne.n	80013a4 <HAL_ADC_Start_DMA+0x178>
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_ADC_Start_DMA+0x204>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_ADC_Start_DMA+0x21c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d136      	bne.n	800141c <HAL_ADC_Start_DMA+0x1f0>
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_ADC_Start_DMA+0x204>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d130      	bne.n	800141c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d129      	bne.n	800141c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	e020      	b.n	800141c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_ADC_Start_DMA+0x214>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d11b      	bne.n	800141c <HAL_ADC_Start_DMA+0x1f0>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d114      	bne.n	800141c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	e00b      	b.n	800141c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f043 0210 	orr.w	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000
 800142c:	431bde83 	.word	0x431bde83
 8001430:	40012300 	.word	0x40012300
 8001434:	080018e5 	.word	0x080018e5
 8001438:	0800199f 	.word	0x0800199f
 800143c:	080019bb 	.word	0x080019bb
 8001440:	40012000 	.word	0x40012000
 8001444:	40012100 	.word	0x40012100
 8001448:	40012200 	.word	0x40012200

0800144c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e113      	b.n	80016cc <HAL_ADC_ConfigChannel+0x244>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d925      	bls.n	8001500 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68d9      	ldr	r1, [r3, #12]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	3b1e      	subs	r3, #30
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68d9      	ldr	r1, [r3, #12]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4403      	add	r3, r0
 80014f2:	3b1e      	subs	r3, #30
 80014f4:	409a      	lsls	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	e022      	b.n	8001546 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6919      	ldr	r1, [r3, #16]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	2207      	movs	r2, #7
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4403      	add	r3, r0
 800153c:	409a      	lsls	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b06      	cmp	r3, #6
 800154c:	d824      	bhi.n	8001598 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b05      	subs	r3, #5
 8001560:	221f      	movs	r2, #31
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b05      	subs	r3, #5
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
 8001596:	e04c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	d824      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b23      	subs	r3, #35	; 0x23
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b23      	subs	r3, #35	; 0x23
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
 80015e8:	e023      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b41      	subs	r3, #65	; 0x41
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b41      	subs	r3, #65	; 0x41
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_ADC_ConfigChannel+0x250>)
 8001634:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_ADC_ConfigChannel+0x254>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d10f      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d8>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_ADC_ConfigChannel+0x254>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_ADC_ConfigChannel+0x258>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d003      	beq.n	800167c <HAL_ADC_ConfigChannel+0x1f4>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b11      	cmp	r3, #17
 800167a:	d122      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_ADC_ConfigChannel+0x258>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d111      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_ConfigChannel+0x25c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_ADC_ConfigChannel+0x260>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9a      	lsrs	r2, r3, #18
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b4:	e002      	b.n	80016bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f9      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40012300 	.word	0x40012300
 80016dc:	40012000 	.word	0x40012000
 80016e0:	10000012 	.word	0x10000012
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <ADC_Init+0x1f0>)
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	021a      	lsls	r2, r3, #8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6899      	ldr	r1, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <ADC_Init+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e00f      	b.n	80017ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0202 	bic.w	r2, r2, #2
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
 8001804:	005a      	lsls	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001826:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	035a      	lsls	r2, r3, #13
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	e007      	b.n	8001860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	3b01      	subs	r3, #1
 800187c:	051a      	lsls	r2, r3, #20
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	029a      	lsls	r2, r3, #10
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40012300 	.word	0x40012300
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13c      	bne.n	8001978 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d12b      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d127      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001938:	2b00      	cmp	r3, #0
 800193a:	d119      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0220 	bic.w	r2, r2, #32
 800194a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fd6b 	bl	800144c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001976:	e00e      	b.n	8001996 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fd75 	bl	8001474 <HAL_ADC_ErrorCallback>
}
 800198a:	e004      	b.n	8001996 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fd57 	bl	8001460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f043 0204 	orr.w	r2, r3, #4
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fd4a 	bl	8001474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff3e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff31 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fa94 	bl	8001144 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e099      	b.n	8001d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e00f      	b.n	8001c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff fa7b 	bl	8001144 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d908      	bls.n	8001c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e078      	b.n	8001d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e8      	bne.n	8001c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_DMA_Init+0x158>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0307 	bic.w	r3, r3, #7
 8001cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d117      	bne.n	8001d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa6f 	bl	80021f4 <DMA_CheckFifoParam>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa26 	bl	8002188 <DMA_CalcBaseAndBitshift>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f010803f 	.word	0xf010803f

08001d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_DMA_Start_IT+0x26>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e040      	b.n	8001e10 <HAL_DMA_Start_IT+0xa8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12f      	bne.n	8001e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9b8 	bl	800212c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0216 	orr.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0208 	orr.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e24:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <HAL_DMA_IRQHandler+0x248>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a8e      	ldr	r2, [pc, #568]	; (8002064 <HAL_DMA_IRQHandler+0x24c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01a      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2208      	movs	r2, #8
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2204      	movs	r2, #4
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2210      	movs	r2, #16
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
 8001f46:	e01f      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 808f 	beq.w	80020b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8087 	beq.w	80020b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2220      	movs	r2, #32
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d136      	bne.n	8002030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x1da>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	223f      	movs	r2, #63	; 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d07e      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
        }
        return;
 800202e:	e079      	b.n	8002124 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01d      	beq.n	800207a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	2b00      	cmp	r3, #0
 8002052:	d031      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e02c      	b.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000
 8002064:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
 8002078:	e01e      	b.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10f      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0210 	bic.w	r2, r2, #16
 8002096:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d032      	beq.n	8002126 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d022      	beq.n	8002112 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2205      	movs	r2, #5
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3301      	adds	r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d307      	bcc.n	8002100 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f2      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x2cc>
 80020fe:	e000      	b.n	8002102 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002100:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e000      	b.n	8002126 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002124:	bf00      	nop
    }
  }
}
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3b10      	subs	r3, #16
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <DMA_CalcBaseAndBitshift+0x64>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <DMA_CalcBaseAndBitshift+0x68>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d909      	bls.n	80021ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
 80021c8:	e007      	b.n	80021da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	aaaaaaab 	.word	0xaaaaaaab
 80021f0:	08005570 	.word	0x08005570

080021f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11f      	bne.n	800224e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d856      	bhi.n	80022c2 <DMA_CheckFifoParam+0xce>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <DMA_CheckFifoParam+0x28>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800223f 	.word	0x0800223f
 8002224:	0800222d 	.word	0x0800222d
 8002228:	080022c3 	.word	0x080022c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d046      	beq.n	80022c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e043      	b.n	80022c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002246:	d140      	bne.n	80022ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e03d      	b.n	80022ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002256:	d121      	bne.n	800229c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d837      	bhi.n	80022ce <DMA_CheckFifoParam+0xda>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <DMA_CheckFifoParam+0x70>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227b 	.word	0x0800227b
 800226c:	08002275 	.word	0x08002275
 8002270:	0800228d 	.word	0x0800228d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      break;
 8002278:	e030      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d025      	beq.n	80022d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228a:	e022      	b.n	80022d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002294:	d11f      	bne.n	80022d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229a:	e01c      	b.n	80022d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d903      	bls.n	80022aa <DMA_CheckFifoParam+0xb6>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d003      	beq.n	80022b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a8:	e018      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
      break;
 80022ae:	e015      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e00b      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022c2:	bf00      	nop
 80022c4:	e00a      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e008      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e006      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e004      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e002      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;   
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
    }
  } 
  
  return status; 
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06c      	b.n	80023d8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2223      	movs	r2, #35	; 0x23
 800230c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe fc51 	bl	8000bb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_ETH_Init+0xf4>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <HAL_ETH_Init+0xf4>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_ETH_Init+0xf4>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_ETH_Init+0xf8>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <HAL_ETH_Init+0xf8>)
 8002338:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800233c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_ETH_Init+0xf8>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <HAL_ETH_Init+0xf8>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_ETH_Init+0xf8>)
 800234e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002366:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7fe feec 	bl	8001144 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800236e:	e011      	b.n	8002394 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002370:	f7fe fee8 	bl	8001144 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800237e:	d909      	bls.n	8002394 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	22e0      	movs	r2, #224	; 0xe0
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e021      	b.n	80023d8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e4      	bne.n	8002370 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f958 	bl	800265c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f9ff 	bl	80027b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa55 	bl	8002862 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f9bd 	bl	8002740 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2210      	movs	r2, #16
 80023d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800

080023e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <ETH_SetMACConfig+0x15c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7c1b      	ldrb	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetMACConfig+0x28>
 800240a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800240e:	e000      	b.n	8002412 <ETH_SetMACConfig+0x2a>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7c5b      	ldrb	r3, [r3, #17]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <ETH_SetMACConfig+0x38>
 800241a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241e:	e000      	b.n	8002422 <ETH_SetMACConfig+0x3a>
 8002420:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002422:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7fdb      	ldrb	r3, [r3, #31]
 800242e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002430:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	7f92      	ldrb	r2, [r2, #30]
 800243c:	2a00      	cmp	r2, #0
 800243e:	d102      	bne.n	8002446 <ETH_SetMACConfig+0x5e>
 8002440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002444:	e000      	b.n	8002448 <ETH_SetMACConfig+0x60>
 8002446:	2200      	movs	r2, #0
                        macconf->Speed |
 8002448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7f1b      	ldrb	r3, [r3, #28]
 800244e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002450:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002456:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800245e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002466:	2a00      	cmp	r2, #0
 8002468:	d102      	bne.n	8002470 <ETH_SetMACConfig+0x88>
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	e000      	b.n	8002472 <ETH_SetMACConfig+0x8a>
 8002470:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002472:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7bdb      	ldrb	r3, [r3, #15]
 8002478:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800247a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002480:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002488:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800248a:	4313      	orrs	r3, r2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7fe fe5a 	bl	800115c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0xee>
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0xf0>
 80024d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024e6:	2a01      	cmp	r2, #1
 80024e8:	d101      	bne.n	80024ee <ETH_SetMACConfig+0x106>
 80024ea:	2208      	movs	r2, #8
 80024ec:	e000      	b.n	80024f0 <ETH_SetMACConfig+0x108>
 80024ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024f8:	2a01      	cmp	r2, #1
 80024fa:	d101      	bne.n	8002500 <ETH_SetMACConfig+0x118>
 80024fc:	2204      	movs	r2, #4
 80024fe:	e000      	b.n	8002502 <ETH_SetMACConfig+0x11a>
 8002500:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800250a:	2a01      	cmp	r2, #1
 800250c:	d101      	bne.n	8002512 <ETH_SetMACConfig+0x12a>
 800250e:	2202      	movs	r2, #2
 8002510:	e000      	b.n	8002514 <ETH_SetMACConfig+0x12c>
 8002512:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002514:	4313      	orrs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252c:	2001      	movs	r0, #1
 800252e:	f7fe fe15 	bl	800115c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	ff20810f 	.word	0xff20810f

08002548 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <ETH_SetDMAConfig+0x110>)
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7b1b      	ldrb	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <ETH_SetDMAConfig+0x2c>
 800256e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002572:	e000      	b.n	8002576 <ETH_SetDMAConfig+0x2e>
 8002574:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7b5b      	ldrb	r3, [r3, #13]
 800257a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800257c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	7f52      	ldrb	r2, [r2, #29]
 8002582:	2a00      	cmp	r2, #0
 8002584:	d102      	bne.n	800258c <ETH_SetDMAConfig+0x44>
 8002586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800258a:	e000      	b.n	800258e <ETH_SetDMAConfig+0x46>
 800258c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800258e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	7b9b      	ldrb	r3, [r3, #14]
 8002594:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002596:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800259c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	7f9b      	ldrb	r3, [r3, #30]
 80025aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025bc:	4313      	orrs	r3, r2
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fdbc 	bl	800115c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002602:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002608:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002610:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002612:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800261a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002620:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800262a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe fd8d 	bl	800115c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	f8de3f23 	.word	0xf8de3f23

0800265c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0a6      	sub	sp, #152	; 0x98
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002698:	2300      	movs	r3, #0
 800269a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fe86 	bl	80023e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026dc:	2301      	movs	r3, #1
 80026de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002708:	2301      	movs	r3, #1
 800270a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800270c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002710:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002716:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002724:	2300      	movs	r3, #0
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff08 	bl	8002548 <ETH_SetDMAConfig>
}
 8002738:	bf00      	nop
 800273a:	3798      	adds	r7, #152	; 0x98
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3305      	adds	r3, #5
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	3204      	adds	r2, #4
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <ETH_MACAddressConfig+0x68>)
 8002762:	4413      	add	r3, r2
 8002764:	461a      	mov	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3303      	adds	r3, #3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	061a      	lsls	r2, r3, #24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3302      	adds	r3, #2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3301      	adds	r3, #1
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	4313      	orrs	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <ETH_MACAddressConfig+0x6c>)
 8002792:	4413      	add	r3, r2
 8002794:	461a      	mov	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	6013      	str	r3, [r2, #0]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40028040 	.word	0x40028040
 80027ac:	40028044 	.word	0x40028044

080027b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e03e      	b.n	800283c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	3206      	adds	r2, #6
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d80c      	bhi.n	8002820 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e004      	b.n	800282a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d9bd      	bls.n	80027be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002854:	611a      	str	r2, [r3, #16]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e046      	b.n	80028fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	3212      	adds	r2, #18
 80028ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d80c      	bhi.n	80028ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e004      	b.n	80028f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d9b5      	bls.n	8002870 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	60da      	str	r2, [r3, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e177      	b.n	8002c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 8166 	bne.w	8002c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	2b02      	cmp	r3, #2
 800298c:	d130      	bne.n	80029f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 0201 	and.w	r2, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d017      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	69b9      	ldr	r1, [r7, #24]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80c0 	beq.w	8002c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_GPIO_Init+0x32c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d037      	beq.n	8002b7a <HAL_GPIO_Init+0x23e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_GPIO_Init+0x330>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d031      	beq.n	8002b76 <HAL_GPIO_Init+0x23a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x236>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_GPIO_Init+0x338>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x232>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_GPIO_Init+0x33c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x22e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a53      	ldr	r2, [pc, #332]	; (8002c7c <HAL_GPIO_Init+0x340>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x22a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_GPIO_Init+0x344>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a51      	ldr	r2, [pc, #324]	; (8002c84 <HAL_GPIO_Init+0x348>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x222>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_GPIO_Init+0x34c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x21e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_GPIO_Init+0x350>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b52:	2309      	movs	r3, #9
 8002b54:	e012      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b56:	230a      	movs	r3, #10
 8002b58:	e010      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	e00e      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e00c      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b62:	2306      	movs	r3, #6
 8002b64:	e00a      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e008      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e004      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x240>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f002 0203 	and.w	r2, r2, #3
 8002b82:	0092      	lsls	r2, r2, #2
 8002b84:	4093      	lsls	r3, r2
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b8c:	4935      	ldr	r1, [pc, #212]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_GPIO_Init+0x354>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	f67f ae84 	bls.w	8002958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021400 	.word	0x40021400
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40021c00 	.word	0x40021c00
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022400 	.word	0x40022400
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc8:	b08f      	sub	sp, #60	; 0x3c
 8002cca:	af0a      	add	r7, sp, #40	; 0x28
 8002ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e10f      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f86e 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f9ad 	bl	8004076 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	687e      	ldr	r6, [r7, #4]
 8002d24:	466d      	mov	r5, sp
 8002d26:	f106 0410 	add.w	r4, r6, #16
 8002d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d3a:	1d33      	adds	r3, r6, #4
 8002d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f001 f938 	bl	8003fb4 <USB_CoreInit>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0d0      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 f99b 	bl	8004098 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e04a      	b.n	8002dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	333d      	adds	r3, #61	; 0x3d
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	b298      	uxth	r0, r3
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3344      	adds	r3, #68	; 0x44
 8002da4:	4602      	mov	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3340      	adds	r3, #64	; 0x40
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3348      	adds	r3, #72	; 0x48
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	; 0x4c
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3354      	adds	r3, #84	; 0x54
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3af      	bcc.n	8002d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e044      	b.n	8002e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3301      	adds	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b5      	bcc.n	8002e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	687e      	ldr	r6, [r7, #4]
 8002eaa:	466d      	mov	r5, sp
 8002eac:	f106 0410 	add.w	r4, r6, #16
 8002eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec0:	1d33      	adds	r3, r6, #4
 8002ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f001 f933 	bl	8004130 <USB_DevInit>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e00d      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fafe 	bl	80044f2 <USB_DevDisconnect>

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e267      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d075      	beq.n	800300a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4b85      	ldr	r3, [pc, #532]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d112      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b82      	ldr	r3, [pc, #520]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d05b      	beq.n	8003008 <HAL_RCC_OscConfig+0x108>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d157      	bne.n	8003008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e242      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x74>
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e01d      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b70      	ldr	r3, [pc, #448]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6f      	ldr	r2, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6c      	ldr	r2, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f98:	4b69      	ldr	r3, [pc, #420]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a68      	ldr	r2, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f8c4 	bl	8001144 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f8c0 	bl	8001144 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e207      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xc0>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f8b0 	bl	8001144 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe f8ac 	bl	8001144 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1f3      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	4b51      	ldr	r3, [pc, #324]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xe8>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d063      	beq.n	80030de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	2b08      	cmp	r3, #8
 800302c:	d11c      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e1c7      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4937      	ldr	r1, [pc, #220]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	e03a      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003070:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_OscConfig+0x244>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe f865 	bl	8001144 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307e:	f7fe f861 	bl	8001144 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1a8      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4925      	ldr	r1, [pc, #148]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_RCC_OscConfig+0x244>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f844 	bl	8001144 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c0:	f7fe f840 	bl	8001144 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e187      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d036      	beq.n	8003158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x248>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe f824 	bl	8001144 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003100:	f7fe f820 	bl	8001144 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e167      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x200>
 800311e:	e01b      	b.n	8003158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_OscConfig+0x248>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe f80d 	bl	8001144 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	e00e      	b.n	800314c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe f809 	bl	8001144 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d907      	bls.n	800314c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e150      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	42470000 	.word	0x42470000
 8003148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ea      	bne.n	800312e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8097 	beq.w	8003294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a7c      	ldr	r2, [pc, #496]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	4b74      	ldr	r3, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a73      	ldr	r2, [pc, #460]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fd ffc9 	bl	8001144 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fd ffc5 	bl	8001144 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e10c      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x2ea>
 80031dc:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x324>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x30c>
 80031f2:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b5c      	ldr	r3, [pc, #368]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a5b      	ldr	r2, [pc, #364]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0x324>
 800320c:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a54      	ldr	r2, [pc, #336]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800321e:	f023 0304 	bic.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d015      	beq.n	8003258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd ff8a 	bl	8001144 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fd ff86 	bl	8001144 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0cb      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ee      	beq.n	8003234 <HAL_RCC_OscConfig+0x334>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7fd ff74 	bl	8001144 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fd ff70 	bl	8001144 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0b5      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ee      	bne.n	8003260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b39      	ldr	r3, [pc, #228]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	4a38      	ldr	r2, [pc, #224]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a1 	beq.w	80033e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d05c      	beq.n	8003364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d141      	bne.n	8003336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff44 	bl	8001144 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff40 	bl	8001144 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e087      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	491b      	ldr	r1, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fd ff19 	bl	8001144 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fd ff15 	bl	8001144 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e05c      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x416>
 8003334:	e054      	b.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd ff02 	bl	8001144 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fefe 	bl	8001144 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e045      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
 8003362:	e03d      	b.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e038      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
 8003378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x4ec>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d028      	beq.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d121      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d11a      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ac:	4013      	ands	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	3b01      	subs	r3, #1
 80033c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0cc      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d90c      	bls.n	800342c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d119      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e06f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e067      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fe30 	bl	8001144 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd fe2c 	bl	8001144 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20c      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fd90 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08005558 	.word	0x08005558
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b094      	sub	sp, #80	; 0x50
 80035c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
 80035c8:	2300      	movs	r3, #0
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	2300      	movs	r3, #0
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d4:	4b79      	ldr	r3, [pc, #484]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d00d      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	f200 80e1 	bhi.w	80037a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ee:	e0db      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035f4:	e0db      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4b73      	ldr	r3, [pc, #460]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fa:	e0d8      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d063      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	2200      	movs	r2, #0
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
 800361c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
 8003626:	2300      	movs	r3, #0
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
 800362a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4621      	mov	r1, r4
 8003648:	1a51      	subs	r1, r2, r1
 800364a:	6139      	str	r1, [r7, #16]
 800364c:	4629      	mov	r1, r5
 800364e:	eb63 0301 	sbc.w	r3, r3, r1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003660:	4659      	mov	r1, fp
 8003662:	018b      	lsls	r3, r1, #6
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366a:	4651      	mov	r1, sl
 800366c:	018a      	lsls	r2, r1, #6
 800366e:	4651      	mov	r1, sl
 8003670:	ebb2 0801 	subs.w	r8, r2, r1
 8003674:	4659      	mov	r1, fp
 8003676:	eb63 0901 	sbc.w	r9, r3, r1
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368e:	4690      	mov	r8, r2
 8003690:	4699      	mov	r9, r3
 8003692:	4623      	mov	r3, r4
 8003694:	eb18 0303 	adds.w	r3, r8, r3
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	462b      	mov	r3, r5
 800369c:	eb49 0303 	adc.w	r3, r9, r3
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ae:	4629      	mov	r1, r5
 80036b0:	024b      	lsls	r3, r1, #9
 80036b2:	4621      	mov	r1, r4
 80036b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b8:	4621      	mov	r1, r4
 80036ba:	024a      	lsls	r2, r1, #9
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	2200      	movs	r2, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036cc:	f7fc fde0 	bl	8000290 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d8:	e058      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	4611      	mov	r1, r2
 80036e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	f04f 0000 	mov.w	r0, #0
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	0159      	lsls	r1, r3, #5
 8003702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003706:	0150      	lsls	r0, r2, #5
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4641      	mov	r1, r8
 800370e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003712:	4649      	mov	r1, r9
 8003714:	eb63 0b01 	sbc.w	fp, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800372c:	ebb2 040a 	subs.w	r4, r2, sl
 8003730:	eb63 050b 	sbc.w	r5, r3, fp
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	464b      	mov	r3, r9
 8003750:	eb45 0303 	adc.w	r3, r5, r3
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003776:	2200      	movs	r2, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003780:	f7fc fd86 	bl	8000290 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	3301      	adds	r3, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800379c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800379e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a6:	e002      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3750      	adds	r7, #80	; 0x50
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	08005568 	.word	0x08005568

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	08005568 	.word	0x08005568

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fa74 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f929 	bl	8003acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08a      	sub	sp, #40	; 0x28
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d17c      	bne.n	80039e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Transmit+0x2c>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e075      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x3e>
 8003904:	2302      	movs	r3, #2
 8003906:	e06e      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391e:	f7fd fc11 	bl	8001144 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x82>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800395c:	e02a      	b.n	80039b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f840 	bl	80039ee <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cf      	bne.n	800395e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f810 	bl	80039ee <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b090      	sub	sp, #64	; 0x40
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fe:	e050      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d04c      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0e:	f7fd fb99 	bl	8001144 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d241      	bcs.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	613b      	str	r3, [r7, #16]
   return(result);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a72:	623a      	str	r2, [r7, #32]
 8003a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	69f9      	ldr	r1, [r7, #28]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d09f      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3740      	adds	r7, #64	; 0x40
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b0c0      	sub	sp, #256	; 0x100
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	68d9      	ldr	r1, [r3, #12]
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	ea40 0301 	orr.w	r3, r0, r1
 8003af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b24:	f021 010c 	bic.w	r1, r1, #12
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b32:	430b      	orrs	r3, r1
 8003b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	6999      	ldr	r1, [r3, #24]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	ea40 0301 	orr.w	r3, r0, r1
 8003b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d005      	beq.n	8003b6c <UART_SetConfig+0xa0>
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b8d      	ldr	r3, [pc, #564]	; (8003d9c <UART_SetConfig+0x2d0>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d104      	bne.n	8003b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7ff fe4c 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8003b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b74:	e003      	b.n	8003b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b76:	f7ff fe33 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8003b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	f040 810c 	bne.w	8003da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bae:	4621      	mov	r1, r4
 8003bb0:	eb12 0801 	adds.w	r8, r2, r1
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb43 0901 	adc.w	r9, r3, r1
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bce:	4690      	mov	r8, r2
 8003bd0:	4699      	mov	r9, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	eb18 0303 	adds.w	r3, r8, r3
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bdc:	462b      	mov	r3, r5
 8003bde:	eb49 0303 	adc.w	r3, r9, r3
 8003be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	18db      	adds	r3, r3, r3
 8003bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003c00:	4613      	mov	r3, r2
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	657b      	str	r3, [r7, #84]	; 0x54
 8003c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c10:	f7fc fb3e 	bl	8000290 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	011c      	lsls	r4, r3, #4
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c44:	4641      	mov	r1, r8
 8003c46:	eb12 0a01 	adds.w	sl, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c64:	4692      	mov	sl, r2
 8003c66:	469b      	mov	fp, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c72:	464b      	mov	r3, r9
 8003c74:	eb4b 0303 	adc.w	r3, fp, r3
 8003c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c90:	460b      	mov	r3, r1
 8003c92:	18db      	adds	r3, r3, r3
 8003c94:	643b      	str	r3, [r7, #64]	; 0x40
 8003c96:	4613      	mov	r3, r2
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ca6:	f7fc faf3 	bl	8000290 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2264      	movs	r2, #100	; 0x64
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	1acb      	subs	r3, r1, r3
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cd4:	441c      	add	r4, r3
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	18db      	adds	r3, r3, r3
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	4613      	mov	r3, r2
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d62:	f7fc fa95 	bl	8000290 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 0207 	and.w	r2, r3, #7
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4422      	add	r2, r4
 8003d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d94:	e105      	b.n	8003fa2 <UART_SetConfig+0x4d6>
 8003d96:	bf00      	nop
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	1891      	adds	r1, r2, r2
 8003dbc:	6239      	str	r1, [r7, #32]
 8003dbe:	415b      	adcs	r3, r3
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	1854      	adds	r4, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb43 0501 	adc.w	r5, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	00eb      	lsls	r3, r5, #3
 8003dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dde:	00e2      	lsls	r2, r4, #3
 8003de0:	4614      	mov	r4, r2
 8003de2:	461d      	mov	r5, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	18e3      	adds	r3, r4, r3
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dec:	464b      	mov	r3, r9
 8003dee:	eb45 0303 	adc.w	r3, r5, r3
 8003df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e12:	4629      	mov	r1, r5
 8003e14:	008b      	lsls	r3, r1, #2
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	008a      	lsls	r2, r1, #2
 8003e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e24:	f7fc fa34 	bl	8000290 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	011c      	lsls	r4, r3, #4
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	61b9      	str	r1, [r7, #24]
 8003e50:	415b      	adcs	r3, r3
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6139      	str	r1, [r7, #16]
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	460a      	mov	r2, r1
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eba:	4641      	mov	r1, r8
 8003ebc:	008a      	lsls	r2, r1, #2
 8003ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ec2:	f7fc f9e5 	bl	8000290 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eea:	441c      	add	r4, r3
 8003eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1851      	adds	r1, r2, r1
 8003f0e:	6039      	str	r1, [r7, #0]
 8003f10:	4649      	mov	r1, r9
 8003f12:	414b      	adcs	r3, r1
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f22:	4659      	mov	r1, fp
 8003f24:	00cb      	lsls	r3, r1, #3
 8003f26:	4651      	mov	r1, sl
 8003f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	00ca      	lsls	r2, r1, #3
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	4603      	mov	r3, r0
 8003f36:	4642      	mov	r2, r8
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	460a      	mov	r2, r1
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f50:	667a      	str	r2, [r7, #100]	; 0x64
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f5e:	4649      	mov	r1, r9
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	4641      	mov	r1, r8
 8003f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f68:	4641      	mov	r1, r8
 8003f6a:	008a      	lsls	r2, r1, #2
 8003f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f70:	f7fc f98e 	bl	8000290 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2164      	movs	r1, #100	; 0x64
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4422      	add	r2, r4
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	51eb851f 	.word	0x51eb851f

08003fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 001c 	add.w	r0, r7, #28
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d122      	bne.n	8004012 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d105      	bne.n	8004006 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 faa2 	bl	8004550 <USB_CoreReset>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e01a      	b.n	8004048 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa96 	bl	8004550 <USB_CoreReset>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
 800403a:	e005      	b.n	8004048 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10b      	bne.n	8004066 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f043 0206 	orr.w	r2, r3, #6
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004072:	b004      	add	sp, #16
 8004074:	4770      	bx	lr

08004076 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d115      	bne.n	80040e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f7fd f848 	bl	800115c <HAL_Delay>
      ms++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa2e 	bl	8004534 <USB_GetMode>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d01e      	beq.n	800411c <USB_SetCurrentMode+0x84>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b31      	cmp	r3, #49	; 0x31
 80040e2:	d9f0      	bls.n	80040c6 <USB_SetCurrentMode+0x2e>
 80040e4:	e01a      	b.n	800411c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d115      	bne.n	8004118 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7fd f82f 	bl	800115c <HAL_Delay>
      ms++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa15 	bl	8004534 <USB_GetMode>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <USB_SetCurrentMode+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b31      	cmp	r3, #49	; 0x31
 8004114:	d9f0      	bls.n	80040f8 <USB_SetCurrentMode+0x60>
 8004116:	e001      	b.n	800411c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e005      	b.n	8004128 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b32      	cmp	r3, #50	; 0x32
 8004120:	d101      	bne.n	8004126 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004130:	b084      	sub	sp, #16
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	e009      	b.n	8004164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3340      	adds	r3, #64	; 0x40
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3301      	adds	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0e      	cmp	r3, #14
 8004168:	d9f2      	bls.n	8004150 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11c      	bne.n	80041aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
 80041a8:	e00b      	b.n	80041c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	4619      	mov	r1, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	461a      	mov	r2, r3
 80041de:	680b      	ldr	r3, [r1, #0]
 80041e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10c      	bne.n	8004202 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041ee:	2100      	movs	r1, #0
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f965 	bl	80044c0 <USB_SetDevSpeed>
 80041f6:	e008      	b.n	800420a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041f8:	2101      	movs	r1, #1
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f960 	bl	80044c0 <USB_SetDevSpeed>
 8004200:	e003      	b.n	800420a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004202:	2103      	movs	r1, #3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f95b 	bl	80044c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800420a:	2110      	movs	r1, #16
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8f3 	bl	80043f8 <USB_FlushTxFifo>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f91f 	bl	8004460 <USB_FlushRxFifo>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e043      	b.n	80042de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800426c:	d118      	bne.n	80042a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e013      	b.n	80042b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	461a      	mov	r2, r3
 8004298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e008      	b.n	80042b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	461a      	mov	r2, r3
 80042d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	3301      	adds	r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3b7      	bcc.n	8004256 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e043      	b.n	8004374 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004302:	d118      	bne.n	8004336 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e013      	b.n	8004348 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	461a      	mov	r2, r3
 800432e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e008      	b.n	8004348 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	461a      	mov	r2, r3
 8004356:	2300      	movs	r3, #0
 8004358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	461a      	mov	r2, r3
 8004368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800436c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3301      	adds	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d3b7      	bcc.n	80042ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d105      	bne.n	80043b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <USB_DevInit+0x2c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f043 0208 	orr.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f0:	b004      	add	sp, #16
 80043f2:	4770      	bx	lr
 80043f4:	803c3800 	.word	0x803c3800

080043f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <USB_FlushTxFifo+0x64>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e01b      	b.n	8004450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	daf2      	bge.n	8004406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <USB_FlushTxFifo+0x64>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e006      	b.n	8004450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b20      	cmp	r3, #32
 800444c:	d0f0      	beq.n	8004430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	00030d40 	.word	0x00030d40

08004460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <USB_FlushRxFifo+0x5c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e018      	b.n	80044b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	daf2      	bge.n	800446c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2210      	movs	r2, #16
 800448e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <USB_FlushRxFifo+0x5c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d0f0      	beq.n	8004490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	00030d40 	.word	0x00030d40

080044c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800450c:	f023 0303 	bic.w	r3, r3, #3
 8004510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0301 	and.w	r3, r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <USB_CoreReset+0x64>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e01b      	b.n	80045a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	daf2      	bge.n	800455c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <USB_CoreReset+0x64>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d0f0      	beq.n	8004586 <USB_CoreReset+0x36>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	00030d40 	.word	0x00030d40

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000000c 	.word	0x2000000c

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 ffae 	bl	8005538 <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08005618 	.word	0x08005618
 8004600:	08005618 	.word	0x08005618
 8004604:	08005618 	.word	0x08005618
 8004608:	0800561c 	.word	0x0800561c

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <iprintf>:
 800461c:	b40f      	push	{r0, r1, r2, r3}
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <iprintf+0x2c>)
 8004620:	b513      	push	{r0, r1, r4, lr}
 8004622:	681c      	ldr	r4, [r3, #0]
 8004624:	b124      	cbz	r4, 8004630 <iprintf+0x14>
 8004626:	69a3      	ldr	r3, [r4, #24]
 8004628:	b913      	cbnz	r3, 8004630 <iprintf+0x14>
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f866 	bl	80046fc <__sinit>
 8004630:	ab05      	add	r3, sp, #20
 8004632:	9a04      	ldr	r2, [sp, #16]
 8004634:	68a1      	ldr	r1, [r4, #8]
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f9bd 	bl	80049b8 <_vfiprintf_r>
 800463e:	b002      	add	sp, #8
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004644:	b004      	add	sp, #16
 8004646:	4770      	bx	lr
 8004648:	2000000c 	.word	0x2000000c

0800464c <std>:
 800464c:	2300      	movs	r3, #0
 800464e:	b510      	push	{r4, lr}
 8004650:	4604      	mov	r4, r0
 8004652:	e9c0 3300 	strd	r3, r3, [r0]
 8004656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800465a:	6083      	str	r3, [r0, #8]
 800465c:	8181      	strh	r1, [r0, #12]
 800465e:	6643      	str	r3, [r0, #100]	; 0x64
 8004660:	81c2      	strh	r2, [r0, #14]
 8004662:	6183      	str	r3, [r0, #24]
 8004664:	4619      	mov	r1, r3
 8004666:	2208      	movs	r2, #8
 8004668:	305c      	adds	r0, #92	; 0x5c
 800466a:	f7ff ffcf 	bl	800460c <memset>
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <std+0x38>)
 8004670:	6263      	str	r3, [r4, #36]	; 0x24
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <std+0x3c>)
 8004674:	62a3      	str	r3, [r4, #40]	; 0x28
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <std+0x40>)
 8004678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <std+0x44>)
 800467c:	6224      	str	r4, [r4, #32]
 800467e:	6323      	str	r3, [r4, #48]	; 0x30
 8004680:	bd10      	pop	{r4, pc}
 8004682:	bf00      	nop
 8004684:	08004f61 	.word	0x08004f61
 8004688:	08004f83 	.word	0x08004f83
 800468c:	08004fbb 	.word	0x08004fbb
 8004690:	08004fdf 	.word	0x08004fdf

08004694 <_cleanup_r>:
 8004694:	4901      	ldr	r1, [pc, #4]	; (800469c <_cleanup_r+0x8>)
 8004696:	f000 b8af 	b.w	80047f8 <_fwalk_reent>
 800469a:	bf00      	nop
 800469c:	080052b9 	.word	0x080052b9

080046a0 <__sfmoreglue>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	2268      	movs	r2, #104	; 0x68
 80046a4:	1e4d      	subs	r5, r1, #1
 80046a6:	4355      	muls	r5, r2
 80046a8:	460e      	mov	r6, r1
 80046aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046ae:	f000 f8e5 	bl	800487c <_malloc_r>
 80046b2:	4604      	mov	r4, r0
 80046b4:	b140      	cbz	r0, 80046c8 <__sfmoreglue+0x28>
 80046b6:	2100      	movs	r1, #0
 80046b8:	e9c0 1600 	strd	r1, r6, [r0]
 80046bc:	300c      	adds	r0, #12
 80046be:	60a0      	str	r0, [r4, #8]
 80046c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046c4:	f7ff ffa2 	bl	800460c <memset>
 80046c8:	4620      	mov	r0, r4
 80046ca:	bd70      	pop	{r4, r5, r6, pc}

080046cc <__sfp_lock_acquire>:
 80046cc:	4801      	ldr	r0, [pc, #4]	; (80046d4 <__sfp_lock_acquire+0x8>)
 80046ce:	f000 b8b3 	b.w	8004838 <__retarget_lock_acquire_recursive>
 80046d2:	bf00      	nop
 80046d4:	200008bd 	.word	0x200008bd

080046d8 <__sfp_lock_release>:
 80046d8:	4801      	ldr	r0, [pc, #4]	; (80046e0 <__sfp_lock_release+0x8>)
 80046da:	f000 b8ae 	b.w	800483a <__retarget_lock_release_recursive>
 80046de:	bf00      	nop
 80046e0:	200008bd 	.word	0x200008bd

080046e4 <__sinit_lock_acquire>:
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <__sinit_lock_acquire+0x8>)
 80046e6:	f000 b8a7 	b.w	8004838 <__retarget_lock_acquire_recursive>
 80046ea:	bf00      	nop
 80046ec:	200008be 	.word	0x200008be

080046f0 <__sinit_lock_release>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sinit_lock_release+0x8>)
 80046f2:	f000 b8a2 	b.w	800483a <__retarget_lock_release_recursive>
 80046f6:	bf00      	nop
 80046f8:	200008be 	.word	0x200008be

080046fc <__sinit>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	4604      	mov	r4, r0
 8004700:	f7ff fff0 	bl	80046e4 <__sinit_lock_acquire>
 8004704:	69a3      	ldr	r3, [r4, #24]
 8004706:	b11b      	cbz	r3, 8004710 <__sinit+0x14>
 8004708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470c:	f7ff bff0 	b.w	80046f0 <__sinit_lock_release>
 8004710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004714:	6523      	str	r3, [r4, #80]	; 0x50
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <__sinit+0x68>)
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <__sinit+0x6c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	62a2      	str	r2, [r4, #40]	; 0x28
 800471e:	42a3      	cmp	r3, r4
 8004720:	bf04      	itt	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	61a3      	streq	r3, [r4, #24]
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f820 	bl	800476c <__sfp>
 800472c:	6060      	str	r0, [r4, #4]
 800472e:	4620      	mov	r0, r4
 8004730:	f000 f81c 	bl	800476c <__sfp>
 8004734:	60a0      	str	r0, [r4, #8]
 8004736:	4620      	mov	r0, r4
 8004738:	f000 f818 	bl	800476c <__sfp>
 800473c:	2200      	movs	r2, #0
 800473e:	60e0      	str	r0, [r4, #12]
 8004740:	2104      	movs	r1, #4
 8004742:	6860      	ldr	r0, [r4, #4]
 8004744:	f7ff ff82 	bl	800464c <std>
 8004748:	68a0      	ldr	r0, [r4, #8]
 800474a:	2201      	movs	r2, #1
 800474c:	2109      	movs	r1, #9
 800474e:	f7ff ff7d 	bl	800464c <std>
 8004752:	68e0      	ldr	r0, [r4, #12]
 8004754:	2202      	movs	r2, #2
 8004756:	2112      	movs	r1, #18
 8004758:	f7ff ff78 	bl	800464c <std>
 800475c:	2301      	movs	r3, #1
 800475e:	61a3      	str	r3, [r4, #24]
 8004760:	e7d2      	b.n	8004708 <__sinit+0xc>
 8004762:	bf00      	nop
 8004764:	08005578 	.word	0x08005578
 8004768:	08004695 	.word	0x08004695

0800476c <__sfp>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	4607      	mov	r7, r0
 8004770:	f7ff ffac 	bl	80046cc <__sfp_lock_acquire>
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <__sfp+0x84>)
 8004776:	681e      	ldr	r6, [r3, #0]
 8004778:	69b3      	ldr	r3, [r6, #24]
 800477a:	b913      	cbnz	r3, 8004782 <__sfp+0x16>
 800477c:	4630      	mov	r0, r6
 800477e:	f7ff ffbd 	bl	80046fc <__sinit>
 8004782:	3648      	adds	r6, #72	; 0x48
 8004784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004788:	3b01      	subs	r3, #1
 800478a:	d503      	bpl.n	8004794 <__sfp+0x28>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	b30b      	cbz	r3, 80047d4 <__sfp+0x68>
 8004790:	6836      	ldr	r6, [r6, #0]
 8004792:	e7f7      	b.n	8004784 <__sfp+0x18>
 8004794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004798:	b9d5      	cbnz	r5, 80047d0 <__sfp+0x64>
 800479a:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <__sfp+0x88>)
 800479c:	60e3      	str	r3, [r4, #12]
 800479e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047a2:	6665      	str	r5, [r4, #100]	; 0x64
 80047a4:	f000 f847 	bl	8004836 <__retarget_lock_init_recursive>
 80047a8:	f7ff ff96 	bl	80046d8 <__sfp_lock_release>
 80047ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047b4:	6025      	str	r5, [r4, #0]
 80047b6:	61a5      	str	r5, [r4, #24]
 80047b8:	2208      	movs	r2, #8
 80047ba:	4629      	mov	r1, r5
 80047bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047c0:	f7ff ff24 	bl	800460c <memset>
 80047c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047cc:	4620      	mov	r0, r4
 80047ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d0:	3468      	adds	r4, #104	; 0x68
 80047d2:	e7d9      	b.n	8004788 <__sfp+0x1c>
 80047d4:	2104      	movs	r1, #4
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ff62 	bl	80046a0 <__sfmoreglue>
 80047dc:	4604      	mov	r4, r0
 80047de:	6030      	str	r0, [r6, #0]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1d5      	bne.n	8004790 <__sfp+0x24>
 80047e4:	f7ff ff78 	bl	80046d8 <__sfp_lock_release>
 80047e8:	230c      	movs	r3, #12
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	e7ee      	b.n	80047cc <__sfp+0x60>
 80047ee:	bf00      	nop
 80047f0:	08005578 	.word	0x08005578
 80047f4:	ffff0001 	.word	0xffff0001

080047f8 <_fwalk_reent>:
 80047f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047fc:	4606      	mov	r6, r0
 80047fe:	4688      	mov	r8, r1
 8004800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004804:	2700      	movs	r7, #0
 8004806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800480a:	f1b9 0901 	subs.w	r9, r9, #1
 800480e:	d505      	bpl.n	800481c <_fwalk_reent+0x24>
 8004810:	6824      	ldr	r4, [r4, #0]
 8004812:	2c00      	cmp	r4, #0
 8004814:	d1f7      	bne.n	8004806 <_fwalk_reent+0xe>
 8004816:	4638      	mov	r0, r7
 8004818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481c:	89ab      	ldrh	r3, [r5, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d907      	bls.n	8004832 <_fwalk_reent+0x3a>
 8004822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004826:	3301      	adds	r3, #1
 8004828:	d003      	beq.n	8004832 <_fwalk_reent+0x3a>
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	47c0      	blx	r8
 8004830:	4307      	orrs	r7, r0
 8004832:	3568      	adds	r5, #104	; 0x68
 8004834:	e7e9      	b.n	800480a <_fwalk_reent+0x12>

08004836 <__retarget_lock_init_recursive>:
 8004836:	4770      	bx	lr

08004838 <__retarget_lock_acquire_recursive>:
 8004838:	4770      	bx	lr

0800483a <__retarget_lock_release_recursive>:
 800483a:	4770      	bx	lr

0800483c <sbrk_aligned>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4e0e      	ldr	r6, [pc, #56]	; (8004878 <sbrk_aligned+0x3c>)
 8004840:	460c      	mov	r4, r1
 8004842:	6831      	ldr	r1, [r6, #0]
 8004844:	4605      	mov	r5, r0
 8004846:	b911      	cbnz	r1, 800484e <sbrk_aligned+0x12>
 8004848:	f000 fb7a 	bl	8004f40 <_sbrk_r>
 800484c:	6030      	str	r0, [r6, #0]
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f000 fb75 	bl	8004f40 <_sbrk_r>
 8004856:	1c43      	adds	r3, r0, #1
 8004858:	d00a      	beq.n	8004870 <sbrk_aligned+0x34>
 800485a:	1cc4      	adds	r4, r0, #3
 800485c:	f024 0403 	bic.w	r4, r4, #3
 8004860:	42a0      	cmp	r0, r4
 8004862:	d007      	beq.n	8004874 <sbrk_aligned+0x38>
 8004864:	1a21      	subs	r1, r4, r0
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fb6a 	bl	8004f40 <_sbrk_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d101      	bne.n	8004874 <sbrk_aligned+0x38>
 8004870:	f04f 34ff 	mov.w	r4, #4294967295
 8004874:	4620      	mov	r0, r4
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	200008c4 	.word	0x200008c4

0800487c <_malloc_r>:
 800487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004880:	1ccd      	adds	r5, r1, #3
 8004882:	f025 0503 	bic.w	r5, r5, #3
 8004886:	3508      	adds	r5, #8
 8004888:	2d0c      	cmp	r5, #12
 800488a:	bf38      	it	cc
 800488c:	250c      	movcc	r5, #12
 800488e:	2d00      	cmp	r5, #0
 8004890:	4607      	mov	r7, r0
 8004892:	db01      	blt.n	8004898 <_malloc_r+0x1c>
 8004894:	42a9      	cmp	r1, r5
 8004896:	d905      	bls.n	80048a4 <_malloc_r+0x28>
 8004898:	230c      	movs	r3, #12
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	2600      	movs	r6, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a4:	4e2e      	ldr	r6, [pc, #184]	; (8004960 <_malloc_r+0xe4>)
 80048a6:	f000 fdbb 	bl	8005420 <__malloc_lock>
 80048aa:	6833      	ldr	r3, [r6, #0]
 80048ac:	461c      	mov	r4, r3
 80048ae:	bb34      	cbnz	r4, 80048fe <_malloc_r+0x82>
 80048b0:	4629      	mov	r1, r5
 80048b2:	4638      	mov	r0, r7
 80048b4:	f7ff ffc2 	bl	800483c <sbrk_aligned>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	4604      	mov	r4, r0
 80048bc:	d14d      	bne.n	800495a <_malloc_r+0xde>
 80048be:	6834      	ldr	r4, [r6, #0]
 80048c0:	4626      	mov	r6, r4
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d140      	bne.n	8004948 <_malloc_r+0xcc>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	4631      	mov	r1, r6
 80048ca:	4638      	mov	r0, r7
 80048cc:	eb04 0803 	add.w	r8, r4, r3
 80048d0:	f000 fb36 	bl	8004f40 <_sbrk_r>
 80048d4:	4580      	cmp	r8, r0
 80048d6:	d13a      	bne.n	800494e <_malloc_r+0xd2>
 80048d8:	6821      	ldr	r1, [r4, #0]
 80048da:	3503      	adds	r5, #3
 80048dc:	1a6d      	subs	r5, r5, r1
 80048de:	f025 0503 	bic.w	r5, r5, #3
 80048e2:	3508      	adds	r5, #8
 80048e4:	2d0c      	cmp	r5, #12
 80048e6:	bf38      	it	cc
 80048e8:	250c      	movcc	r5, #12
 80048ea:	4629      	mov	r1, r5
 80048ec:	4638      	mov	r0, r7
 80048ee:	f7ff ffa5 	bl	800483c <sbrk_aligned>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d02b      	beq.n	800494e <_malloc_r+0xd2>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	442b      	add	r3, r5
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	e00e      	b.n	800491c <_malloc_r+0xa0>
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	1b52      	subs	r2, r2, r5
 8004902:	d41e      	bmi.n	8004942 <_malloc_r+0xc6>
 8004904:	2a0b      	cmp	r2, #11
 8004906:	d916      	bls.n	8004936 <_malloc_r+0xba>
 8004908:	1961      	adds	r1, r4, r5
 800490a:	42a3      	cmp	r3, r4
 800490c:	6025      	str	r5, [r4, #0]
 800490e:	bf18      	it	ne
 8004910:	6059      	strne	r1, [r3, #4]
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	bf08      	it	eq
 8004916:	6031      	streq	r1, [r6, #0]
 8004918:	5162      	str	r2, [r4, r5]
 800491a:	604b      	str	r3, [r1, #4]
 800491c:	4638      	mov	r0, r7
 800491e:	f104 060b 	add.w	r6, r4, #11
 8004922:	f000 fd83 	bl	800542c <__malloc_unlock>
 8004926:	f026 0607 	bic.w	r6, r6, #7
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	1af2      	subs	r2, r6, r3
 800492e:	d0b6      	beq.n	800489e <_malloc_r+0x22>
 8004930:	1b9b      	subs	r3, r3, r6
 8004932:	50a3      	str	r3, [r4, r2]
 8004934:	e7b3      	b.n	800489e <_malloc_r+0x22>
 8004936:	6862      	ldr	r2, [r4, #4]
 8004938:	42a3      	cmp	r3, r4
 800493a:	bf0c      	ite	eq
 800493c:	6032      	streq	r2, [r6, #0]
 800493e:	605a      	strne	r2, [r3, #4]
 8004940:	e7ec      	b.n	800491c <_malloc_r+0xa0>
 8004942:	4623      	mov	r3, r4
 8004944:	6864      	ldr	r4, [r4, #4]
 8004946:	e7b2      	b.n	80048ae <_malloc_r+0x32>
 8004948:	4634      	mov	r4, r6
 800494a:	6876      	ldr	r6, [r6, #4]
 800494c:	e7b9      	b.n	80048c2 <_malloc_r+0x46>
 800494e:	230c      	movs	r3, #12
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4638      	mov	r0, r7
 8004954:	f000 fd6a 	bl	800542c <__malloc_unlock>
 8004958:	e7a1      	b.n	800489e <_malloc_r+0x22>
 800495a:	6025      	str	r5, [r4, #0]
 800495c:	e7de      	b.n	800491c <_malloc_r+0xa0>
 800495e:	bf00      	nop
 8004960:	200008c0 	.word	0x200008c0

08004964 <__sfputc_r>:
 8004964:	6893      	ldr	r3, [r2, #8]
 8004966:	3b01      	subs	r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	b410      	push	{r4}
 800496c:	6093      	str	r3, [r2, #8]
 800496e:	da08      	bge.n	8004982 <__sfputc_r+0x1e>
 8004970:	6994      	ldr	r4, [r2, #24]
 8004972:	42a3      	cmp	r3, r4
 8004974:	db01      	blt.n	800497a <__sfputc_r+0x16>
 8004976:	290a      	cmp	r1, #10
 8004978:	d103      	bne.n	8004982 <__sfputc_r+0x1e>
 800497a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800497e:	f000 bb33 	b.w	8004fe8 <__swbuf_r>
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	1c58      	adds	r0, r3, #1
 8004986:	6010      	str	r0, [r2, #0]
 8004988:	7019      	strb	r1, [r3, #0]
 800498a:	4608      	mov	r0, r1
 800498c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004990:	4770      	bx	lr

08004992 <__sfputs_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	4614      	mov	r4, r2
 800499a:	18d5      	adds	r5, r2, r3
 800499c:	42ac      	cmp	r4, r5
 800499e:	d101      	bne.n	80049a4 <__sfputs_r+0x12>
 80049a0:	2000      	movs	r0, #0
 80049a2:	e007      	b.n	80049b4 <__sfputs_r+0x22>
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	463a      	mov	r2, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffda 	bl	8004964 <__sfputc_r>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d1f3      	bne.n	800499c <__sfputs_r+0xa>
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049b8 <_vfiprintf_r>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	460d      	mov	r5, r1
 80049be:	b09d      	sub	sp, #116	; 0x74
 80049c0:	4614      	mov	r4, r2
 80049c2:	4698      	mov	r8, r3
 80049c4:	4606      	mov	r6, r0
 80049c6:	b118      	cbz	r0, 80049d0 <_vfiprintf_r+0x18>
 80049c8:	6983      	ldr	r3, [r0, #24]
 80049ca:	b90b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x18>
 80049cc:	f7ff fe96 	bl	80046fc <__sinit>
 80049d0:	4b89      	ldr	r3, [pc, #548]	; (8004bf8 <_vfiprintf_r+0x240>)
 80049d2:	429d      	cmp	r5, r3
 80049d4:	d11b      	bne.n	8004a0e <_vfiprintf_r+0x56>
 80049d6:	6875      	ldr	r5, [r6, #4]
 80049d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_vfiprintf_r+0x32>
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_vfiprintf_r+0x32>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff ff27 	bl	8004838 <__retarget_lock_acquire_recursive>
 80049ea:	89ab      	ldrh	r3, [r5, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	d501      	bpl.n	80049f4 <_vfiprintf_r+0x3c>
 80049f0:	692b      	ldr	r3, [r5, #16]
 80049f2:	b9eb      	cbnz	r3, 8004a30 <_vfiprintf_r+0x78>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4630      	mov	r0, r6
 80049f8:	f000 fb5a 	bl	80050b0 <__swsetup_r>
 80049fc:	b1c0      	cbz	r0, 8004a30 <_vfiprintf_r+0x78>
 80049fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a00:	07dc      	lsls	r4, r3, #31
 8004a02:	d50e      	bpl.n	8004a22 <_vfiprintf_r+0x6a>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	b01d      	add	sp, #116	; 0x74
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	4b7b      	ldr	r3, [pc, #492]	; (8004bfc <_vfiprintf_r+0x244>)
 8004a10:	429d      	cmp	r5, r3
 8004a12:	d101      	bne.n	8004a18 <_vfiprintf_r+0x60>
 8004a14:	68b5      	ldr	r5, [r6, #8]
 8004a16:	e7df      	b.n	80049d8 <_vfiprintf_r+0x20>
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <_vfiprintf_r+0x248>)
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	bf08      	it	eq
 8004a1e:	68f5      	ldreq	r5, [r6, #12]
 8004a20:	e7da      	b.n	80049d8 <_vfiprintf_r+0x20>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	0598      	lsls	r0, r3, #22
 8004a26:	d4ed      	bmi.n	8004a04 <_vfiprintf_r+0x4c>
 8004a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2a:	f7ff ff06 	bl	800483a <__retarget_lock_release_recursive>
 8004a2e:	e7e9      	b.n	8004a04 <_vfiprintf_r+0x4c>
 8004a30:	2300      	movs	r3, #0
 8004a32:	9309      	str	r3, [sp, #36]	; 0x24
 8004a34:	2320      	movs	r3, #32
 8004a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a3e:	2330      	movs	r3, #48	; 0x30
 8004a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c04 <_vfiprintf_r+0x24c>
 8004a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a48:	f04f 0901 	mov.w	r9, #1
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	469a      	mov	sl, r3
 8004a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a54:	b10a      	cbz	r2, 8004a5a <_vfiprintf_r+0xa2>
 8004a56:	2a25      	cmp	r2, #37	; 0x25
 8004a58:	d1f9      	bne.n	8004a4e <_vfiprintf_r+0x96>
 8004a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a5e:	d00b      	beq.n	8004a78 <_vfiprintf_r+0xc0>
 8004a60:	465b      	mov	r3, fp
 8004a62:	4622      	mov	r2, r4
 8004a64:	4629      	mov	r1, r5
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ff93 	bl	8004992 <__sfputs_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f000 80aa 	beq.w	8004bc6 <_vfiprintf_r+0x20e>
 8004a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a74:	445a      	add	r2, fp
 8004a76:	9209      	str	r2, [sp, #36]	; 0x24
 8004a78:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a2 	beq.w	8004bc6 <_vfiprintf_r+0x20e>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8c:	f10a 0a01 	add.w	sl, sl, #1
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a98:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9a:	4654      	mov	r4, sl
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa2:	4858      	ldr	r0, [pc, #352]	; (8004c04 <_vfiprintf_r+0x24c>)
 8004aa4:	f7fb fba4 	bl	80001f0 <memchr>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	b9d8      	cbnz	r0, 8004ae4 <_vfiprintf_r+0x12c>
 8004aac:	06d1      	lsls	r1, r2, #27
 8004aae:	bf44      	itt	mi
 8004ab0:	2320      	movmi	r3, #32
 8004ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab6:	0713      	lsls	r3, r2, #28
 8004ab8:	bf44      	itt	mi
 8004aba:	232b      	movmi	r3, #43	; 0x2b
 8004abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac6:	d015      	beq.n	8004af4 <_vfiprintf_r+0x13c>
 8004ac8:	9a07      	ldr	r2, [sp, #28]
 8004aca:	4654      	mov	r4, sl
 8004acc:	2000      	movs	r0, #0
 8004ace:	f04f 0c0a 	mov.w	ip, #10
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d94e      	bls.n	8004b7c <_vfiprintf_r+0x1c4>
 8004ade:	b1b0      	cbz	r0, 8004b0e <_vfiprintf_r+0x156>
 8004ae0:	9207      	str	r2, [sp, #28]
 8004ae2:	e014      	b.n	8004b0e <_vfiprintf_r+0x156>
 8004ae4:	eba0 0308 	sub.w	r3, r0, r8
 8004ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	9304      	str	r3, [sp, #16]
 8004af0:	46a2      	mov	sl, r4
 8004af2:	e7d2      	b.n	8004a9a <_vfiprintf_r+0xe2>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	1d19      	adds	r1, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	9103      	str	r1, [sp, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfbb      	ittet	lt
 8004b00:	425b      	neglt	r3, r3
 8004b02:	f042 0202 	orrlt.w	r2, r2, #2
 8004b06:	9307      	strge	r3, [sp, #28]
 8004b08:	9307      	strlt	r3, [sp, #28]
 8004b0a:	bfb8      	it	lt
 8004b0c:	9204      	strlt	r2, [sp, #16]
 8004b0e:	7823      	ldrb	r3, [r4, #0]
 8004b10:	2b2e      	cmp	r3, #46	; 0x2e
 8004b12:	d10c      	bne.n	8004b2e <_vfiprintf_r+0x176>
 8004b14:	7863      	ldrb	r3, [r4, #1]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d135      	bne.n	8004b86 <_vfiprintf_r+0x1ce>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9203      	str	r2, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2a:	3402      	adds	r4, #2
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c14 <_vfiprintf_r+0x25c>
 8004b32:	7821      	ldrb	r1, [r4, #0]
 8004b34:	2203      	movs	r2, #3
 8004b36:	4650      	mov	r0, sl
 8004b38:	f7fb fb5a 	bl	80001f0 <memchr>
 8004b3c:	b140      	cbz	r0, 8004b50 <_vfiprintf_r+0x198>
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	eba0 000a 	sub.w	r0, r0, sl
 8004b44:	fa03 f000 	lsl.w	r0, r3, r0
 8004b48:	9b04      	ldr	r3, [sp, #16]
 8004b4a:	4303      	orrs	r3, r0
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b54:	482c      	ldr	r0, [pc, #176]	; (8004c08 <_vfiprintf_r+0x250>)
 8004b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	f7fb fb48 	bl	80001f0 <memchr>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d03f      	beq.n	8004be4 <_vfiprintf_r+0x22c>
 8004b64:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <_vfiprintf_r+0x254>)
 8004b66:	bb1b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x1f8>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3307      	adds	r3, #7
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	3308      	adds	r3, #8
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	443b      	add	r3, r7
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	e767      	b.n	8004a4c <_vfiprintf_r+0x94>
 8004b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b80:	460c      	mov	r4, r1
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7a5      	b.n	8004ad2 <_vfiprintf_r+0x11a>
 8004b86:	2300      	movs	r3, #0
 8004b88:	3401      	adds	r4, #1
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 0c0a 	mov.w	ip, #10
 8004b92:	4620      	mov	r0, r4
 8004b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b98:	3a30      	subs	r2, #48	; 0x30
 8004b9a:	2a09      	cmp	r2, #9
 8004b9c:	d903      	bls.n	8004ba6 <_vfiprintf_r+0x1ee>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c5      	beq.n	8004b2e <_vfiprintf_r+0x176>
 8004ba2:	9105      	str	r1, [sp, #20]
 8004ba4:	e7c3      	b.n	8004b2e <_vfiprintf_r+0x176>
 8004ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004baa:	4604      	mov	r4, r0
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7f0      	b.n	8004b92 <_vfiprintf_r+0x1da>
 8004bb0:	ab03      	add	r3, sp, #12
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <_vfiprintf_r+0x258>)
 8004bb8:	a904      	add	r1, sp, #16
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	1c78      	adds	r0, r7, #1
 8004bc4:	d1d6      	bne.n	8004b74 <_vfiprintf_r+0x1bc>
 8004bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bc8:	07d9      	lsls	r1, r3, #31
 8004bca:	d405      	bmi.n	8004bd8 <_vfiprintf_r+0x220>
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	059a      	lsls	r2, r3, #22
 8004bd0:	d402      	bmi.n	8004bd8 <_vfiprintf_r+0x220>
 8004bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bd4:	f7ff fe31 	bl	800483a <__retarget_lock_release_recursive>
 8004bd8:	89ab      	ldrh	r3, [r5, #12]
 8004bda:	065b      	lsls	r3, r3, #25
 8004bdc:	f53f af12 	bmi.w	8004a04 <_vfiprintf_r+0x4c>
 8004be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be2:	e711      	b.n	8004a08 <_vfiprintf_r+0x50>
 8004be4:	ab03      	add	r3, sp, #12
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <_vfiprintf_r+0x258>)
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 f880 	bl	8004cf4 <_printf_i>
 8004bf4:	e7e4      	b.n	8004bc0 <_vfiprintf_r+0x208>
 8004bf6:	bf00      	nop
 8004bf8:	0800559c 	.word	0x0800559c
 8004bfc:	080055bc 	.word	0x080055bc
 8004c00:	0800557c 	.word	0x0800557c
 8004c04:	080055dc 	.word	0x080055dc
 8004c08:	080055e6 	.word	0x080055e6
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	08004993 	.word	0x08004993
 8004c14:	080055e2 	.word	0x080055e2

08004c18 <_printf_common>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	4699      	mov	r9, r3
 8004c20:	688a      	ldr	r2, [r1, #8]
 8004c22:	690b      	ldr	r3, [r1, #16]
 8004c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bfb8      	it	lt
 8004c2c:	4613      	movlt	r3, r2
 8004c2e:	6033      	str	r3, [r6, #0]
 8004c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c34:	4607      	mov	r7, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	b10a      	cbz	r2, 8004c3e <_printf_common+0x26>
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	6833      	ldrmi	r3, [r6, #0]
 8004c46:	3302      	addmi	r3, #2
 8004c48:	6033      	strmi	r3, [r6, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	f015 0506 	ands.w	r5, r5, #6
 8004c50:	d106      	bne.n	8004c60 <_printf_common+0x48>
 8004c52:	f104 0a19 	add.w	sl, r4, #25
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	6832      	ldr	r2, [r6, #0]
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dc26      	bgt.n	8004cae <_printf_common+0x96>
 8004c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c64:	1e13      	subs	r3, r2, #0
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	0692      	lsls	r2, r2, #26
 8004c6e:	d42b      	bmi.n	8004cc8 <_printf_common+0xb0>
 8004c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c74:	4649      	mov	r1, r9
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c0      	blx	r8
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d01e      	beq.n	8004cbc <_printf_common+0xa4>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	68e5      	ldr	r5, [r4, #12]
 8004c82:	6832      	ldr	r2, [r6, #0]
 8004c84:	f003 0306 	and.w	r3, r3, #6
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	bf08      	it	eq
 8004c8c:	1aad      	subeq	r5, r5, r2
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	bf0c      	ite	eq
 8004c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c98:	2500      	movne	r5, #0
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	bfc4      	itt	gt
 8004c9e:	1a9b      	subgt	r3, r3, r2
 8004ca0:	18ed      	addgt	r5, r5, r3
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	341a      	adds	r4, #26
 8004ca6:	42b5      	cmp	r5, r6
 8004ca8:	d11a      	bne.n	8004ce0 <_printf_common+0xc8>
 8004caa:	2000      	movs	r0, #0
 8004cac:	e008      	b.n	8004cc0 <_printf_common+0xa8>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4652      	mov	r2, sl
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	47c0      	blx	r8
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d103      	bne.n	8004cc4 <_printf_common+0xac>
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	e7c6      	b.n	8004c56 <_printf_common+0x3e>
 8004cc8:	18e1      	adds	r1, r4, r3
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	2030      	movs	r0, #48	; 0x30
 8004cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cd2:	4422      	add	r2, r4
 8004cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cdc:	3302      	adds	r3, #2
 8004cde:	e7c7      	b.n	8004c70 <_printf_common+0x58>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c0      	blx	r8
 8004cea:	3001      	adds	r0, #1
 8004cec:	d0e6      	beq.n	8004cbc <_printf_common+0xa4>
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7d9      	b.n	8004ca6 <_printf_common+0x8e>
	...

08004cf4 <_printf_i>:
 8004cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	7e0f      	ldrb	r7, [r1, #24]
 8004cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cfc:	2f78      	cmp	r7, #120	; 0x78
 8004cfe:	4691      	mov	r9, r2
 8004d00:	4680      	mov	r8, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	469a      	mov	sl, r3
 8004d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d0a:	d807      	bhi.n	8004d1c <_printf_i+0x28>
 8004d0c:	2f62      	cmp	r7, #98	; 0x62
 8004d0e:	d80a      	bhi.n	8004d26 <_printf_i+0x32>
 8004d10:	2f00      	cmp	r7, #0
 8004d12:	f000 80d8 	beq.w	8004ec6 <_printf_i+0x1d2>
 8004d16:	2f58      	cmp	r7, #88	; 0x58
 8004d18:	f000 80a3 	beq.w	8004e62 <_printf_i+0x16e>
 8004d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d24:	e03a      	b.n	8004d9c <_printf_i+0xa8>
 8004d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d2a:	2b15      	cmp	r3, #21
 8004d2c:	d8f6      	bhi.n	8004d1c <_printf_i+0x28>
 8004d2e:	a101      	add	r1, pc, #4	; (adr r1, 8004d34 <_printf_i+0x40>)
 8004d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d34:	08004d8d 	.word	0x08004d8d
 8004d38:	08004da1 	.word	0x08004da1
 8004d3c:	08004d1d 	.word	0x08004d1d
 8004d40:	08004d1d 	.word	0x08004d1d
 8004d44:	08004d1d 	.word	0x08004d1d
 8004d48:	08004d1d 	.word	0x08004d1d
 8004d4c:	08004da1 	.word	0x08004da1
 8004d50:	08004d1d 	.word	0x08004d1d
 8004d54:	08004d1d 	.word	0x08004d1d
 8004d58:	08004d1d 	.word	0x08004d1d
 8004d5c:	08004d1d 	.word	0x08004d1d
 8004d60:	08004ead 	.word	0x08004ead
 8004d64:	08004dd1 	.word	0x08004dd1
 8004d68:	08004e8f 	.word	0x08004e8f
 8004d6c:	08004d1d 	.word	0x08004d1d
 8004d70:	08004d1d 	.word	0x08004d1d
 8004d74:	08004ecf 	.word	0x08004ecf
 8004d78:	08004d1d 	.word	0x08004d1d
 8004d7c:	08004dd1 	.word	0x08004dd1
 8004d80:	08004d1d 	.word	0x08004d1d
 8004d84:	08004d1d 	.word	0x08004d1d
 8004d88:	08004e97 	.word	0x08004e97
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	602a      	str	r2, [r5, #0]
 8004d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0a3      	b.n	8004ee8 <_printf_i+0x1f4>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	6829      	ldr	r1, [r5, #0]
 8004da4:	0606      	lsls	r6, r0, #24
 8004da6:	f101 0304 	add.w	r3, r1, #4
 8004daa:	d50a      	bpl.n	8004dc2 <_printf_i+0xce>
 8004dac:	680e      	ldr	r6, [r1, #0]
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	da03      	bge.n	8004dbc <_printf_i+0xc8>
 8004db4:	232d      	movs	r3, #45	; 0x2d
 8004db6:	4276      	negs	r6, r6
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbc:	485e      	ldr	r0, [pc, #376]	; (8004f38 <_printf_i+0x244>)
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	e019      	b.n	8004df6 <_printf_i+0x102>
 8004dc2:	680e      	ldr	r6, [r1, #0]
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dca:	bf18      	it	ne
 8004dcc:	b236      	sxthne	r6, r6
 8004dce:	e7ef      	b.n	8004db0 <_printf_i+0xbc>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	1d19      	adds	r1, r3, #4
 8004dd6:	6029      	str	r1, [r5, #0]
 8004dd8:	0601      	lsls	r1, r0, #24
 8004dda:	d501      	bpl.n	8004de0 <_printf_i+0xec>
 8004ddc:	681e      	ldr	r6, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <_printf_i+0xf2>
 8004de0:	0646      	lsls	r6, r0, #25
 8004de2:	d5fb      	bpl.n	8004ddc <_printf_i+0xe8>
 8004de4:	881e      	ldrh	r6, [r3, #0]
 8004de6:	4854      	ldr	r0, [pc, #336]	; (8004f38 <_printf_i+0x244>)
 8004de8:	2f6f      	cmp	r7, #111	; 0x6f
 8004dea:	bf0c      	ite	eq
 8004dec:	2308      	moveq	r3, #8
 8004dee:	230a      	movne	r3, #10
 8004df0:	2100      	movs	r1, #0
 8004df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df6:	6865      	ldr	r5, [r4, #4]
 8004df8:	60a5      	str	r5, [r4, #8]
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	bfa2      	ittt	ge
 8004dfe:	6821      	ldrge	r1, [r4, #0]
 8004e00:	f021 0104 	bicge.w	r1, r1, #4
 8004e04:	6021      	strge	r1, [r4, #0]
 8004e06:	b90e      	cbnz	r6, 8004e0c <_printf_i+0x118>
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	d04d      	beq.n	8004ea8 <_printf_i+0x1b4>
 8004e0c:	4615      	mov	r5, r2
 8004e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e12:	fb03 6711 	mls	r7, r3, r1, r6
 8004e16:	5dc7      	ldrb	r7, [r0, r7]
 8004e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e1c:	4637      	mov	r7, r6
 8004e1e:	42bb      	cmp	r3, r7
 8004e20:	460e      	mov	r6, r1
 8004e22:	d9f4      	bls.n	8004e0e <_printf_i+0x11a>
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d10b      	bne.n	8004e40 <_printf_i+0x14c>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	07de      	lsls	r6, r3, #31
 8004e2c:	d508      	bpl.n	8004e40 <_printf_i+0x14c>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6861      	ldr	r1, [r4, #4]
 8004e32:	4299      	cmp	r1, r3
 8004e34:	bfde      	ittt	le
 8004e36:	2330      	movle	r3, #48	; 0x30
 8004e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	6122      	str	r2, [r4, #16]
 8004e44:	f8cd a000 	str.w	sl, [sp]
 8004e48:	464b      	mov	r3, r9
 8004e4a:	aa03      	add	r2, sp, #12
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f7ff fee2 	bl	8004c18 <_printf_common>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d14c      	bne.n	8004ef2 <_printf_i+0x1fe>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	b004      	add	sp, #16
 8004e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e62:	4835      	ldr	r0, [pc, #212]	; (8004f38 <_printf_i+0x244>)
 8004e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e68:	6829      	ldr	r1, [r5, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e70:	6029      	str	r1, [r5, #0]
 8004e72:	061d      	lsls	r5, r3, #24
 8004e74:	d514      	bpl.n	8004ea0 <_printf_i+0x1ac>
 8004e76:	07df      	lsls	r7, r3, #31
 8004e78:	bf44      	itt	mi
 8004e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e7e:	6023      	strmi	r3, [r4, #0]
 8004e80:	b91e      	cbnz	r6, 8004e8a <_printf_i+0x196>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f023 0320 	bic.w	r3, r3, #32
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	e7b0      	b.n	8004df0 <_printf_i+0xfc>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	2378      	movs	r3, #120	; 0x78
 8004e98:	4828      	ldr	r0, [pc, #160]	; (8004f3c <_printf_i+0x248>)
 8004e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e9e:	e7e3      	b.n	8004e68 <_printf_i+0x174>
 8004ea0:	0659      	lsls	r1, r3, #25
 8004ea2:	bf48      	it	mi
 8004ea4:	b2b6      	uxthmi	r6, r6
 8004ea6:	e7e6      	b.n	8004e76 <_printf_i+0x182>
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	e7bb      	b.n	8004e24 <_printf_i+0x130>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	6826      	ldr	r6, [r4, #0]
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	1d18      	adds	r0, r3, #4
 8004eb4:	6028      	str	r0, [r5, #0]
 8004eb6:	0635      	lsls	r5, r6, #24
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0x1cc>
 8004ebc:	6019      	str	r1, [r3, #0]
 8004ebe:	e002      	b.n	8004ec6 <_printf_i+0x1d2>
 8004ec0:	0670      	lsls	r0, r6, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0x1c8>
 8004ec4:	8019      	strh	r1, [r3, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	4615      	mov	r5, r2
 8004ecc:	e7ba      	b.n	8004e44 <_printf_i+0x150>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	1d1a      	adds	r2, r3, #4
 8004ed2:	602a      	str	r2, [r5, #0]
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7fb f988 	bl	80001f0 <memchr>
 8004ee0:	b108      	cbz	r0, 8004ee6 <_printf_i+0x1f2>
 8004ee2:	1b40      	subs	r0, r0, r5
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	2300      	movs	r3, #0
 8004eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef0:	e7a8      	b.n	8004e44 <_printf_i+0x150>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	462a      	mov	r2, r5
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	47d0      	blx	sl
 8004efc:	3001      	adds	r0, #1
 8004efe:	d0ab      	beq.n	8004e58 <_printf_i+0x164>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	079b      	lsls	r3, r3, #30
 8004f04:	d413      	bmi.n	8004f2e <_printf_i+0x23a>
 8004f06:	68e0      	ldr	r0, [r4, #12]
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	bfb8      	it	lt
 8004f0e:	4618      	movlt	r0, r3
 8004f10:	e7a4      	b.n	8004e5c <_printf_i+0x168>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4632      	mov	r2, r6
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d09b      	beq.n	8004e58 <_printf_i+0x164>
 8004f20:	3501      	adds	r5, #1
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	9903      	ldr	r1, [sp, #12]
 8004f26:	1a5b      	subs	r3, r3, r1
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dcf2      	bgt.n	8004f12 <_printf_i+0x21e>
 8004f2c:	e7eb      	b.n	8004f06 <_printf_i+0x212>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	f104 0619 	add.w	r6, r4, #25
 8004f34:	e7f5      	b.n	8004f22 <_printf_i+0x22e>
 8004f36:	bf00      	nop
 8004f38:	080055ed 	.word	0x080055ed
 8004f3c:	080055fe 	.word	0x080055fe

08004f40 <_sbrk_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d06      	ldr	r5, [pc, #24]	; (8004f5c <_sbrk_r+0x1c>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	602b      	str	r3, [r5, #0]
 8004f4c:	f7fc f822 	bl	8000f94 <_sbrk>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_sbrk_r+0x1a>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_sbrk_r+0x1a>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	200008c8 	.word	0x200008c8

08004f60 <__sread>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	460c      	mov	r4, r1
 8004f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f68:	f000 fab2 	bl	80054d0 <_read_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	bfab      	itete	ge
 8004f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f72:	89a3      	ldrhlt	r3, [r4, #12]
 8004f74:	181b      	addge	r3, r3, r0
 8004f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f7a:	bfac      	ite	ge
 8004f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7e:	81a3      	strhlt	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__swrite>:
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	461f      	mov	r7, r3
 8004f88:	898b      	ldrh	r3, [r1, #12]
 8004f8a:	05db      	lsls	r3, r3, #23
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4616      	mov	r6, r2
 8004f92:	d505      	bpl.n	8004fa0 <__swrite+0x1e>
 8004f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f98:	2302      	movs	r3, #2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f000 f9c8 	bl	8005330 <_lseek_r>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	f000 b869 	b.w	800508c <_write_r>

08004fba <__sseek>:
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc2:	f000 f9b5 	bl	8005330 <_lseek_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	bf15      	itete	ne
 8004fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd6:	81a3      	strheq	r3, [r4, #12]
 8004fd8:	bf18      	it	ne
 8004fda:	81a3      	strhne	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__sclose>:
 8004fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe2:	f000 b8d3 	b.w	800518c <_close_r>
	...

08004fe8 <__swbuf_r>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	460e      	mov	r6, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	4605      	mov	r5, r0
 8004ff0:	b118      	cbz	r0, 8004ffa <__swbuf_r+0x12>
 8004ff2:	6983      	ldr	r3, [r0, #24]
 8004ff4:	b90b      	cbnz	r3, 8004ffa <__swbuf_r+0x12>
 8004ff6:	f7ff fb81 	bl	80046fc <__sinit>
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <__swbuf_r+0x98>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d12b      	bne.n	8005058 <__swbuf_r+0x70>
 8005000:	686c      	ldr	r4, [r5, #4]
 8005002:	69a3      	ldr	r3, [r4, #24]
 8005004:	60a3      	str	r3, [r4, #8]
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	071a      	lsls	r2, r3, #28
 800500a:	d52f      	bpl.n	800506c <__swbuf_r+0x84>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	b36b      	cbz	r3, 800506c <__swbuf_r+0x84>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	6963      	ldr	r3, [r4, #20]
 8005018:	b2f6      	uxtb	r6, r6
 800501a:	4283      	cmp	r3, r0
 800501c:	4637      	mov	r7, r6
 800501e:	dc04      	bgt.n	800502a <__swbuf_r+0x42>
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f000 f948 	bl	80052b8 <_fflush_r>
 8005028:	bb30      	cbnz	r0, 8005078 <__swbuf_r+0x90>
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	701e      	strb	r6, [r3, #0]
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	3001      	adds	r0, #1
 800503c:	4283      	cmp	r3, r0
 800503e:	d004      	beq.n	800504a <__swbuf_r+0x62>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	07db      	lsls	r3, r3, #31
 8005044:	d506      	bpl.n	8005054 <__swbuf_r+0x6c>
 8005046:	2e0a      	cmp	r6, #10
 8005048:	d104      	bne.n	8005054 <__swbuf_r+0x6c>
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f000 f933 	bl	80052b8 <_fflush_r>
 8005052:	b988      	cbnz	r0, 8005078 <__swbuf_r+0x90>
 8005054:	4638      	mov	r0, r7
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <__swbuf_r+0x9c>)
 800505a:	429c      	cmp	r4, r3
 800505c:	d101      	bne.n	8005062 <__swbuf_r+0x7a>
 800505e:	68ac      	ldr	r4, [r5, #8]
 8005060:	e7cf      	b.n	8005002 <__swbuf_r+0x1a>
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <__swbuf_r+0xa0>)
 8005064:	429c      	cmp	r4, r3
 8005066:	bf08      	it	eq
 8005068:	68ec      	ldreq	r4, [r5, #12]
 800506a:	e7ca      	b.n	8005002 <__swbuf_r+0x1a>
 800506c:	4621      	mov	r1, r4
 800506e:	4628      	mov	r0, r5
 8005070:	f000 f81e 	bl	80050b0 <__swsetup_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	d0cb      	beq.n	8005010 <__swbuf_r+0x28>
 8005078:	f04f 37ff 	mov.w	r7, #4294967295
 800507c:	e7ea      	b.n	8005054 <__swbuf_r+0x6c>
 800507e:	bf00      	nop
 8005080:	0800559c 	.word	0x0800559c
 8005084:	080055bc 	.word	0x080055bc
 8005088:	0800557c 	.word	0x0800557c

0800508c <_write_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d07      	ldr	r5, [pc, #28]	; (80050ac <_write_r+0x20>)
 8005090:	4604      	mov	r4, r0
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	2200      	movs	r2, #0
 8005098:	602a      	str	r2, [r5, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fb fa7a 	bl	8000594 <_write>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_write_r+0x1e>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_write_r+0x1e>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	200008c8 	.word	0x200008c8

080050b0 <__swsetup_r>:
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <__swsetup_r+0xcc>)
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	4606      	mov	r6, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	b125      	cbz	r5, 80050c6 <__swsetup_r+0x16>
 80050bc:	69ab      	ldr	r3, [r5, #24]
 80050be:	b913      	cbnz	r3, 80050c6 <__swsetup_r+0x16>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7ff fb1b 	bl	80046fc <__sinit>
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <__swsetup_r+0xd0>)
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d10f      	bne.n	80050ec <__swsetup_r+0x3c>
 80050cc:	686c      	ldr	r4, [r5, #4]
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d4:	0719      	lsls	r1, r3, #28
 80050d6:	d42c      	bmi.n	8005132 <__swsetup_r+0x82>
 80050d8:	06dd      	lsls	r5, r3, #27
 80050da:	d411      	bmi.n	8005100 <__swsetup_r+0x50>
 80050dc:	2309      	movs	r3, #9
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	e03e      	b.n	800516a <__swsetup_r+0xba>
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <__swsetup_r+0xd4>)
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d101      	bne.n	80050f6 <__swsetup_r+0x46>
 80050f2:	68ac      	ldr	r4, [r5, #8]
 80050f4:	e7eb      	b.n	80050ce <__swsetup_r+0x1e>
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <__swsetup_r+0xd8>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	bf08      	it	eq
 80050fc:	68ec      	ldreq	r4, [r5, #12]
 80050fe:	e7e6      	b.n	80050ce <__swsetup_r+0x1e>
 8005100:	0758      	lsls	r0, r3, #29
 8005102:	d512      	bpl.n	800512a <__swsetup_r+0x7a>
 8005104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005106:	b141      	cbz	r1, 800511a <__swsetup_r+0x6a>
 8005108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__swsetup_r+0x66>
 8005110:	4630      	mov	r0, r6
 8005112:	f000 f991 	bl	8005438 <_free_r>
 8005116:	2300      	movs	r3, #0
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	b94b      	cbnz	r3, 800514a <__swsetup_r+0x9a>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d003      	beq.n	800514a <__swsetup_r+0x9a>
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f92b 	bl	80053a0 <__smakebuf_r>
 800514a:	89a0      	ldrh	r0, [r4, #12]
 800514c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005150:	f010 0301 	ands.w	r3, r0, #1
 8005154:	d00a      	beq.n	800516c <__swsetup_r+0xbc>
 8005156:	2300      	movs	r3, #0
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6963      	ldr	r3, [r4, #20]
 800515c:	425b      	negs	r3, r3
 800515e:	61a3      	str	r3, [r4, #24]
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	b943      	cbnz	r3, 8005176 <__swsetup_r+0xc6>
 8005164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005168:	d1ba      	bne.n	80050e0 <__swsetup_r+0x30>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	0781      	lsls	r1, r0, #30
 800516e:	bf58      	it	pl
 8005170:	6963      	ldrpl	r3, [r4, #20]
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	e7f4      	b.n	8005160 <__swsetup_r+0xb0>
 8005176:	2000      	movs	r0, #0
 8005178:	e7f7      	b.n	800516a <__swsetup_r+0xba>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	0800559c 	.word	0x0800559c
 8005184:	080055bc 	.word	0x080055bc
 8005188:	0800557c 	.word	0x0800557c

0800518c <_close_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d06      	ldr	r5, [pc, #24]	; (80051a8 <_close_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb fec7 	bl	8000f2a <_close>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_close_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_close_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	200008c8 	.word	0x200008c8

080051ac <__sflush_r>:
 80051ac:	898a      	ldrh	r2, [r1, #12]
 80051ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b2:	4605      	mov	r5, r0
 80051b4:	0710      	lsls	r0, r2, #28
 80051b6:	460c      	mov	r4, r1
 80051b8:	d458      	bmi.n	800526c <__sflush_r+0xc0>
 80051ba:	684b      	ldr	r3, [r1, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dc05      	bgt.n	80051cc <__sflush_r+0x20>
 80051c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dc02      	bgt.n	80051cc <__sflush_r+0x20>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d0f9      	beq.n	80051c6 <__sflush_r+0x1a>
 80051d2:	2300      	movs	r3, #0
 80051d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051d8:	682f      	ldr	r7, [r5, #0]
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	d032      	beq.n	8005244 <__sflush_r+0x98>
 80051de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	075a      	lsls	r2, r3, #29
 80051e4:	d505      	bpl.n	80051f2 <__sflush_r+0x46>
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	1ac0      	subs	r0, r0, r3
 80051ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ec:	b10b      	cbz	r3, 80051f2 <__sflush_r+0x46>
 80051ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051f0:	1ac0      	subs	r0, r0, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	4602      	mov	r2, r0
 80051f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051f8:	6a21      	ldr	r1, [r4, #32]
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b0      	blx	r6
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	d106      	bne.n	8005212 <__sflush_r+0x66>
 8005204:	6829      	ldr	r1, [r5, #0]
 8005206:	291d      	cmp	r1, #29
 8005208:	d82c      	bhi.n	8005264 <__sflush_r+0xb8>
 800520a:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <__sflush_r+0x108>)
 800520c:	40ca      	lsrs	r2, r1
 800520e:	07d6      	lsls	r6, r2, #31
 8005210:	d528      	bpl.n	8005264 <__sflush_r+0xb8>
 8005212:	2200      	movs	r2, #0
 8005214:	6062      	str	r2, [r4, #4]
 8005216:	04d9      	lsls	r1, r3, #19
 8005218:	6922      	ldr	r2, [r4, #16]
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	d504      	bpl.n	8005228 <__sflush_r+0x7c>
 800521e:	1c42      	adds	r2, r0, #1
 8005220:	d101      	bne.n	8005226 <__sflush_r+0x7a>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b903      	cbnz	r3, 8005228 <__sflush_r+0x7c>
 8005226:	6560      	str	r0, [r4, #84]	; 0x54
 8005228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522a:	602f      	str	r7, [r5, #0]
 800522c:	2900      	cmp	r1, #0
 800522e:	d0ca      	beq.n	80051c6 <__sflush_r+0x1a>
 8005230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005234:	4299      	cmp	r1, r3
 8005236:	d002      	beq.n	800523e <__sflush_r+0x92>
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f8fd 	bl	8005438 <_free_r>
 800523e:	2000      	movs	r0, #0
 8005240:	6360      	str	r0, [r4, #52]	; 0x34
 8005242:	e7c1      	b.n	80051c8 <__sflush_r+0x1c>
 8005244:	6a21      	ldr	r1, [r4, #32]
 8005246:	2301      	movs	r3, #1
 8005248:	4628      	mov	r0, r5
 800524a:	47b0      	blx	r6
 800524c:	1c41      	adds	r1, r0, #1
 800524e:	d1c7      	bne.n	80051e0 <__sflush_r+0x34>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0c4      	beq.n	80051e0 <__sflush_r+0x34>
 8005256:	2b1d      	cmp	r3, #29
 8005258:	d001      	beq.n	800525e <__sflush_r+0xb2>
 800525a:	2b16      	cmp	r3, #22
 800525c:	d101      	bne.n	8005262 <__sflush_r+0xb6>
 800525e:	602f      	str	r7, [r5, #0]
 8005260:	e7b1      	b.n	80051c6 <__sflush_r+0x1a>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e7ad      	b.n	80051c8 <__sflush_r+0x1c>
 800526c:	690f      	ldr	r7, [r1, #16]
 800526e:	2f00      	cmp	r7, #0
 8005270:	d0a9      	beq.n	80051c6 <__sflush_r+0x1a>
 8005272:	0793      	lsls	r3, r2, #30
 8005274:	680e      	ldr	r6, [r1, #0]
 8005276:	bf08      	it	eq
 8005278:	694b      	ldreq	r3, [r1, #20]
 800527a:	600f      	str	r7, [r1, #0]
 800527c:	bf18      	it	ne
 800527e:	2300      	movne	r3, #0
 8005280:	eba6 0807 	sub.w	r8, r6, r7
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	f1b8 0f00 	cmp.w	r8, #0
 800528a:	dd9c      	ble.n	80051c6 <__sflush_r+0x1a>
 800528c:	6a21      	ldr	r1, [r4, #32]
 800528e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005290:	4643      	mov	r3, r8
 8005292:	463a      	mov	r2, r7
 8005294:	4628      	mov	r0, r5
 8005296:	47b0      	blx	r6
 8005298:	2800      	cmp	r0, #0
 800529a:	dc06      	bgt.n	80052aa <__sflush_r+0xfe>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e78e      	b.n	80051c8 <__sflush_r+0x1c>
 80052aa:	4407      	add	r7, r0
 80052ac:	eba8 0800 	sub.w	r8, r8, r0
 80052b0:	e7e9      	b.n	8005286 <__sflush_r+0xda>
 80052b2:	bf00      	nop
 80052b4:	20400001 	.word	0x20400001

080052b8 <_fflush_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	690b      	ldr	r3, [r1, #16]
 80052bc:	4605      	mov	r5, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	b913      	cbnz	r3, 80052c8 <_fflush_r+0x10>
 80052c2:	2500      	movs	r5, #0
 80052c4:	4628      	mov	r0, r5
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	b118      	cbz	r0, 80052d2 <_fflush_r+0x1a>
 80052ca:	6983      	ldr	r3, [r0, #24]
 80052cc:	b90b      	cbnz	r3, 80052d2 <_fflush_r+0x1a>
 80052ce:	f7ff fa15 	bl	80046fc <__sinit>
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <_fflush_r+0x6c>)
 80052d4:	429c      	cmp	r4, r3
 80052d6:	d11b      	bne.n	8005310 <_fflush_r+0x58>
 80052d8:	686c      	ldr	r4, [r5, #4]
 80052da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ef      	beq.n	80052c2 <_fflush_r+0xa>
 80052e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052e4:	07d0      	lsls	r0, r2, #31
 80052e6:	d404      	bmi.n	80052f2 <_fflush_r+0x3a>
 80052e8:	0599      	lsls	r1, r3, #22
 80052ea:	d402      	bmi.n	80052f2 <_fflush_r+0x3a>
 80052ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ee:	f7ff faa3 	bl	8004838 <__retarget_lock_acquire_recursive>
 80052f2:	4628      	mov	r0, r5
 80052f4:	4621      	mov	r1, r4
 80052f6:	f7ff ff59 	bl	80051ac <__sflush_r>
 80052fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052fc:	07da      	lsls	r2, r3, #31
 80052fe:	4605      	mov	r5, r0
 8005300:	d4e0      	bmi.n	80052c4 <_fflush_r+0xc>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	059b      	lsls	r3, r3, #22
 8005306:	d4dd      	bmi.n	80052c4 <_fflush_r+0xc>
 8005308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530a:	f7ff fa96 	bl	800483a <__retarget_lock_release_recursive>
 800530e:	e7d9      	b.n	80052c4 <_fflush_r+0xc>
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <_fflush_r+0x70>)
 8005312:	429c      	cmp	r4, r3
 8005314:	d101      	bne.n	800531a <_fflush_r+0x62>
 8005316:	68ac      	ldr	r4, [r5, #8]
 8005318:	e7df      	b.n	80052da <_fflush_r+0x22>
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <_fflush_r+0x74>)
 800531c:	429c      	cmp	r4, r3
 800531e:	bf08      	it	eq
 8005320:	68ec      	ldreq	r4, [r5, #12]
 8005322:	e7da      	b.n	80052da <_fflush_r+0x22>
 8005324:	0800559c 	.word	0x0800559c
 8005328:	080055bc 	.word	0x080055bc
 800532c:	0800557c 	.word	0x0800557c

08005330 <_lseek_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <_lseek_r+0x20>)
 8005334:	4604      	mov	r4, r0
 8005336:	4608      	mov	r0, r1
 8005338:	4611      	mov	r1, r2
 800533a:	2200      	movs	r2, #0
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	f7fb fe1a 	bl	8000f78 <_lseek>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_lseek_r+0x1e>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_lseek_r+0x1e>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	200008c8 	.word	0x200008c8

08005354 <__swhatbuf_r>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	460e      	mov	r6, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	2900      	cmp	r1, #0
 800535e:	b096      	sub	sp, #88	; 0x58
 8005360:	4614      	mov	r4, r2
 8005362:	461d      	mov	r5, r3
 8005364:	da08      	bge.n	8005378 <__swhatbuf_r+0x24>
 8005366:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	061a      	lsls	r2, r3, #24
 8005370:	d410      	bmi.n	8005394 <__swhatbuf_r+0x40>
 8005372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005376:	e00e      	b.n	8005396 <__swhatbuf_r+0x42>
 8005378:	466a      	mov	r2, sp
 800537a:	f000 f8bb 	bl	80054f4 <_fstat_r>
 800537e:	2800      	cmp	r0, #0
 8005380:	dbf1      	blt.n	8005366 <__swhatbuf_r+0x12>
 8005382:	9a01      	ldr	r2, [sp, #4]
 8005384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800538c:	425a      	negs	r2, r3
 800538e:	415a      	adcs	r2, r3
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	e7ee      	b.n	8005372 <__swhatbuf_r+0x1e>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	2000      	movs	r0, #0
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	b016      	add	sp, #88	; 0x58
 800539c:	bd70      	pop	{r4, r5, r6, pc}
	...

080053a0 <__smakebuf_r>:
 80053a0:	898b      	ldrh	r3, [r1, #12]
 80053a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053a4:	079d      	lsls	r5, r3, #30
 80053a6:	4606      	mov	r6, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	d507      	bpl.n	80053bc <__smakebuf_r+0x1c>
 80053ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	2301      	movs	r3, #1
 80053b6:	6163      	str	r3, [r4, #20]
 80053b8:	b002      	add	sp, #8
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	ab01      	add	r3, sp, #4
 80053be:	466a      	mov	r2, sp
 80053c0:	f7ff ffc8 	bl	8005354 <__swhatbuf_r>
 80053c4:	9900      	ldr	r1, [sp, #0]
 80053c6:	4605      	mov	r5, r0
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7ff fa57 	bl	800487c <_malloc_r>
 80053ce:	b948      	cbnz	r0, 80053e4 <__smakebuf_r+0x44>
 80053d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d4:	059a      	lsls	r2, r3, #22
 80053d6:	d4ef      	bmi.n	80053b8 <__smakebuf_r+0x18>
 80053d8:	f023 0303 	bic.w	r3, r3, #3
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	e7e3      	b.n	80053ac <__smakebuf_r+0xc>
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <__smakebuf_r+0x7c>)
 80053e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	6020      	str	r0, [r4, #0]
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	9b00      	ldr	r3, [sp, #0]
 80053f4:	6163      	str	r3, [r4, #20]
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	6120      	str	r0, [r4, #16]
 80053fa:	b15b      	cbz	r3, 8005414 <__smakebuf_r+0x74>
 80053fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005400:	4630      	mov	r0, r6
 8005402:	f000 f889 	bl	8005518 <_isatty_r>
 8005406:	b128      	cbz	r0, 8005414 <__smakebuf_r+0x74>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	89a0      	ldrh	r0, [r4, #12]
 8005416:	4305      	orrs	r5, r0
 8005418:	81a5      	strh	r5, [r4, #12]
 800541a:	e7cd      	b.n	80053b8 <__smakebuf_r+0x18>
 800541c:	08004695 	.word	0x08004695

08005420 <__malloc_lock>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__malloc_lock+0x8>)
 8005422:	f7ff ba09 	b.w	8004838 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	200008bc 	.word	0x200008bc

0800542c <__malloc_unlock>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__malloc_unlock+0x8>)
 800542e:	f7ff ba04 	b.w	800483a <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	200008bc 	.word	0x200008bc

08005438 <_free_r>:
 8005438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800543a:	2900      	cmp	r1, #0
 800543c:	d044      	beq.n	80054c8 <_free_r+0x90>
 800543e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005442:	9001      	str	r0, [sp, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f1a1 0404 	sub.w	r4, r1, #4
 800544a:	bfb8      	it	lt
 800544c:	18e4      	addlt	r4, r4, r3
 800544e:	f7ff ffe7 	bl	8005420 <__malloc_lock>
 8005452:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <_free_r+0x94>)
 8005454:	9801      	ldr	r0, [sp, #4]
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	b933      	cbnz	r3, 8005468 <_free_r+0x30>
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	6014      	str	r4, [r2, #0]
 800545e:	b003      	add	sp, #12
 8005460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005464:	f7ff bfe2 	b.w	800542c <__malloc_unlock>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d908      	bls.n	800547e <_free_r+0x46>
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	1961      	adds	r1, r4, r5
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1949      	addeq	r1, r1, r5
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	e7ed      	b.n	800545a <_free_r+0x22>
 800547e:	461a      	mov	r2, r3
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b10b      	cbz	r3, 8005488 <_free_r+0x50>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d9fa      	bls.n	800547e <_free_r+0x46>
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	1855      	adds	r5, r2, r1
 800548c:	42a5      	cmp	r5, r4
 800548e:	d10b      	bne.n	80054a8 <_free_r+0x70>
 8005490:	6824      	ldr	r4, [r4, #0]
 8005492:	4421      	add	r1, r4
 8005494:	1854      	adds	r4, r2, r1
 8005496:	42a3      	cmp	r3, r4
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	d1e0      	bne.n	800545e <_free_r+0x26>
 800549c:	681c      	ldr	r4, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	6053      	str	r3, [r2, #4]
 80054a2:	4421      	add	r1, r4
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	e7da      	b.n	800545e <_free_r+0x26>
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x78>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6003      	str	r3, [r0, #0]
 80054ae:	e7d6      	b.n	800545e <_free_r+0x26>
 80054b0:	6825      	ldr	r5, [r4, #0]
 80054b2:	1961      	adds	r1, r4, r5
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf04      	itt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	bf04      	itt	eq
 80054c0:	1949      	addeq	r1, r1, r5
 80054c2:	6021      	streq	r1, [r4, #0]
 80054c4:	6054      	str	r4, [r2, #4]
 80054c6:	e7ca      	b.n	800545e <_free_r+0x26>
 80054c8:	b003      	add	sp, #12
 80054ca:	bd30      	pop	{r4, r5, pc}
 80054cc:	200008c0 	.word	0x200008c0

080054d0 <_read_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	; (80054f0 <_read_r+0x20>)
 80054d4:	4604      	mov	r4, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fb fd06 	bl	8000ef0 <_read>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_read_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_read_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200008c8 	.word	0x200008c8

080054f4 <_fstat_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d07      	ldr	r5, [pc, #28]	; (8005514 <_fstat_r+0x20>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	f7fb fd1e 	bl	8000f42 <_fstat>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	d102      	bne.n	8005510 <_fstat_r+0x1c>
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	b103      	cbz	r3, 8005510 <_fstat_r+0x1c>
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	200008c8 	.word	0x200008c8

08005518 <_isatty_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_isatty_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fd1d 	bl	8000f62 <_isatty>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_isatty_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_isatty_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200008c8 	.word	0x200008c8

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
