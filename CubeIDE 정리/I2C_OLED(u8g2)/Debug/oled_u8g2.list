
oled_u8g2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a7c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047c4  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3ec  0800c3ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3f4  0800c3f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3f4  0800c3f4  0001c3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3f8  0800c3f8  0001c3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000d70  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d7c  20000d7c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056b2d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004073  00000000  00000000  00076b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037d8  00000000  00000000  0007abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003618  00000000  00000000  0007e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265cf  00000000  00000000  000819d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227dc  00000000  00000000  000a7f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4a05  00000000  00000000  000ca77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bf180  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f5f4  00000000  00000000  001bf1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007c10 	.word	0x08007c10

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08007c10 	.word	0x08007c10

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd4c 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f840 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f9b8 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f98e 	bl	8000820 <MX_DMA_Init>
  MX_ETH_Init();
 8000504:	f000 f8a6 	bl	8000654 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000508:	f000 f932 	bl	8000770 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050c:	f000 f95a 	bl	80007c4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000510:	f000 f8ee 	bl	80006f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
u8g2stm32_init(&u8g2);
 8000514:	4814      	ldr	r0, [pc, #80]	; (8000568 <main+0x78>)
 8000516:	f006 fe4d 	bl	80071b4 <u8g2stm32_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  u8g2_ClearBuffer(&u8g2);
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <main+0x78>)
 800051c:	f005 fbd0 	bl	8005cc0 <u8g2_ClearBuffer>
	  u8g2_SetFontMode(&u8g2, 1);
 8000520:	2101      	movs	r1, #1
 8000522:	4811      	ldr	r0, [pc, #68]	; (8000568 <main+0x78>)
 8000524:	f006 f92b 	bl	800677e <u8g2_SetFontMode>
	  u8g2_SetFontDirection(&u8g2, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x78>)
 800052c:	f006 fabc 	bl	8006aa8 <u8g2_SetFontDirection>

	  u8g2_SetFont(&u8g2, u8g2_font_cu12_hf);
 8000530:	490e      	ldr	r1, [pc, #56]	; (800056c <main+0x7c>)
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <main+0x78>)
 8000534:	f006 fa9e 	bl	8006a74 <u8g2_SetFont>
	  u8g2_DrawStr(&u8g2, 5, 15, "Hello OLED");
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x80>)
 800053a:	220f      	movs	r2, #15
 800053c:	2105      	movs	r1, #5
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x78>)
 8000540:	f006 f9dc 	bl	80068fc <u8g2_DrawStr>

	  u8g2_SetFont(&u8g2, u8g2_font_unifont_t_korean1);
 8000544:	490b      	ldr	r1, [pc, #44]	; (8000574 <main+0x84>)
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <main+0x78>)
 8000548:	f006 fa94 	bl	8006a74 <u8g2_SetFont>
	  u8g2_DrawUTF8(&u8g2, 5 , 35 ,"안녕 하세요");
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <main+0x88>)
 800054e:	2223      	movs	r2, #35	; 0x23
 8000550:	2105      	movs	r1, #5
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <main+0x78>)
 8000554:	f006 f9ec 	bl	8006930 <u8g2_DrawUTF8>
	  u8g2_SendBuffer(&u8g2);
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <main+0x78>)
 800055a:	f005 fc24 	bl	8005da6 <u8g2_SendBuffer>
	  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fd87 	bl	8001074 <HAL_Delay>
	  u8g2_ClearBuffer(&u8g2);
 8000566:	e7d8      	b.n	800051a <main+0x2a>
 8000568:	200008b4 	.word	0x200008b4
 800056c:	08007c68 	.word	0x08007c68
 8000570:	08007c28 	.word	0x08007c28
 8000574:	08008b6c 	.word	0x08008b6c
 8000578:	08007c34 	.word	0x08007c34

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fb38 	bl	8007c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f8fe 	bl	8004808 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000612:	f000 f9db 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f004 fb5f 	bl	8004cf8 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000640:	f000 f9c4 	bl	80009cc <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f001 f9c7 	bl	8001a38 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 f98c 	bl	80009cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f007 faa1 	bl	8007c00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a0 	.word	0x200001a0
 80006dc:	40028000 	.word	0x40028000
 80006e0:	20000948 	.word	0x20000948
 80006e4:	20000100 	.word	0x20000100
 80006e8:	20000060 	.word	0x20000060
 80006ec:	20000028 	.word	0x20000028

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_I2C1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_I2C1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_I2C1_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_I2C1_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_I2C1_Init+0x74>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_I2C1_Init+0x74>)
 800072e:	f001 fe71 	bl	8002414 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f948 	bl	80009cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_I2C1_Init+0x74>)
 8000740:	f003 fec9 	bl	80044d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800074a:	f000 f93f 	bl	80009cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x74>)
 8000752:	f003 fefc 	bl	800454e <HAL_I2CEx_ConfigDigitalFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f936 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000250 	.word	0x20000250
 8000768:	40005400 	.word	0x40005400
 800076c:	00061a80 	.word	0x00061a80

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART3_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART3_UART_Init+0x4c>)
 80007a8:	f004 fcc6 	bl	8005138 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f90b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000364 	.word	0x20000364
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	f003 fee0 	bl	80045cc <HAL_PCD_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8db 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200003a8 	.word	0x200003a8

08000820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DMA_Init+0x4c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_DMA_Init+0x4c>)
 8000830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2010      	movs	r0, #16
 8000848:	f000 fd13 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800084c:	2010      	movs	r0, #16
 800084e:	f000 fd2c 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	202f      	movs	r0, #47	; 0x2f
 8000858:	f000 fd0b 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800085c:	202f      	movs	r0, #47	; 0x2f
 800085e:	f000 fd24 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a4b      	ldr	r2, [pc, #300]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a44      	ldr	r2, [pc, #272]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b42      	ldr	r3, [pc, #264]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a36      	ldr	r2, [pc, #216]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0x14c>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0181 	movw	r1, #16513	; 0x4081
 8000934:	4822      	ldr	r0, [pc, #136]	; (80009c0 <MX_GPIO_Init+0x150>)
 8000936:	f001 fd53 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000940:	f001 fd4e 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x158>)
 800095c:	f001 fb94 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000960:	f244 0381 	movw	r3, #16513	; 0x4081
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x150>)
 800097a:	f001 fb85 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000996:	f001 fb77 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_GPIO_Init+0x154>)
 80009ae:	f001 fb6b 	bl	8002088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a55      	ldr	r2, [pc, #340]	; (8000b9c <HAL_ETH_MspInit+0x174>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	f040 80a4 	bne.w	8000b94 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a3d      	ldr	r2, [pc, #244]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_ETH_MspInit+0x178>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b10:	2332      	movs	r3, #50	; 0x32
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b20:	230b      	movs	r3, #11
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <HAL_ETH_MspInit+0x17c>)
 8000b2c:	f001 faac 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b30:	2386      	movs	r3, #134	; 0x86
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b40:	230b      	movs	r3, #11
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_ETH_MspInit+0x180>)
 8000b4c:	f001 fa9c 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b62:	230b      	movs	r3, #11
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <HAL_ETH_MspInit+0x184>)
 8000b6e:	f001 fa8b 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <HAL_ETH_MspInit+0x188>)
 8000b90:	f001 fa7a 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40028000 	.word	0x40028000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021800 	.word	0x40021800

08000bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a50      	ldr	r2, [pc, #320]	; (8000d14 <HAL_I2C_MspInit+0x160>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 8099 	bne.w	8000d0a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c06:	2304      	movs	r3, #4
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4842      	ldr	r0, [pc, #264]	; (8000d1c <HAL_I2C_MspInit+0x168>)
 8000c12:	f001 fa39 	bl	8002088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <HAL_I2C_MspInit+0x164>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c34:	4a3b      	ldr	r2, [pc, #236]	; (8000d24 <HAL_I2C_MspInit+0x170>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c3e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c42:	2240      	movs	r2, #64	; 0x40
 8000c44:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c72:	482b      	ldr	r0, [pc, #172]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c74:	f000 fb34 	bl	80012e0 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000c7e:	f7ff fea5 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
 8000c88:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_I2C_MspInit+0x16c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_I2C_MspInit+0x178>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000cd0:	f000 fb06 	bl	80012e0 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000cda:	f7ff fe77 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_I2C_MspInit+0x174>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	201f      	movs	r0, #31
 8000cf0:	f000 fabf 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cf4:	201f      	movs	r0, #31
 8000cf6:	f000 fad8 	bl	80012aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2020      	movs	r0, #32
 8000d00:	f000 fab7 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f000 fad0 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	200002a4 	.word	0x200002a4
 8000d24:	400260b8 	.word	0x400260b8
 8000d28:	20000304 	.word	0x20000304
 8000d2c:	40026088 	.word	0x40026088

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12c      	bne.n	8000dac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000da8:	f001 f96e 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004800 	.word	0x40004800
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de0:	d13f      	bne.n	8000e62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e10:	230a      	movs	r3, #10
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4815      	ldr	r0, [pc, #84]	; (8000e70 <HAL_PCD_MspInit+0xb0>)
 8000e1c:	f001 f934 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <HAL_PCD_MspInit+0xb0>)
 8000e36:	f001 f927 	bl	8002088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e44:	6353      	str	r3, [r2, #52]	; 0x34
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8b8 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Stream5_IRQHandler+0x10>)
 8000ece:	f000 fb2f 	bl	8001530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000304 	.word	0x20000304

08000edc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <I2C1_EV_IRQHandler+0x10>)
 8000ee2:	f001 fd0b 	bl	80028fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000250 	.word	0x20000250

08000ef0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <I2C1_ER_IRQHandler+0x10>)
 8000ef6:	f001 fe72 	bl	8002bde <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000250 	.word	0x20000250

08000f04 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA1_Stream7_IRQHandler+0x10>)
 8000f0a:	f000 fb11 	bl	8001530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200002a4 	.word	0x200002a4

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f006 fe25 	bl	8007bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fabf 	bl	80004f0 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	0800c3fc 	.word	0x0800c3fc
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	20000d7c 	.word	0x20000d7c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f94f 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fd08 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f967 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f92f 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20000950 	.word	0x20000950

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000950 	.word	0x20000950

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff feb6 	bl	800105c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e099      	b.n	8001430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e00f      	b.n	800133e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fe9d 	bl	800105c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d908      	bls.n	800133e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e078      	b.n	8001430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e8      	bne.n	800131e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_DMA_Init+0x158>)
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4313      	orrs	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d117      	bne.n	8001402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00e      	beq.n	8001402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 faab 	bl	8001940 <DMA_CheckFifoParam>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013fe:	2301      	movs	r3, #1
 8001400:	e016      	b.n	8001430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa62 	bl	80018d4 <DMA_CalcBaseAndBitshift>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	f010803f 	.word	0xf010803f

0800143c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_DMA_Start_IT+0x26>
 800145e:	2302      	movs	r3, #2
 8001460:	e040      	b.n	80014e4 <HAL_DMA_Start_IT+0xa8>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d12f      	bne.n	80014d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f9f4 	bl	8001878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0216 	orr.w	r2, r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0208 	orr.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e005      	b.n	80014e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d004      	beq.n	800150a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00c      	b.n	8001524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800153c:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_DMA_IRQHandler+0x248>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a8e      	ldr	r2, [pc, #568]	; (800177c <HAL_DMA_IRQHandler+0x24c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0a9b      	lsrs	r3, r3, #10
 8001548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2208      	movs	r2, #8
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01a      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	2208      	movs	r2, #8
 800158a:	409a      	lsls	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2201      	movs	r2, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f043 0202 	orr.w	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d012      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2204      	movs	r2, #4
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2210      	movs	r2, #16
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d043      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03c      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2210      	movs	r2, #16
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d018      	beq.n	8001672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d024      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
 800165e:	e01f      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e016      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0208 	bic.w	r2, r2, #8
 800168e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2220      	movs	r2, #32
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808f 	beq.w	80017d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8087 	beq.w	80017d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2220      	movs	r2, #32
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d136      	bne.n	8001748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0216 	bic.w	r2, r2, #22
 80016e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_DMA_IRQHandler+0x1da>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0208 	bic.w	r2, r2, #8
 8001718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	223f      	movs	r2, #63	; 0x3f
 8001720:	409a      	lsls	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	2b00      	cmp	r3, #0
 800173c:	d07e      	beq.n	800183c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
        }
        return;
 8001746:	e079      	b.n	800183c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01d      	beq.n	8001792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	2b00      	cmp	r3, #0
 800176a:	d031      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
 8001774:	e02c      	b.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
 8001776:	bf00      	nop
 8001778:	20000000 	.word	0x20000000
 800177c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
 8001790:	e01e      	b.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0210 	bic.w	r2, r2, #16
 80017ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d032      	beq.n	800183e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d022      	beq.n	800182a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2205      	movs	r2, #5
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	d307      	bcc.n	8001818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f2      	bne.n	80017fc <HAL_DMA_IRQHandler+0x2cc>
 8001816:	e000      	b.n	800181a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e000      	b.n	800183e <HAL_DMA_IRQHandler+0x30e>
        return;
 800183c:	bf00      	nop
    }
  }
}
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001852:	b2db      	uxtb	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d108      	bne.n	80018b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018b6:	e007      	b.n	80018c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3b10      	subs	r3, #16
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <DMA_CalcBaseAndBitshift+0x64>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <DMA_CalcBaseAndBitshift+0x68>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d909      	bls.n	8001916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
 8001914:	e007      	b.n	8001926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	aaaaaaab 	.word	0xaaaaaaab
 800193c:	08007c60 	.word	0x08007c60

08001940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11f      	bne.n	800199a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d856      	bhi.n	8001a0e <DMA_CheckFifoParam+0xce>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <DMA_CheckFifoParam+0x28>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	0800198b 	.word	0x0800198b
 8001970:	08001979 	.word	0x08001979
 8001974:	08001a0f 	.word	0x08001a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d046      	beq.n	8001a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e043      	b.n	8001a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001992:	d140      	bne.n	8001a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e03d      	b.n	8001a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d121      	bne.n	80019e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d837      	bhi.n	8001a1a <DMA_CheckFifoParam+0xda>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <DMA_CheckFifoParam+0x70>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019c7 	.word	0x080019c7
 80019b8:	080019c1 	.word	0x080019c1
 80019bc:	080019d9 	.word	0x080019d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      break;
 80019c4:	e030      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d025      	beq.n	8001a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d6:	e022      	b.n	8001a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019e6:	e01c      	b.n	8001a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d903      	bls.n	80019f6 <DMA_CheckFifoParam+0xb6>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d003      	beq.n	80019fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f4:	e018      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
      break;
 80019fa:	e015      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e00b      	b.n	8001a26 <DMA_CheckFifoParam+0xe6>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e00a      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a12:	bf00      	nop
 8001a14:	e008      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e006      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e004      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e002      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
    }
  } 
  
  return status; 
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06c      	b.n	8001b24 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d106      	bne.n	8001a62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2223      	movs	r2, #35	; 0x23
 8001a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7fe ffe3 	bl	8000a28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_ETH_Init+0xf4>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_ETH_Init+0xf4>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_ETH_Init+0xf4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_ETH_Init+0xf8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_ETH_Init+0xf8>)
 8001a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_ETH_Init+0xf8>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4927      	ldr	r1, [pc, #156]	; (8001b30 <HAL_ETH_Init+0xf8>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_ETH_Init+0xf8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab4:	f7ff fad2 	bl	800105c <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001aba:	e011      	b.n	8001ae0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001abc:	f7ff face 	bl	800105c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aca:	d909      	bls.n	8001ae0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	22e0      	movs	r2, #224	; 0xe0
 8001ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e021      	b.n	8001b24 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e4      	bne.n	8001abc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f958 	bl	8001da8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f9ff 	bl	8001efc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fa55 	bl	8001fae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9bd 	bl	8001e8c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800

08001b34 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <ETH_SetMACConfig+0x15c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7c1b      	ldrb	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <ETH_SetMACConfig+0x28>
 8001b56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b5a:	e000      	b.n	8001b5e <ETH_SetMACConfig+0x2a>
 8001b5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	7c5b      	ldrb	r3, [r3, #17]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <ETH_SetMACConfig+0x38>
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	e000      	b.n	8001b6e <ETH_SetMACConfig+0x3a>
 8001b6c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7fdb      	ldrb	r3, [r3, #31]
 8001b7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	7f92      	ldrb	r2, [r2, #30]
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d102      	bne.n	8001b92 <ETH_SetMACConfig+0x5e>
 8001b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b90:	e000      	b.n	8001b94 <ETH_SetMACConfig+0x60>
 8001b92:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	7f1b      	ldrb	r3, [r3, #28]
 8001b9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d102      	bne.n	8001bbc <ETH_SetMACConfig+0x88>
 8001bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bba:	e000      	b.n	8001bbe <ETH_SetMACConfig+0x8a>
 8001bbc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7bdb      	ldrb	r3, [r3, #15]
 8001bc4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bc6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fa40 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d101      	bne.n	8001c22 <ETH_SetMACConfig+0xee>
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	e000      	b.n	8001c24 <ETH_SetMACConfig+0xf0>
 8001c22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c32:	2a01      	cmp	r2, #1
 8001c34:	d101      	bne.n	8001c3a <ETH_SetMACConfig+0x106>
 8001c36:	2208      	movs	r2, #8
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0x108>
 8001c3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001c44:	2a01      	cmp	r2, #1
 8001c46:	d101      	bne.n	8001c4c <ETH_SetMACConfig+0x118>
 8001c48:	2204      	movs	r2, #4
 8001c4a:	e000      	b.n	8001c4e <ETH_SetMACConfig+0x11a>
 8001c4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001c56:	2a01      	cmp	r2, #1
 8001c58:	d101      	bne.n	8001c5e <ETH_SetMACConfig+0x12a>
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	e000      	b.n	8001c60 <ETH_SetMACConfig+0x12c>
 8001c5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c60:	4313      	orrs	r3, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff f9fb 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	ff20810f 	.word	0xff20810f

08001c94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <ETH_SetDMAConfig+0x110>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7b1b      	ldrb	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <ETH_SetDMAConfig+0x2c>
 8001cba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cbe:	e000      	b.n	8001cc2 <ETH_SetDMAConfig+0x2e>
 8001cc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	7b5b      	ldrb	r3, [r3, #13]
 8001cc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	7f52      	ldrb	r2, [r2, #29]
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d102      	bne.n	8001cd8 <ETH_SetDMAConfig+0x44>
 8001cd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cd6:	e000      	b.n	8001cda <ETH_SetDMAConfig+0x46>
 8001cd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7b9b      	ldrb	r3, [r3, #14]
 8001ce0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ce2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7f1b      	ldrb	r3, [r3, #28]
 8001cee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001cf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7f9b      	ldrb	r3, [r3, #30]
 8001cf6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cf8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cfe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff f9a2 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff f973 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f8de3f23 	.word	0xf8de3f23

08001da8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0a6      	sub	sp, #152	; 0x98
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001de4:	2300      	movs	r3, #0
 8001de6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fe86 	bl	8001b34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e54:	2301      	movs	r3, #1
 8001e56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff08 	bl	8001c94 <ETH_SetDMAConfig>
}
 8001e84:	bf00      	nop
 8001e86:	3798      	adds	r7, #152	; 0x98
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	3204      	adds	r2, #4
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <ETH_MACAddressConfig+0x68>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <ETH_MACAddressConfig+0x6c>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40028040 	.word	0x40028040
 8001ef8:	40028044 	.word	0x40028044

08001efc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e03e      	b.n	8001f88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	3206      	adds	r2, #6
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d80c      	bhi.n	8001f6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68d9      	ldr	r1, [r3, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	e004      	b.n	8001f76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d9bd      	bls.n	8001f0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e046      	b.n	800204a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6919      	ldr	r1, [r3, #16]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002000:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	3212      	adds	r2, #18
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d80c      	bhi.n	800203a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6919      	ldr	r1, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	e004      	b.n	8002044 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d9b5      	bls.n	8001fbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207a:	60da      	str	r2, [r3, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e177      	b.n	8002394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8166 	bne.w	800238e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80c0 	beq.w	800238e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a65      	ldr	r2, [pc, #404]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222a:	4a61      	ldr	r2, [pc, #388]	; (80023b0 <HAL_GPIO_Init+0x328>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_GPIO_Init+0x32c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d037      	beq.n	80022c6 <HAL_GPIO_Init+0x23e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x330>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_GPIO_Init+0x23a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a56      	ldr	r2, [pc, #344]	; (80023bc <HAL_GPIO_Init+0x334>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02b      	beq.n	80022be <HAL_GPIO_Init+0x236>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a55      	ldr	r2, [pc, #340]	; (80023c0 <HAL_GPIO_Init+0x338>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d025      	beq.n	80022ba <HAL_GPIO_Init+0x232>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_GPIO_Init+0x33c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <HAL_GPIO_Init+0x22e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <HAL_GPIO_Init+0x340>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x22a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x344>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x226>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_GPIO_Init+0x348>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x222>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_GPIO_Init+0x34c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x21e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <HAL_GPIO_Init+0x350>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x21a>
 800229e:	2309      	movs	r3, #9
 80022a0:	e012      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022a2:	230a      	movs	r3, #10
 80022a4:	e010      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022a6:	2308      	movs	r3, #8
 80022a8:	e00e      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x328>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_GPIO_Init+0x354>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a34      	ldr	r2, [pc, #208]	; (80023dc <HAL_GPIO_Init+0x354>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_GPIO_Init+0x354>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_GPIO_Init+0x354>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae84 	bls.w	80020a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022400 	.word	0x40022400
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e12b      	b.n	800267e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fbba 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002478:	f002 fe36 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a81      	ldr	r2, [pc, #516]	; (8002688 <HAL_I2C_Init+0x274>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d807      	bhi.n	8002498 <HAL_I2C_Init+0x84>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a80      	ldr	r2, [pc, #512]	; (800268c <HAL_I2C_Init+0x278>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e006      	b.n	80024a6 <HAL_I2C_Init+0x92>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a7d      	ldr	r2, [pc, #500]	; (8002690 <HAL_I2C_Init+0x27c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0e7      	b.n	800267e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a78      	ldr	r2, [pc, #480]	; (8002694 <HAL_I2C_Init+0x280>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9b      	lsrs	r3, r3, #18
 80024b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_I2C_Init+0x274>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d802      	bhi.n	80024e8 <HAL_I2C_Init+0xd4>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	e009      	b.n	80024fc <HAL_I2C_Init+0xe8>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a69      	ldr	r2, [pc, #420]	; (8002698 <HAL_I2C_Init+0x284>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	3301      	adds	r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800250e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	495c      	ldr	r1, [pc, #368]	; (8002688 <HAL_I2C_Init+0x274>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d819      	bhi.n	8002550 <HAL_I2C_Init+0x13c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e59      	subs	r1, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb1 f3f3 	udiv	r3, r1, r3
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002530:	400b      	ands	r3, r1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_I2C_Init+0x138>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e59      	subs	r1, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fbb1 f3f3 	udiv	r3, r1, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	e051      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 800254c:	2304      	movs	r3, #4
 800254e:	e04f      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <HAL_I2C_Init+0x168>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e012      	b.n	80025a2 <HAL_I2C_Init+0x18e>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e58      	subs	r0, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	0099      	lsls	r1, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x196>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e022      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10e      	bne.n	80025d0 <HAL_I2C_Init+0x1bc>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e58      	subs	r0, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	440b      	add	r3, r1
 80025c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ce:	e00f      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	0099      	lsls	r1, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	6809      	ldr	r1, [r1, #0]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800261e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6911      	ldr	r1, [r2, #16]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	430b      	orrs	r3, r1
 8002632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	000186a0 	.word	0x000186a0
 800268c:	001e847f 	.word	0x001e847f
 8002690:	003d08ff 	.word	0x003d08ff
 8002694:	431bde83 	.word	0x431bde83
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	461a      	mov	r2, r3
 80026a8:	460b      	mov	r3, r1
 80026aa:	817b      	strh	r3, [r7, #10]
 80026ac:	4613      	mov	r3, r2
 80026ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b20      	cmp	r3, #32
 80026be:	f040 810d 	bne.w	80028dc <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	08db      	lsrs	r3, r3, #3
 80026c8:	4a88      	ldr	r2, [pc, #544]	; (80028ec <HAL_I2C_Master_Transmit_DMA+0x250>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a1a      	lsrs	r2, r3, #8
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	3b01      	subs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0e3      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b02      	cmp	r3, #2
 8002722:	d0db      	beq.n	80026dc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Master_Transmit_DMA+0x96>
 800272e:	2302      	movs	r3, #2
 8002730:	e0d5      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x242>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d007      	beq.n	8002758 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2221      	movs	r2, #33	; 0x21
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2210      	movs	r2, #16
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	893a      	ldrh	r2, [r7, #8]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800279a:	897a      	ldrh	r2, [r7, #10]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d07b      	beq.n	80028a0 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02a      	beq.n	8002806 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_I2C_Master_Transmit_DMA+0x258>)
 80027b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	4a4e      	ldr	r2, [pc, #312]	; (80028f8 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 80027be:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	2200      	movs	r2, #0
 80027d6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2200      	movs	r2, #0
 80027de:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3310      	adds	r3, #16
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	f7fe fe21 	bl	800143c <HAL_DMA_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d139      	bne.n	8002878 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8002804:	e013      	b.n	800282e <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e057      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002844:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002854:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002864:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e02f      	b.n	80028d8 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e01e      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ae:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80028d6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	14f8b589 	.word	0x14f8b589
 80028f0:	ffff0000 	.word	0xffff0000
 80028f4:	080040c9 	.word	0x080040c9
 80028f8:	08004273 	.word	0x08004273

080028fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800291c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b10      	cmp	r3, #16
 800292a:	d003      	beq.n	8002934 <HAL_I2C_EV_IRQHandler+0x38>
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	f040 80c1 	bne.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <HAL_I2C_EV_IRQHandler+0x6e>
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002954:	d003      	beq.n	800295e <HAL_I2C_EV_IRQHandler+0x62>
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800295c:	d101      	bne.n	8002962 <HAL_I2C_EV_IRQHandler+0x66>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_I2C_EV_IRQHandler+0x68>
 8002962:	2300      	movs	r3, #0
 8002964:	2b01      	cmp	r3, #1
 8002966:	f000 8132 	beq.w	8002bce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0x92>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	0a5b      	lsrs	r3, r3, #9
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f001 fd8d 	bl	80044a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fd83 	bl	8003492 <I2C_Master_SB>
 800298c:	e092      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0xb2>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	0a5b      	lsrs	r3, r3, #9
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fdf9 	bl	800359e <I2C_Master_ADD10>
 80029ac:	e082      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_I2C_EV_IRQHandler+0xd2>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	0a5b      	lsrs	r3, r3, #9
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fe13 	bl	80035f2 <I2C_Master_ADDR>
 80029cc:	e072      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d03b      	beq.n	8002a52 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e8:	f000 80f3 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	09db      	lsrs	r3, r3, #7
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00f      	beq.n	8002a18 <HAL_I2C_EV_IRQHandler+0x11c>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_I2C_EV_IRQHandler+0x11c>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9f3 	bl	8002dfc <I2C_MasterTransmit_TXE>
 8002a16:	e04d      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80d6 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80cf 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	2b21      	cmp	r3, #33	; 0x21
 8002a38:	d103      	bne.n	8002a42 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa7a 	bl	8002f34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a40:	e0c7      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	f040 80c4 	bne.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fae8 	bl	8003020 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a50:	e0bf      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a60:	f000 80b7 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00f      	beq.n	8002a90 <HAL_I2C_EV_IRQHandler+0x194>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <HAL_I2C_EV_IRQHandler+0x194>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fb5d 	bl	8003148 <I2C_MasterReceive_RXNE>
 8002a8e:	e011      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 809a 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8093 	beq.w	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fc06 	bl	80032be <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab2:	e08e      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ab4:	e08d      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e007      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x20e>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	0a5b      	lsrs	r3, r3, #9
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 ffc4 	bl	8003a90 <I2C_Slave_ADDR>
 8002b08:	e066      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x22e>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	0a5b      	lsrs	r3, r3, #9
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fffe 	bl	8003b24 <I2C_Slave_STOPF>
 8002b28:	e056      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b2a:	7bbb      	ldrb	r3, [r7, #14]
 8002b2c:	2b21      	cmp	r3, #33	; 0x21
 8002b2e:	d002      	beq.n	8002b36 <HAL_I2C_EV_IRQHandler+0x23a>
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	2b29      	cmp	r3, #41	; 0x29
 8002b34:	d125      	bne.n	8002b82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	09db      	lsrs	r3, r3, #7
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00f      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x266>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	0a9b      	lsrs	r3, r3, #10
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x266>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 feda 	bl	8003914 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b60:	e039      	b.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d033      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	0a5b      	lsrs	r3, r3, #9
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02d      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 ff07 	bl	800398e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b80:	e029      	b.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00f      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	0a9b      	lsrs	r3, r3, #10
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 ff12 	bl	80039d0 <I2C_SlaveReceive_RXNE>
 8002bac:	e014      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	0a5b      	lsrs	r3, r3, #9
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 ff40 	bl	8003a4c <I2C_SlaveReceive_BTF>
 8002bcc:	e004      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b08a      	sub	sp, #40	; 0x28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <HAL_I2C_ER_IRQHandler+0x4e>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <HAL_I2C_ER_IRQHandler+0x78>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c54:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	0a9b      	lsrs	r3, r3, #10
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03f      	beq.n	8002ce2 <HAL_I2C_ER_IRQHandler+0x104>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d039      	beq.n	8002ce2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c6e:	7efb      	ldrb	r3, [r7, #27]
 8002c70:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c88:	7ebb      	ldrb	r3, [r7, #26]
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d112      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b21      	cmp	r3, #33	; 0x21
 8002c98:	d008      	beq.n	8002cac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b29      	cmp	r3, #41	; 0x29
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_ER_IRQHandler+0xce>
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b28      	cmp	r3, #40	; 0x28
 8002ca4:	d106      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b21      	cmp	r3, #33	; 0x21
 8002caa:	d103      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 f869 	bl	8003d84 <I2C_Slave_AF>
 8002cb2:	e016      	b.n	8002ce2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cbc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cc6:	7efb      	ldrb	r3, [r7, #27]
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d002      	beq.n	8002cd2 <HAL_I2C_ER_IRQHandler+0xf4>
 8002ccc:	7efb      	ldrb	r3, [r7, #27]
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	0adb      	lsrs	r3, r3, #11
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x12e>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002d0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 f8a0 	bl	8003e64 <I2C_ITError>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d150      	bne.n	8002ec4 <I2C_MasterTransmit_TXE+0xc8>
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b21      	cmp	r3, #33	; 0x21
 8002e26:	d14d      	bne.n	8002ec4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d01d      	beq.n	8002e6a <I2C_MasterTransmit_TXE+0x6e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d01a      	beq.n	8002e6a <I2C_MasterTransmit_TXE+0x6e>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e3a:	d016      	beq.n	8002e6a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e4a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2211      	movs	r2, #17
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff62 	bl	8002d2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e68:	e060      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e78:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d107      	bne.n	8002eb4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff7d 	bl	8002dac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eb2:	e03b      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff35 	bl	8002d2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ec2:	e033      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b21      	cmp	r3, #33	; 0x21
 8002ec8:	d005      	beq.n	8002ed6 <I2C_MasterTransmit_TXE+0xda>
 8002eca:	7bbb      	ldrb	r3, [r7, #14]
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d12d      	bne.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d12a      	bne.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ef0:	e01c      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d103      	bne.n	8002f06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f88e 	bl	8003020 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f04:	e012      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f2a:	e7ff      	b.n	8002f2c <I2C_MasterTransmit_TXE+0x130>
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b21      	cmp	r3, #33	; 0x21
 8002f4c:	d164      	bne.n	8003018 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f7c:	e04c      	b.n	8003018 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d01d      	beq.n	8002fc0 <I2C_MasterTransmit_BTF+0x8c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d01a      	beq.n	8002fc0 <I2C_MasterTransmit_BTF+0x8c>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f90:	d016      	beq.n	8002fc0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fa0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2211      	movs	r2, #17
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff feb7 	bl	8002d2c <HAL_I2C_MasterTxCpltCallback>
}
 8002fbe:	e02b      	b.n	8003018 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d107      	bne.n	800300a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fed2 	bl	8002dac <HAL_I2C_MemTxCpltCallback>
}
 8003008:	e006      	b.n	8003018 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe8a 	bl	8002d2c <HAL_I2C_MasterTxCpltCallback>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11d      	bne.n	8003074 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10b      	bne.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	b2da      	uxtb	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003056:	e073      	b.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	b29b      	uxth	r3, r3
 800305e:	121b      	asrs	r3, r3, #8
 8003060:	b2da      	uxtb	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003072:	e065      	b.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10b      	bne.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	b2da      	uxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003092:	e055      	b.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	2b02      	cmp	r3, #2
 800309a:	d151      	bne.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b22      	cmp	r3, #34	; 0x22
 80030a0:	d10d      	bne.n	80030be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030bc:	e040      	b.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b21      	cmp	r3, #33	; 0x21
 80030cc:	d112      	bne.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030f2:	e025      	b.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d120      	bne.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b21      	cmp	r3, #33	; 0x21
 8003102:	d11d      	bne.n	8003140 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003112:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fe36 	bl	8002dac <HAL_I2C_MemTxCpltCallback>
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b22      	cmp	r3, #34	; 0x22
 800315a:	f040 80ac 	bne.w	80032b6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d921      	bls.n	80031b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b03      	cmp	r3, #3
 800319a:	f040 808c 	bne.w	80032b6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ac:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031ae:	e082      	b.n	80032b6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d075      	beq.n	80032a4 <I2C_MasterReceive_RXNE+0x15c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <I2C_MasterReceive_RXNE+0x7c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d16f      	bne.n	80032a4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f001 f939 	bl	800443c <I2C_WaitOnSTOPRequestThroughIT>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d142      	bne.n	8003256 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d10a      	bne.n	8003240 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fdc1 	bl	8002dc0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800323e:	e03a      	b.n	80032b6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2212      	movs	r2, #18
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fd76 	bl	8002d40 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003254:	e02f      	b.n	80032b6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003264:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fd99 	bl	8002dd4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032a2:	e008      	b.n	80032b6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b2:	605a      	str	r2, [r3, #4]
}
 80032b4:	e7ff      	b.n	80032b6 <I2C_MasterReceive_RXNE+0x16e>
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d11b      	bne.n	800330e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800330c:	e0bd      	b.n	800348a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b03      	cmp	r3, #3
 8003316:	d129      	bne.n	800336c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00a      	beq.n	8003344 <I2C_MasterReceive_BTF+0x86>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d007      	beq.n	8003344 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800336a:	e08e      	b.n	800348a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d176      	bne.n	8003464 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d002      	beq.n	8003382 <I2C_MasterReceive_BTF+0xc4>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b10      	cmp	r3, #16
 8003380:	d108      	bne.n	8003394 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e019      	b.n	80033c8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d002      	beq.n	80033a0 <I2C_MasterReceive_BTF+0xe2>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d108      	bne.n	80033b2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e00a      	b.n	80033c8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d007      	beq.n	80033c8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003422:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d10a      	bne.n	800344e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fcba 	bl	8002dc0 <HAL_I2C_MemRxCpltCallback>
}
 800344c:	e01d      	b.n	800348a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2212      	movs	r2, #18
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff fc6f 	bl	8002d40 <HAL_I2C_MasterRxCpltCallback>
}
 8003462:	e012      	b.n	800348a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d117      	bne.n	80034d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034c0:	e067      	b.n	8003592 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
}
 80034d4:	e05d      	b.n	8003592 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034de:	d133      	bne.n	8003548 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b21      	cmp	r3, #33	; 0x21
 80034ea:	d109      	bne.n	8003500 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034fc:	611a      	str	r2, [r3, #16]
 80034fe:	e008      	b.n	8003512 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <I2C_Master_SB+0x92>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	2b00      	cmp	r3, #0
 800352a:	d032      	beq.n	8003592 <I2C_Master_SB+0x100>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02d      	beq.n	8003592 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003544:	605a      	str	r2, [r3, #4]
}
 8003546:	e024      	b.n	8003592 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	b29b      	uxth	r3, r3
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]
}
 800356c:	e011      	b.n	8003592 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10d      	bne.n	8003592 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	b29b      	uxth	r3, r3
 800357c:	11db      	asrs	r3, r3, #7
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f003 0306 	and.w	r3, r3, #6
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f063 030e 	orn	r3, r3, #14
 800358a:	b2da      	uxtb	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <I2C_Master_ADD10+0x26>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <I2C_Master_ADD10+0x48>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e4:	605a      	str	r2, [r3, #4]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b091      	sub	sp, #68	; 0x44
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b22      	cmp	r3, #34	; 0x22
 800361a:	f040 8169 	bne.w	80038f0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <I2C_Master_ADDR+0x54>
 8003626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d10b      	bne.n	8003646 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	633b      	str	r3, [r7, #48]	; 0x30
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	e160      	b.n	8003908 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11d      	bne.n	800368a <I2C_Master_ADDR+0x98>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003656:	d118      	bne.n	800368a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	651a      	str	r2, [r3, #80]	; 0x50
 8003688:	e13e      	b.n	8003908 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d113      	bne.n	80036bc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e115      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f040 808a 	bne.w	80037dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ce:	d137      	bne.n	8003740 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d113      	bne.n	8003718 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	e0e7      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e0d3      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	2b08      	cmp	r3, #8
 8003744:	d02e      	beq.n	80037a4 <I2C_Master_ADDR+0x1b2>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b20      	cmp	r3, #32
 800374a:	d02b      	beq.n	80037a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	2b12      	cmp	r3, #18
 8003750:	d102      	bne.n	8003758 <I2C_Master_ADDR+0x166>
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b01      	cmp	r3, #1
 8003756:	d125      	bne.n	80037a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b04      	cmp	r3, #4
 800375c:	d00e      	beq.n	800377c <I2C_Master_ADDR+0x18a>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2b02      	cmp	r3, #2
 8003762:	d00b      	beq.n	800377c <I2C_Master_ADDR+0x18a>
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	2b10      	cmp	r3, #16
 8003768:	d008      	beq.n	800377c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e007      	b.n	800378c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800378a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	e0a1      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e085      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d14d      	bne.n	8003882 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d016      	beq.n	800381a <I2C_Master_ADDR+0x228>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d013      	beq.n	800381a <I2C_Master_ADDR+0x228>
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d010      	beq.n	800381a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e007      	b.n	800382a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003828:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003838:	d117      	bne.n	800386a <I2C_Master_ADDR+0x278>
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003840:	d00b      	beq.n	800385a <I2C_Master_ADDR+0x268>
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	2b01      	cmp	r3, #1
 8003846:	d008      	beq.n	800385a <I2C_Master_ADDR+0x268>
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	2b08      	cmp	r3, #8
 800384c:	d005      	beq.n	800385a <I2C_Master_ADDR+0x268>
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2b10      	cmp	r3, #16
 8003852:	d002      	beq.n	800385a <I2C_Master_ADDR+0x268>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	2b20      	cmp	r3, #32
 8003858:	d107      	bne.n	800386a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003868:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	e032      	b.n	80038e8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003890:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	d117      	bne.n	80038d2 <I2C_Master_ADDR+0x2e0>
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a8:	d00b      	beq.n	80038c2 <I2C_Master_ADDR+0x2d0>
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d008      	beq.n	80038c2 <I2C_Master_ADDR+0x2d0>
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d005      	beq.n	80038c2 <I2C_Master_ADDR+0x2d0>
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d002      	beq.n	80038c2 <I2C_Master_ADDR+0x2d0>
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d107      	bne.n	80038d2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038ee:	e00b      	b.n	8003908 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
}
 8003906:	e7ff      	b.n	8003908 <I2C_Master_ADDR+0x316>
 8003908:	bf00      	nop
 800390a:	3744      	adds	r7, #68	; 0x44
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02b      	beq.n	8003986 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d114      	bne.n	8003986 <I2C_SlaveTransmit_TXE+0x72>
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b29      	cmp	r3, #41	; 0x29
 8003960:	d111      	bne.n	8003986 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2228      	movs	r2, #40	; 0x28
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff f9e7 	bl	8002d54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d011      	beq.n	80039c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02c      	beq.n	8003a44 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d114      	bne.n	8003a44 <I2C_SlaveReceive_RXNE+0x74>
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a1e:	d111      	bne.n	8003a44 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2222      	movs	r2, #34	; 0x22
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2228      	movs	r2, #40	; 0x28
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff f992 	bl	8002d68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aaa:	2b28      	cmp	r3, #40	; 0x28
 8003aac:	d127      	bne.n	8003afe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	09db      	lsrs	r3, r3, #7
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	81bb      	strh	r3, [r7, #12]
 8003ae0:	e002      	b.n	8003ae8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003af0:	89ba      	ldrh	r2, [r7, #12]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff f940 	bl	8002d7c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003afc:	e00e      	b.n	8003b1c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b32:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b42:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b80:	d172      	bne.n	8003c68 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b22      	cmp	r3, #34	; 0x22
 8003b86:	d002      	beq.n	8003b8e <I2C_Slave_STOPF+0x6a>
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8c:	d135      	bne.n	8003bfa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fe3c 	bl	8001844 <HAL_DMA_GetState>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d049      	beq.n	8003c66 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	4a69      	ldr	r2, [pc, #420]	; (8003d7c <I2C_Slave_STOPF+0x258>)
 8003bd8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fc84 	bl	80014ec <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03d      	beq.n	8003c66 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bf8:	e035      	b.n	8003c66 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fe06 	bl	8001844 <HAL_DMA_GetState>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d014      	beq.n	8003c68 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	4a4e      	ldr	r2, [pc, #312]	; (8003d7c <I2C_Slave_STOPF+0x258>)
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fc4e 	bl	80014ec <HAL_DMA_Abort_IT>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c60:	4610      	mov	r0, r2
 8003c62:	4798      	blx	r3
 8003c64:	e000      	b.n	8003c68 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c66:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03e      	beq.n	8003cf0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d112      	bne.n	8003ca6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d112      	bne.n	8003cda <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8b3 	bl	8003e64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cfe:	e039      	b.n	8003d74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b2a      	cmp	r3, #42	; 0x2a
 8003d04:	d109      	bne.n	8003d1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2228      	movs	r2, #40	; 0x28
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff f827 	bl	8002d68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b28      	cmp	r3, #40	; 0x28
 8003d24:	d111      	bne.n	8003d4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <I2C_Slave_STOPF+0x25c>)
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff f828 	bl	8002d98 <HAL_I2C_ListenCpltCallback>
}
 8003d48:	e014      	b.n	8003d74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	d002      	beq.n	8003d58 <I2C_Slave_STOPF+0x234>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b22      	cmp	r3, #34	; 0x22
 8003d56:	d10d      	bne.n	8003d74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fffa 	bl	8002d68 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	080042ed 	.word	0x080042ed
 8003d80:	ffff0000 	.word	0xffff0000

08003d84 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d002      	beq.n	8003da6 <I2C_Slave_AF+0x22>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d129      	bne.n	8003dfa <I2C_Slave_AF+0x76>
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b28      	cmp	r3, #40	; 0x28
 8003daa:	d126      	bne.n	8003dfa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <I2C_Slave_AF+0xdc>)
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dc0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe ffd0 	bl	8002d98 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003df8:	e02e      	b.n	8003e58 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b21      	cmp	r3, #33	; 0x21
 8003dfe:	d126      	bne.n	8003e4e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <I2C_Slave_AF+0xdc>)
 8003e04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2221      	movs	r2, #33	; 0x21
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e2a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e34:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe ff84 	bl	8002d54 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e4c:	e004      	b.n	8003e58 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e56:	615a      	str	r2, [r3, #20]
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e7c:	7bbb      	ldrb	r3, [r7, #14]
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d002      	beq.n	8003e88 <I2C_ITError+0x24>
 8003e82:	7bbb      	ldrb	r3, [r7, #14]
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d10a      	bne.n	8003e9e <I2C_ITError+0x3a>
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	d107      	bne.n	8003e9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ea4:	2b28      	cmp	r3, #40	; 0x28
 8003ea6:	d107      	bne.n	8003eb8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2228      	movs	r2, #40	; 0x28
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eb6:	e015      	b.n	8003ee4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec6:	d00a      	beq.n	8003ede <I2C_ITError+0x7a>
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b60      	cmp	r3, #96	; 0x60
 8003ecc:	d007      	beq.n	8003ede <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef2:	d162      	bne.n	8003fba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d020      	beq.n	8003f54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	4a6a      	ldr	r2, [pc, #424]	; (80040c0 <I2C_ITError+0x25c>)
 8003f18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fae4 	bl	80014ec <HAL_DMA_Abort_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8089 	beq.w	800403e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4798      	blx	r3
 8003f52:	e074      	b.n	800403e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	4a59      	ldr	r2, [pc, #356]	; (80040c0 <I2C_ITError+0x25c>)
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fac3 	bl	80014ec <HAL_DMA_Abort_IT>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d068      	beq.n	800403e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d10b      	bne.n	8003f92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4798      	blx	r3
 8003fb8:	e041      	b.n	800403e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b60      	cmp	r3, #96	; 0x60
 8003fc4:	d125      	bne.n	8004012 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d10b      	bne.n	8003ffa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe feec 	bl	8002de8 <HAL_I2C_AbortCpltCallback>
 8004010:	e015      	b.n	800403e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d10b      	bne.n	8004038 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fe fecb 	bl	8002dd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800407a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d113      	bne.n	80040b8 <I2C_ITError+0x254>
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b28      	cmp	r3, #40	; 0x28
 8004094:	d110      	bne.n	80040b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <I2C_ITError+0x260>)
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe fe70 	bl	8002d98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	080042ed 	.word	0x080042ed
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040fa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	2200      	movs	r2, #0
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	2200      	movs	r2, #0
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004122:	2b21      	cmp	r3, #33	; 0x21
 8004124:	d007      	beq.n	8004136 <I2C_DMAXferCplt+0x6e>
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800412c:	2b22      	cmp	r3, #34	; 0x22
 800412e:	d131      	bne.n	8004194 <I2C_DMAXferCplt+0xcc>
 8004130:	7cbb      	ldrb	r3, [r7, #18]
 8004132:	2b20      	cmp	r3, #32
 8004134:	d12e      	bne.n	8004194 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004144:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b29      	cmp	r3, #41	; 0x29
 8004150:	d10a      	bne.n	8004168 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2228      	movs	r2, #40	; 0x28
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fe fdf7 	bl	8002d54 <HAL_I2C_SlaveTxCpltCallback>
 8004166:	e00c      	b.n	8004182 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	2b2a      	cmp	r3, #42	; 0x2a
 800416c:	d109      	bne.n	8004182 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2222      	movs	r2, #34	; 0x22
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2228      	movs	r2, #40	; 0x28
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800417c:	6978      	ldr	r0, [r7, #20]
 800417e:	f7fe fdf3 	bl	8002d68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004190:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004192:	e06a      	b.n	800426a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d064      	beq.n	800426a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d0:	d009      	beq.n	80041e6 <I2C_DMAXferCplt+0x11e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d006      	beq.n	80041e6 <I2C_DMAXferCplt+0x11e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041de:	d002      	beq.n	80041e6 <I2C_DMAXferCplt+0x11e>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d107      	bne.n	80041f6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004204:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004214:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	f7fe fdd5 	bl	8002dd4 <HAL_I2C_ErrorCallback>
}
 800422a:	e01e      	b.n	800426a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d10a      	bne.n	8004256 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f7fe fdb6 	bl	8002dc0 <HAL_I2C_MemRxCpltCallback>
}
 8004254:	e009      	b.n	800426a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2212      	movs	r2, #18
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	f7fe fd6b 	bl	8002d40 <HAL_I2C_MasterRxCpltCallback>
}
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	2200      	movs	r2, #0
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	2200      	movs	r2, #0
 800429e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fd fadd 	bl	8001860 <HAL_DMA_GetError>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d01b      	beq.n	80042e4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ba:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7fe fd78 	bl	8002dd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004306:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <I2C_DMAAbort+0x148>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	08db      	lsrs	r3, r3, #3
 800430c:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <I2C_DMAAbort+0x14c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a1a      	lsrs	r2, r3, #8
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00da      	lsls	r2, r3, #3
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004332:	e00a      	b.n	800434a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004348:	d0ea      	beq.n	8004320 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	2200      	movs	r2, #0
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	2200      	movs	r2, #0
 8004368:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	2200      	movs	r2, #0
 800438e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	2200      	movs	r2, #0
 800439e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d10e      	bne.n	80043da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7fe fd08 	bl	8002de8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043d8:	e027      	b.n	800442a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e0:	2b28      	cmp	r3, #40	; 0x28
 80043e2:	d117      	bne.n	8004414 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004402:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2228      	movs	r2, #40	; 0x28
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004412:	e007      	b.n	8004424 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f7fe fcd5 	bl	8002dd4 <HAL_I2C_ErrorCallback>
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000
 8004438:	14f8b589 	.word	0x14f8b589

0800443c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0a1a      	lsrs	r2, r3, #8
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e008      	b.n	800448c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d0e9      	beq.n	800445e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	20000000 	.word	0x20000000
 800449c:	14f8b589 	.word	0x14f8b589

080044a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044b0:	d103      	bne.n	80044ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044b8:	e007      	b.n	80044ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044c2:	d102      	bne.n	80044ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2208      	movs	r2, #8
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d129      	bne.n	8004540 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	d12a      	bne.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b29a      	uxth	r2, r3
 8004594:	89fb      	ldrh	r3, [r7, #14]
 8004596:	4313      	orrs	r3, r2
 8004598:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	89fa      	ldrh	r2, [r7, #14]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b08f      	sub	sp, #60	; 0x3c
 80045d0:	af0a      	add	r7, sp, #40	; 0x28
 80045d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e10f      	b.n	80047fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fc fbe1 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2203      	movs	r2, #3
 8004602:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f8ae 	bl	800577e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	687e      	ldr	r6, [r7, #4]
 800462a:	466d      	mov	r5, sp
 800462c:	f106 0410 	add.w	r4, r6, #16
 8004630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004638:	e894 0003 	ldmia.w	r4, {r0, r1}
 800463c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004640:	1d33      	adds	r3, r6, #4
 8004642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004644:	6838      	ldr	r0, [r7, #0]
 8004646:	f001 f839 	bl	80056bc <USB_CoreInit>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0d0      	b.n	80047fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f89c 	bl	80057a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e04a      	b.n	8004704 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333d      	adds	r3, #61	; 0x3d
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	333c      	adds	r3, #60	; 0x3c
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	b298      	uxth	r0, r3
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	3344      	adds	r3, #68	; 0x44
 80046aa:	4602      	mov	r2, r0
 80046ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	3340      	adds	r3, #64	; 0x40
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3348      	adds	r3, #72	; 0x48
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	334c      	adds	r3, #76	; 0x4c
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046ea:	7bfa      	ldrb	r2, [r7, #15]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3354      	adds	r3, #84	; 0x54
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3301      	adds	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3af      	bcc.n	800466e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e044      	b.n	800479e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004782:	7bfa      	ldrb	r2, [r7, #15]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3301      	adds	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3b5      	bcc.n	8004714 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	687e      	ldr	r6, [r7, #4]
 80047b0:	466d      	mov	r5, sp
 80047b2:	f106 0410 	add.w	r4, r6, #16
 80047b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80047c6:	1d33      	adds	r3, r6, #4
 80047c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ca:	6838      	ldr	r0, [r7, #0]
 80047cc:	f001 f834 	bl	8005838 <USB_DevInit>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00d      	b.n	80047fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 f9ff 	bl	8005bfa <USB_DevDisconnect>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e267      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d075      	beq.n	8004912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00c      	beq.n	800484c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004832:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d112      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4b7e      	ldr	r3, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05b      	beq.n	8004910 <HAL_RCC_OscConfig+0x108>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d157      	bne.n	8004910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e242      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d106      	bne.n	800487c <HAL_RCC_OscConfig+0x74>
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e01d      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x98>
 8004886:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a6f      	ldr	r2, [pc, #444]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 80048a0:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a68      	ldr	r2, [pc, #416]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a65      	ldr	r2, [pc, #404]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d013      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fc fbcc 	bl	800105c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fc fbc8 	bl	800105c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e207      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fc fbb8 	bl	800105c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fc fbb4 	bl	800105c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1f3      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0xe8>
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	2b08      	cmp	r3, #8
 8004934:	d11c      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e1c7      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4937      	ldr	r1, [pc, #220]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496e:	e03a      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004978:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fc fb6d 	bl	800105c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004986:	f7fc fb69 	bl	800105c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1a8      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4925      	ldr	r1, [pc, #148]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
 80049b8:	e015      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fc fb4c 	bl	800105c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fc fb48 	bl	800105c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e187      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d036      	beq.n	8004a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fc fb2c 	bl	800105c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fc fb28 	bl	800105c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e167      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x200>
 8004a26:	e01b      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fc fb15 	bl	800105c <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	e00e      	b.n	8004a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fc fb11 	bl	800105c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d907      	bls.n	8004a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e150      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	42470000 	.word	0x42470000
 8004a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a54:	4b88      	ldr	r3, [pc, #544]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ea      	bne.n	8004a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8097 	beq.w	8004b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	4b7d      	ldr	r3, [pc, #500]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	4a7c      	ldr	r2, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b77      	ldr	r3, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a73      	ldr	r2, [pc, #460]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fc fad1 	bl	800105c <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fc facd 	bl	800105c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e10c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2ea>
 8004ae4:	4b64      	ldr	r3, [pc, #400]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a63      	ldr	r2, [pc, #396]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	e01c      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x30c>
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6713      	str	r3, [r2, #112]	; 0x70
 8004b06:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004b14:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	4b55      	ldr	r3, [pc, #340]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b26:	f023 0304 	bic.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fc fa92 	bl	800105c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fc fa8e 	bl	800105c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0cb      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	4b49      	ldr	r3, [pc, #292]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ee      	beq.n	8004b3c <HAL_RCC_OscConfig+0x334>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b60:	f7fc fa7c 	bl	800105c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b68:	f7fc fa78 	bl	800105c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0b5      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ee      	bne.n	8004b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a1 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d05c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d141      	bne.n	8004c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fc fa4c 	bl	800105c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fc fa48 	bl	800105c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e087      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	491b      	ldr	r1, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fc fa21 	bl	800105c <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fc fa1d 	bl	800105c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e05c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x416>
 8004c3c:	e054      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fc fa0a 	bl	800105c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc fa06 	bl	800105c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e045      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x444>
 8004c6a:	e03d      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e038      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d121      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d11a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d111      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90c      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0b8      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	494d      	ldr	r1, [pc, #308]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e067      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4934      	ldr	r1, [pc, #208]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fc f938 	bl	800105c <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fc f934 	bl	800105c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 020c 	and.w	r2, r3, #12
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1eb      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20c      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4916      	ldr	r1, [pc, #88]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7e:	f000 f821 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	5ccb      	ldrb	r3, [r1, r3]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fc f898 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	08007c48 	.word	0x08007c48
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	b094      	sub	sp, #80	; 0x50
 8004eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004edc:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	f200 80e1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef6:	e0db      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004efc:	e0db      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efe:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f02:	e0d8      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d063      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	2200      	movs	r2, #0
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2e:	2300      	movs	r3, #0
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f48:	0150      	lsls	r0, r2, #5
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4621      	mov	r1, r4
 8004f50:	1a51      	subs	r1, r2, r1
 8004f52:	6139      	str	r1, [r7, #16]
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	018b      	lsls	r3, r1, #6
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f72:	4651      	mov	r1, sl
 8004f74:	018a      	lsls	r2, r1, #6
 8004f76:	4651      	mov	r1, sl
 8004f78:	ebb2 0801 	subs.w	r8, r2, r1
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f96:	4690      	mov	r8, r2
 8004f98:	4699      	mov	r9, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	eb18 0303 	adds.w	r3, r8, r3
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	eb49 0303 	adc.w	r3, r9, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	024b      	lsls	r3, r1, #9
 8004fba:	4621      	mov	r1, r4
 8004fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	024a      	lsls	r2, r1, #9
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fca:	2200      	movs	r2, #0
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd4:	f7fb f90a 	bl	80001ec <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	4611      	mov	r1, r2
 8004fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	f04f 0000 	mov.w	r0, #0
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	0159      	lsls	r1, r3, #5
 800500a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500e:	0150      	lsls	r0, r2, #5
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4641      	mov	r1, r8
 8005016:	ebb2 0a01 	subs.w	sl, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800502c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005034:	ebb2 040a 	subs.w	r4, r2, sl
 8005038:	eb63 050b 	sbc.w	r5, r3, fp
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	00eb      	lsls	r3, r5, #3
 8005046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4643      	mov	r3, r8
 8005052:	18e3      	adds	r3, r4, r3
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	464b      	mov	r3, r9
 8005058:	eb45 0303 	adc.w	r3, r5, r3
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506a:	4629      	mov	r1, r5
 800506c:	028b      	lsls	r3, r1, #10
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005074:	4621      	mov	r1, r4
 8005076:	028a      	lsls	r2, r1, #10
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	2200      	movs	r2, #0
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	61fa      	str	r2, [r7, #28]
 8005084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005088:	f7fb f8b0 	bl	80001ec <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3750      	adds	r7, #80	; 0x50
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	007a1200 	.word	0x007a1200

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	08007c58 	.word	0x08007c58

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	08007c58 	.word	0x08007c58

08005138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e03f      	b.n	80051ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fb fde6 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	; 0x24
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800517a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f829 	bl	80051d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b0c0      	sub	sp, #256	; 0x100
 80051da:	af00      	add	r7, sp, #0
 80051dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	ea40 0301 	orr.w	r3, r0, r1
 80051fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	431a      	orrs	r2, r3
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800522c:	f021 010c 	bic.w	r1, r1, #12
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800523a:	430b      	orrs	r3, r1
 800523c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	6999      	ldr	r1, [r3, #24]
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	ea40 0301 	orr.w	r3, r0, r1
 800525a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b8f      	ldr	r3, [pc, #572]	; (80054a0 <UART_SetConfig+0x2cc>)
 8005264:	429a      	cmp	r2, r3
 8005266:	d005      	beq.n	8005274 <UART_SetConfig+0xa0>
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b8d      	ldr	r3, [pc, #564]	; (80054a4 <UART_SetConfig+0x2d0>)
 8005270:	429a      	cmp	r2, r3
 8005272:	d104      	bne.n	800527e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7ff ff4c 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8005278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800527c:	e003      	b.n	8005286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527e:	f7ff ff33 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8005282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005290:	f040 810c 	bne.w	80054ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800529e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052a6:	4622      	mov	r2, r4
 80052a8:	462b      	mov	r3, r5
 80052aa:	1891      	adds	r1, r2, r2
 80052ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80052ae:	415b      	adcs	r3, r3
 80052b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052b6:	4621      	mov	r1, r4
 80052b8:	eb12 0801 	adds.w	r8, r2, r1
 80052bc:	4629      	mov	r1, r5
 80052be:	eb43 0901 	adc.w	r9, r3, r1
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d6:	4690      	mov	r8, r2
 80052d8:	4699      	mov	r9, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	eb18 0303 	adds.w	r3, r8, r3
 80052e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052e4:	462b      	mov	r3, r5
 80052e6:	eb49 0303 	adc.w	r3, r9, r3
 80052ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005302:	460b      	mov	r3, r1
 8005304:	18db      	adds	r3, r3, r3
 8005306:	653b      	str	r3, [r7, #80]	; 0x50
 8005308:	4613      	mov	r3, r2
 800530a:	eb42 0303 	adc.w	r3, r2, r3
 800530e:	657b      	str	r3, [r7, #84]	; 0x54
 8005310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005318:	f7fa ff68 	bl	80001ec <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4b61      	ldr	r3, [pc, #388]	; (80054a8 <UART_SetConfig+0x2d4>)
 8005322:	fba3 2302 	umull	r2, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	011c      	lsls	r4, r3, #4
 800532a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	1891      	adds	r1, r2, r2
 8005342:	64b9      	str	r1, [r7, #72]	; 0x48
 8005344:	415b      	adcs	r3, r3
 8005346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800534c:	4641      	mov	r1, r8
 800534e:	eb12 0a01 	adds.w	sl, r2, r1
 8005352:	4649      	mov	r1, r9
 8005354:	eb43 0b01 	adc.w	fp, r3, r1
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536c:	4692      	mov	sl, r2
 800536e:	469b      	mov	fp, r3
 8005370:	4643      	mov	r3, r8
 8005372:	eb1a 0303 	adds.w	r3, sl, r3
 8005376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800537a:	464b      	mov	r3, r9
 800537c:	eb4b 0303 	adc.w	r3, fp, r3
 8005380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005390:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005398:	460b      	mov	r3, r1
 800539a:	18db      	adds	r3, r3, r3
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
 800539e:	4613      	mov	r3, r2
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
 80053a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053ae:	f7fa ff1d 	bl	80001ec <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4611      	mov	r1, r2
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <UART_SetConfig+0x2d4>)
 80053ba:	fba3 2301 	umull	r2, r3, r3, r1
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	2264      	movs	r2, #100	; 0x64
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	1acb      	subs	r3, r1, r3
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <UART_SetConfig+0x2d4>)
 80053d0:	fba3 2302 	umull	r2, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053dc:	441c      	add	r4, r3
 80053de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	1891      	adds	r1, r2, r2
 80053f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053f8:	415b      	adcs	r3, r3
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005400:	4641      	mov	r1, r8
 8005402:	1851      	adds	r1, r2, r1
 8005404:	6339      	str	r1, [r7, #48]	; 0x30
 8005406:	4649      	mov	r1, r9
 8005408:	414b      	adcs	r3, r1
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005418:	4659      	mov	r1, fp
 800541a:	00cb      	lsls	r3, r1, #3
 800541c:	4651      	mov	r1, sl
 800541e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005422:	4651      	mov	r1, sl
 8005424:	00ca      	lsls	r2, r1, #3
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	4603      	mov	r3, r0
 800542c:	4642      	mov	r2, r8
 800542e:	189b      	adds	r3, r3, r2
 8005430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005434:	464b      	mov	r3, r9
 8005436:	460a      	mov	r2, r1
 8005438:	eb42 0303 	adc.w	r3, r2, r3
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800544c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005454:	460b      	mov	r3, r1
 8005456:	18db      	adds	r3, r3, r3
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
 800545a:	4613      	mov	r3, r2
 800545c:	eb42 0303 	adc.w	r3, r2, r3
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800546a:	f7fa febf 	bl	80001ec <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <UART_SetConfig+0x2d4>)
 8005474:	fba3 1302 	umull	r1, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2164      	movs	r1, #100	; 0x64
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <UART_SetConfig+0x2d4>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0207 	and.w	r2, r3, #7
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4422      	add	r2, r4
 800549a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800549c:	e105      	b.n	80056aa <UART_SetConfig+0x4d6>
 800549e:	bf00      	nop
 80054a0:	40011000 	.word	0x40011000
 80054a4:	40011400 	.word	0x40011400
 80054a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	6239      	str	r1, [r7, #32]
 80054c6:	415b      	adcs	r3, r3
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ce:	4641      	mov	r1, r8
 80054d0:	1854      	adds	r4, r2, r1
 80054d2:	4649      	mov	r1, r9
 80054d4:	eb43 0501 	adc.w	r5, r3, r1
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	00eb      	lsls	r3, r5, #3
 80054e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e6:	00e2      	lsls	r2, r4, #3
 80054e8:	4614      	mov	r4, r2
 80054ea:	461d      	mov	r5, r3
 80054ec:	4643      	mov	r3, r8
 80054ee:	18e3      	adds	r3, r4, r3
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054f4:	464b      	mov	r3, r9
 80054f6:	eb45 0303 	adc.w	r3, r5, r3
 80054fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800551a:	4629      	mov	r1, r5
 800551c:	008b      	lsls	r3, r1, #2
 800551e:	4621      	mov	r1, r4
 8005520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005524:	4621      	mov	r1, r4
 8005526:	008a      	lsls	r2, r1, #2
 8005528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800552c:	f7fa fe5e 	bl	80001ec <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <UART_SetConfig+0x4e4>)
 8005536:	fba3 2302 	umull	r2, r3, r3, r2
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	011c      	lsls	r4, r3, #4
 800553e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800554c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	1891      	adds	r1, r2, r2
 8005556:	61b9      	str	r1, [r7, #24]
 8005558:	415b      	adcs	r3, r3
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005560:	4641      	mov	r1, r8
 8005562:	1851      	adds	r1, r2, r1
 8005564:	6139      	str	r1, [r7, #16]
 8005566:	4649      	mov	r1, r9
 8005568:	414b      	adcs	r3, r1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005578:	4659      	mov	r1, fp
 800557a:	00cb      	lsls	r3, r1, #3
 800557c:	4651      	mov	r1, sl
 800557e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005582:	4651      	mov	r1, sl
 8005584:	00ca      	lsls	r2, r1, #3
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	4603      	mov	r3, r0
 800558c:	4642      	mov	r2, r8
 800558e:	189b      	adds	r3, r3, r2
 8005590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005594:	464b      	mov	r3, r9
 8005596:	460a      	mov	r2, r1
 8005598:	eb42 0303 	adc.w	r3, r2, r3
 800559c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055b8:	4649      	mov	r1, r9
 80055ba:	008b      	lsls	r3, r1, #2
 80055bc:	4641      	mov	r1, r8
 80055be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055c2:	4641      	mov	r1, r8
 80055c4:	008a      	lsls	r2, r1, #2
 80055c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055ca:	f7fa fe0f 	bl	80001ec <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <UART_SetConfig+0x4e4>)
 80055d4:	fba3 1302 	umull	r1, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	2164      	movs	r1, #100	; 0x64
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	3332      	adds	r3, #50	; 0x32
 80055e6:	4a34      	ldr	r2, [pc, #208]	; (80056b8 <UART_SetConfig+0x4e4>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f2:	441c      	add	r4, r3
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f8:	2200      	movs	r2, #0
 80055fa:	673b      	str	r3, [r7, #112]	; 0x70
 80055fc:	677a      	str	r2, [r7, #116]	; 0x74
 80055fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005602:	4642      	mov	r2, r8
 8005604:	464b      	mov	r3, r9
 8005606:	1891      	adds	r1, r2, r2
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	415b      	adcs	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005612:	4641      	mov	r1, r8
 8005614:	1851      	adds	r1, r2, r1
 8005616:	6039      	str	r1, [r7, #0]
 8005618:	4649      	mov	r1, r9
 800561a:	414b      	adcs	r3, r1
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800562a:	4659      	mov	r1, fp
 800562c:	00cb      	lsls	r3, r1, #3
 800562e:	4651      	mov	r1, sl
 8005630:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005634:	4651      	mov	r1, sl
 8005636:	00ca      	lsls	r2, r1, #3
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	4603      	mov	r3, r0
 800563e:	4642      	mov	r2, r8
 8005640:	189b      	adds	r3, r3, r2
 8005642:	66bb      	str	r3, [r7, #104]	; 0x68
 8005644:	464b      	mov	r3, r9
 8005646:	460a      	mov	r2, r1
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	663b      	str	r3, [r7, #96]	; 0x60
 8005658:	667a      	str	r2, [r7, #100]	; 0x64
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005666:	4649      	mov	r1, r9
 8005668:	008b      	lsls	r3, r1, #2
 800566a:	4641      	mov	r1, r8
 800566c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005670:	4641      	mov	r1, r8
 8005672:	008a      	lsls	r2, r1, #2
 8005674:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005678:	f7fa fdb8 	bl	80001ec <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <UART_SetConfig+0x4e4>)
 8005682:	fba3 1302 	umull	r1, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	3332      	adds	r3, #50	; 0x32
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <UART_SetConfig+0x4e4>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4422      	add	r2, r4
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	bf00      	nop
 80056ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056b0:	46bd      	mov	sp, r7
 80056b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b6:	bf00      	nop
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056bc:	b084      	sub	sp, #16
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	f107 001c 	add.w	r0, r7, #28
 80056ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d122      	bne.n	800571a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 faa2 	bl	8005c58 <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e01a      	b.n	8005750 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa96 	bl	8005c58 <USB_CoreReset>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
 8005742:	e005      	b.n	8005750 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10b      	bne.n	800576e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f043 0206 	orr.w	r2, r3, #6
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577a:	b004      	add	sp, #16
 800577c:	4770      	bx	lr

0800577e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d115      	bne.n	80057ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7fb fc50 	bl	8001074 <HAL_Delay>
      ms++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa2e 	bl	8005c3c <USB_GetMode>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d01e      	beq.n	8005824 <USB_SetCurrentMode+0x84>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b31      	cmp	r3, #49	; 0x31
 80057ea:	d9f0      	bls.n	80057ce <USB_SetCurrentMode+0x2e>
 80057ec:	e01a      	b.n	8005824 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d115      	bne.n	8005820 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005800:	2001      	movs	r0, #1
 8005802:	f7fb fc37 	bl	8001074 <HAL_Delay>
      ms++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa15 	bl	8005c3c <USB_GetMode>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <USB_SetCurrentMode+0x84>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b31      	cmp	r3, #49	; 0x31
 800581c:	d9f0      	bls.n	8005800 <USB_SetCurrentMode+0x60>
 800581e:	e001      	b.n	8005824 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e005      	b.n	8005830 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b32      	cmp	r3, #50	; 0x32
 8005828:	d101      	bne.n	800582e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005838:	b084      	sub	sp, #16
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	e009      	b.n	800586c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3340      	adds	r3, #64	; 0x40
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3301      	adds	r3, #1
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b0e      	cmp	r3, #14
 8005870:	d9f2      	bls.n	8005858 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11c      	bne.n	80058b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005886:	f043 0302 	orr.w	r3, r3, #2
 800588a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
 80058b0:	e00b      	b.n	80058ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	4619      	mov	r1, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	461a      	mov	r2, r3
 80058e6:	680b      	ldr	r3, [r1, #0]
 80058e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d10c      	bne.n	800590a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058f6:	2100      	movs	r1, #0
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f965 	bl	8005bc8 <USB_SetDevSpeed>
 80058fe:	e008      	b.n	8005912 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005900:	2101      	movs	r1, #1
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f960 	bl	8005bc8 <USB_SetDevSpeed>
 8005908:	e003      	b.n	8005912 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800590a:	2103      	movs	r1, #3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f95b 	bl	8005bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005912:	2110      	movs	r1, #16
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8f3 	bl	8005b00 <USB_FlushTxFifo>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f91f 	bl	8005b68 <USB_FlushRxFifo>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	461a      	mov	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	461a      	mov	r2, r3
 8005948:	2300      	movs	r3, #0
 800594a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	e043      	b.n	80059e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005974:	d118      	bne.n	80059a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e013      	b.n	80059ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	461a      	mov	r2, r3
 80059a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e008      	b.n	80059ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	461a      	mov	r2, r3
 80059b6:	2300      	movs	r3, #0
 80059b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	461a      	mov	r2, r3
 80059c8:	2300      	movs	r3, #0
 80059ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3301      	adds	r3, #1
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3b7      	bcc.n	800595e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e043      	b.n	8005a7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a0a:	d118      	bne.n	8005a3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e013      	b.n	8005a50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e008      	b.n	8005a50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3b7      	bcc.n	80059f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f043 0210 	orr.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <USB_DevInit+0x2c4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f043 0208 	orr.w	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d107      	bne.n	8005aec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	f043 0304 	orr.w	r3, r3, #4
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005af8:	b004      	add	sp, #16
 8005afa:	4770      	bx	lr
 8005afc:	803c3800 	.word	0x803c3800

08005b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <USB_FlushTxFifo+0x64>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e01b      	b.n	8005b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	daf2      	bge.n	8005b0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	019b      	lsls	r3, r3, #6
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <USB_FlushTxFifo+0x64>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e006      	b.n	8005b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d0f0      	beq.n	8005b38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	00030d40 	.word	0x00030d40

08005b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <USB_FlushRxFifo+0x5c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e018      	b.n	8005bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	daf2      	bge.n	8005b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2210      	movs	r2, #16
 8005b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <USB_FlushRxFifo+0x5c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e006      	b.n	8005bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d0f0      	beq.n	8005b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c14:	f023 0303 	bic.w	r3, r3, #3
 8005c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0301 	and.w	r3, r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <USB_CoreReset+0x64>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e01b      	b.n	8005cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	daf2      	bge.n	8005c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <USB_CoreReset+0x64>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d0f0      	beq.n	8005c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	00030d40 	.word	0x00030d40

08005cc0 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	7c1b      	ldrb	r3, [r3, #16]
 8005cce:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 ff86 	bl	8007c00 <memset>
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	7c1b      	ldrb	r3, [r3, #16]
 8005d12:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	89ba      	ldrh	r2, [r7, #12]
 8005d24:	fb12 f303 	smulbb	r3, r2, r3
 8005d28:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8005d2a:	89bb      	ldrh	r3, [r7, #12]
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005d30:	89bb      	ldrh	r3, [r7, #12]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4413      	add	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005d38:	7bf9      	ldrb	r1, [r7, #15]
 8005d3a:	78ba      	ldrb	r2, [r7, #2]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	2100      	movs	r1, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fe68 	bl	8007a1a <u8x8_DrawTile>
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d64:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d6c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	7c5b      	ldrb	r3, [r3, #17]
 8005d74:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005d76:	7bba      	ldrb	r2, [r7, #14]
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffbd 	bl	8005cfc <u8g2_send_tile_row>
    src_row++;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	3301      	adds	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d203      	bcs.n	8005d9e <u8g2_send_buffer+0x4c>
 8005d96:	7bba      	ldrb	r2, [r7, #14]
 8005d98:	7b3b      	ldrb	r3, [r7, #12]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d3eb      	bcc.n	8005d76 <u8g2_send_buffer+0x24>
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ffcf 	bl	8005d52 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fe81 	bl	8007abc <u8x8_RefreshDisplay>
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff5b 	bl	8005cc0 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ffd8 	bl	8005dc2 <u8g2_SetBufferCurrTileRow>
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ff95 	bl	8005d52 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e2e:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	4413      	add	r3, r2
 8005e3a:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	7c5b      	ldrb	r3, [r3, #17]
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d304      	bcc.n	8005e52 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fe37 	bl	8007abc <u8x8_RefreshDisplay>
    return 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e00d      	b.n	8005e6e <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ff2f 	bl	8005cc0 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff ffab 	bl	8005dc2 <u8g2_SetBufferCurrTileRow>
  return 1;
 8005e6c:	2301      	movs	r3, #1
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff ffb7 	bl	8005df2 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ffc8 	bl	8005e1a <u8g2_NextPage>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f9      	bne.n	8005e84 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff95 	bl	8005dc2 <u8g2_SetBufferCurrTileRow>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	701a      	strb	r2, [r3, #0]
  return buf;
 8005eae:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20000954 	.word	0x20000954

08005ec0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a0b      	ldr	r2, [pc, #44]	; (8005f04 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8005ed6:	490c      	ldr	r1, [pc, #48]	; (8005f08 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f001 fe4f 	bl	8007b7c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8005ede:	f107 0313 	add.w	r3, r7, #19
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ffdc 	bl	8005ea0 <u8g2_m_16_8_f>
 8005ee8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8005eea:	7cfa      	ldrb	r2, [r7, #19]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8005ef2:	6979      	ldr	r1, [r7, #20]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f001 f815 	bl	8006f24 <u8g2_SetupBuffer>
}
 8005efa:	bf00      	nop
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	080076b9 	.word	0x080076b9
 8005f08:	08007915 	.word	0x08007915
 8005f0c:	08006da7 	.word	0x08006da7

08005f10 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	781b      	ldrb	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	81fb      	strh	r3, [r7, #14]
    font++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3301      	adds	r3, #1
 8005f52:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005f54:	89fb      	ldrh	r3, [r7, #14]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	89fb      	ldrh	r3, [r7, #14]
 8005f62:	4413      	add	r3, r2
 8005f64:	81fb      	strh	r3, [r7, #14]
    return pos;
 8005f66:	89fb      	ldrh	r3, [r7, #14]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6838      	ldr	r0, [r7, #0]
 8005f82:	f7ff ffc5 	bl	8005f10 <u8g2_font_get_byte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6838      	ldr	r0, [r7, #0]
 8005f92:	f7ff ffbd 	bl	8005f10 <u8g2_font_get_byte>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f7ff ffb5 	bl	8005f10 <u8g2_font_get_byte>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005fae:	2103      	movs	r1, #3
 8005fb0:	6838      	ldr	r0, [r7, #0]
 8005fb2:	f7ff ffad 	bl	8005f10 <u8g2_font_get_byte>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8005fbe:	2104      	movs	r1, #4
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f7ff ffa5 	bl	8005f10 <u8g2_font_get_byte>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8005fce:	2105      	movs	r1, #5
 8005fd0:	6838      	ldr	r0, [r7, #0]
 8005fd2:	f7ff ff9d 	bl	8005f10 <u8g2_font_get_byte>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8005fde:	2106      	movs	r1, #6
 8005fe0:	6838      	ldr	r0, [r7, #0]
 8005fe2:	f7ff ff95 	bl	8005f10 <u8g2_font_get_byte>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8005fee:	2107      	movs	r1, #7
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f7ff ff8d 	bl	8005f10 <u8g2_font_get_byte>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8005ffe:	2108      	movs	r1, #8
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7ff ff85 	bl	8005f10 <u8g2_font_get_byte>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800600e:	2109      	movs	r1, #9
 8006010:	6838      	ldr	r0, [r7, #0]
 8006012:	f7ff ff7d 	bl	8005f10 <u8g2_font_get_byte>
 8006016:	4603      	mov	r3, r0
 8006018:	b25a      	sxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800601e:	210a      	movs	r1, #10
 8006020:	6838      	ldr	r0, [r7, #0]
 8006022:	f7ff ff75 	bl	8005f10 <u8g2_font_get_byte>
 8006026:	4603      	mov	r3, r0
 8006028:	b25a      	sxtb	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800602e:	210b      	movs	r1, #11
 8006030:	6838      	ldr	r0, [r7, #0]
 8006032:	f7ff ff6d 	bl	8005f10 <u8g2_font_get_byte>
 8006036:	4603      	mov	r3, r0
 8006038:	b25a      	sxtb	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800603e:	210c      	movs	r1, #12
 8006040:	6838      	ldr	r0, [r7, #0]
 8006042:	f7ff ff65 	bl	8005f10 <u8g2_font_get_byte>
 8006046:	4603      	mov	r3, r0
 8006048:	b25a      	sxtb	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800604e:	210d      	movs	r1, #13
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f7ff ff5d 	bl	8005f10 <u8g2_font_get_byte>
 8006056:	4603      	mov	r3, r0
 8006058:	b25a      	sxtb	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800605e:	210e      	movs	r1, #14
 8006060:	6838      	ldr	r0, [r7, #0]
 8006062:	f7ff ff55 	bl	8005f10 <u8g2_font_get_byte>
 8006066:	4603      	mov	r3, r0
 8006068:	b25a      	sxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800606e:	210f      	movs	r1, #15
 8006070:	6838      	ldr	r0, [r7, #0]
 8006072:	f7ff ff4d 	bl	8005f10 <u8g2_font_get_byte>
 8006076:	4603      	mov	r3, r0
 8006078:	b25a      	sxtb	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800607e:	2110      	movs	r1, #16
 8006080:	6838      	ldr	r0, [r7, #0]
 8006082:	f7ff ff45 	bl	8005f10 <u8g2_font_get_byte>
 8006086:	4603      	mov	r3, r0
 8006088:	b25a      	sxtb	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800608e:	2111      	movs	r1, #17
 8006090:	6838      	ldr	r0, [r7, #0]
 8006092:	f7ff ff4f 	bl	8005f34 <u8g2_font_get_word>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800609e:	2113      	movs	r1, #19
 80060a0:	6838      	ldr	r0, [r7, #0]
 80060a2:	f7ff ff47 	bl	8005f34 <u8g2_font_get_word>
 80060a6:	4603      	mov	r3, r0
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80060ae:	2115      	movs	r1, #21
 80060b0:	6838      	ldr	r0, [r7, #0]
 80060b2:	f7ff ff3f 	bl	8005f34 <u8g2_font_get_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	82da      	strh	r2, [r3, #22]
#endif
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7b1b      	ldrb	r3, [r3, #12]
 80060d6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80060e0:	7bfa      	ldrb	r2, [r7, #15]
 80060e2:	7b7b      	ldrb	r3, [r7, #13]
 80060e4:	fa42 f303 	asr.w	r3, r2, r3
 80060e8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80060ea:	7b7b      	ldrb	r3, [r7, #13]
 80060ec:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80060ee:	7bba      	ldrb	r2, [r7, #14]
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	4413      	add	r3, r2
 80060f4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b07      	cmp	r3, #7
 80060fa:	d91a      	bls.n	8006132 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80060fc:	2308      	movs	r3, #8
 80060fe:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8006100:	7b3a      	ldrb	r2, [r7, #12]
 8006102:	7b7b      	ldrb	r3, [r7, #13]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	7b3b      	ldrb	r3, [r7, #12]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	b25a      	sxtb	r2, r3
 8006122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006126:	4313      	orrs	r3, r2
 8006128:	b25b      	sxtb	r3, r3
 800612a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	3b08      	subs	r3, #8
 8006130:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	b2db      	uxtb	r3, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	b2da      	uxtb	r2, r3
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	4013      	ands	r3, r2
 8006146:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	7bba      	ldrb	r2, [r7, #14]
 800614c:	731a      	strb	r2, [r3, #12]
  return val;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ffaa 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	3b01      	subs	r3, #1
 800617e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8006180:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	73fb      	strb	r3, [r7, #15]
  return v;
 8006196:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80061a2:	b490      	push	{r4, r7}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	4604      	mov	r4, r0
 80061aa:	4608      	mov	r0, r1
 80061ac:	4611      	mov	r1, r2
 80061ae:	461a      	mov	r2, r3
 80061b0:	4623      	mov	r3, r4
 80061b2:	80fb      	strh	r3, [r7, #6]
 80061b4:	4603      	mov	r3, r0
 80061b6:	717b      	strb	r3, [r7, #5]
 80061b8:	460b      	mov	r3, r1
 80061ba:	713b      	strb	r3, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d014      	beq.n	80061f0 <u8g2_add_vector_y+0x4e>
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	dc19      	bgt.n	80061fe <u8g2_add_vector_y+0x5c>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <u8g2_add_vector_y+0x32>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d007      	beq.n	80061e2 <u8g2_add_vector_y+0x40>
 80061d2:	e014      	b.n	80061fe <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80061d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80061d8:	b29a      	uxth	r2, r3
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	4413      	add	r3, r2
 80061de:	80fb      	strh	r3, [r7, #6]
      break;
 80061e0:	e014      	b.n	800620c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80061e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	4413      	add	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
      break;
 80061ee:	e00d      	b.n	800620c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80061f0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	80fb      	strh	r3, [r7, #6]
      break;
 80061fc:	e006      	b.n	800620c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80061fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006202:	b29b      	uxth	r3, r3
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	80fb      	strh	r3, [r7, #6]
      break;      
 800620a:	bf00      	nop
  }
  return dy;
 800620c:	88fb      	ldrh	r3, [r7, #6]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bc90      	pop	{r4, r7}
 8006216:	4770      	bx	lr

08006218 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006218:	b490      	push	{r4, r7}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	80fb      	strh	r3, [r7, #6]
 800622a:	4603      	mov	r3, r0
 800622c:	717b      	strb	r3, [r7, #5]
 800622e:	460b      	mov	r3, r1
 8006230:	713b      	strb	r3, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d014      	beq.n	8006266 <u8g2_add_vector_x+0x4e>
 800623c:	2b02      	cmp	r3, #2
 800623e:	dc19      	bgt.n	8006274 <u8g2_add_vector_x+0x5c>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <u8g2_add_vector_x+0x32>
 8006244:	2b01      	cmp	r3, #1
 8006246:	d007      	beq.n	8006258 <u8g2_add_vector_x+0x40>
 8006248:	e014      	b.n	8006274 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800624a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800624e:	b29a      	uxth	r2, r3
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	4413      	add	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
      break;
 8006256:	e014      	b.n	8006282 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8006258:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800625c:	b29b      	uxth	r3, r3
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	80fb      	strh	r3, [r7, #6]
      break;
 8006264:	e00d      	b.n	8006282 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8006266:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800626a:	b29b      	uxth	r3, r3
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	80fb      	strh	r3, [r7, #6]
      break;
 8006272:	e006      	b.n	8006282 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8006274:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006278:	b29a      	uxth	r2, r3
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	4413      	add	r3, r2
 800627e:	80fb      	strh	r3, [r7, #6]
      break;      
 8006280:	bf00      	nop
  }
  return dx;
 8006282:	88fb      	ldrh	r3, [r7, #6]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bc90      	pop	{r4, r7}
 800628c:	4770      	bx	lr

0800628e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b088      	sub	sp, #32
 8006292:	af02      	add	r7, sp, #8
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
 800629a:	4613      	mov	r3, r2
 800629c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3360      	adds	r3, #96	; 0x60
 80062a2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062ae:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80062b6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80062be:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80062c0:	7bfa      	ldrb	r2, [r7, #15]
 80062c2:	7d7b      	ldrb	r3, [r7, #21]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80062cc:	7dfa      	ldrb	r2, [r7, #23]
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d201      	bcs.n	80062d8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	889b      	ldrh	r3, [r3, #4]
 80062dc:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80062e4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80062e8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	89b8      	ldrh	r0, [r7, #12]
 80062f2:	f7ff ff91 	bl	8006218 <u8g2_add_vector_x>
 80062f6:	4603      	mov	r3, r0
 80062f8:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80062fa:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80062fe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	7c1b      	ldrb	r3, [r3, #16]
 8006306:	8978      	ldrh	r0, [r7, #10]
 8006308:	f7ff ff4b 	bl	80061a2 <u8g2_add_vector_y>
 800630c:	4603      	mov	r3, r0
 800630e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8006310:	78bb      	ldrb	r3, [r7, #2]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	7b9a      	ldrb	r2, [r3, #14]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8006320:	7dbb      	ldrb	r3, [r7, #22]
 8006322:	b298      	uxth	r0, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	7c1b      	ldrb	r3, [r3, #16]
 8006328:	897a      	ldrh	r2, [r7, #10]
 800632a:	89b9      	ldrh	r1, [r7, #12]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4603      	mov	r3, r0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc38 	bl	8006ba6 <u8g2_DrawHVLine>
 8006336:	e013      	b.n	8006360 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	7b5b      	ldrb	r3, [r3, #13]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10f      	bne.n	8006360 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	7bda      	ldrb	r2, [r3, #15]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800634a:	7dbb      	ldrb	r3, [r7, #22]
 800634c:	b298      	uxth	r0, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	7c1b      	ldrb	r3, [r3, #16]
 8006352:	897a      	ldrh	r2, [r7, #10]
 8006354:	89b9      	ldrh	r1, [r7, #12]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fc23 	bl	8006ba6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006360:	7dfa      	ldrb	r2, [r7, #23]
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	429a      	cmp	r2, r3
 8006366:	d309      	bcc.n	800637c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8006368:	7dfa      	ldrb	r2, [r7, #23]
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	757b      	strb	r3, [r7, #21]
    ly++;
 8006374:	7d3b      	ldrb	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800637a:	e79d      	b.n	80062b8 <u8g2_font_decode_len+0x2a>
      break;
 800637c:	bf00      	nop
  }
  lx += cnt;
 800637e:	7d7a      	ldrb	r2, [r7, #21]
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	4413      	add	r3, r2
 8006384:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8006386:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800638e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	725a      	strb	r2, [r3, #9]
}
 8006396:	bf00      	nop
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3360      	adds	r3, #96	; 0x60
 80063ac:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80063c0:	4619      	mov	r1, r3
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fe7f 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 80063c8:	4603      	mov	r3, r0
 80063ca:	b25a      	sxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80063d6:	4619      	mov	r1, r3
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff fe74 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 80063de:	4603      	mov	r3, r0
 80063e0:	b25a      	sxtb	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	7b9b      	ldrb	r3, [r3, #14]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	73da      	strb	r2, [r3, #15]
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af02      	add	r7, sp, #8
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3360      	adds	r3, #96	; 0x60
 800641a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ffbd 	bl	800639e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800642a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8006432:	4619      	mov	r1, r3
 8006434:	6978      	ldr	r0, [r7, #20]
 8006436:	f7ff fe91 	bl	800615c <u8g2_font_decode_get_signed_bits>
 800643a:	4603      	mov	r3, r0
 800643c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006444:	4619      	mov	r1, r3
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f7ff fe88 	bl	800615c <u8g2_font_decode_get_signed_bits>
 800644c:	4603      	mov	r3, r0
 800644e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006456:	4619      	mov	r1, r3
 8006458:	6978      	ldr	r0, [r7, #20]
 800645a:	f7ff fe7f 	bl	800615c <u8g2_font_decode_get_signed_bits>
 800645e:	4603      	mov	r3, r0
 8006460:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f340 80d7 	ble.w	800661c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	8898      	ldrh	r0, [r3, #4]
 8006472:	7cfa      	ldrb	r2, [r7, #19]
 8006474:	7c7b      	ldrb	r3, [r7, #17]
 8006476:	4413      	add	r3, r2
 8006478:	b2db      	uxtb	r3, r3
 800647a:	425b      	negs	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	b25a      	sxtb	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	7c1b      	ldrb	r3, [r3, #16]
 8006484:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8006488:	f7ff fec6 	bl	8006218 <u8g2_add_vector_x>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	88d8      	ldrh	r0, [r3, #6]
 8006498:	7cfa      	ldrb	r2, [r7, #19]
 800649a:	7c7b      	ldrb	r3, [r7, #17]
 800649c:	4413      	add	r3, r2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	425b      	negs	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	b25a      	sxtb	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	7c1b      	ldrb	r3, [r3, #16]
 80064aa:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80064ae:	f7ff fe78 	bl	80061a2 <u8g2_add_vector_y>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	889b      	ldrh	r3, [r3, #4]
 80064be:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	88db      	ldrh	r3, [r3, #6]
 80064c4:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80064c6:	8bfb      	ldrh	r3, [r7, #30]
 80064c8:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80064ca:	8b7b      	ldrh	r3, [r7, #26]
 80064cc:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	7c1b      	ldrb	r3, [r3, #16]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d85a      	bhi.n	800658c <u8g2_font_decode_glyph+0x180>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <u8g2_font_decode_glyph+0xd0>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006531 	.word	0x08006531
 80064e8:	08006565 	.word	0x08006565
      {
	case 0:
	    x1 += decode->glyph_width;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	8bbb      	ldrh	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80064fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	8b3b      	ldrh	r3, [r7, #24]
 8006502:	4413      	add	r3, r2
 8006504:	833b      	strh	r3, [r7, #24]
	    break;
 8006506:	e041      	b.n	800658c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8006508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800650c:	b29b      	uxth	r3, r3
 800650e:	8bfa      	ldrh	r2, [r7, #30]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006514:	8bfb      	ldrh	r3, [r7, #30]
 8006516:	3301      	adds	r3, #1
 8006518:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800651a:	8bbb      	ldrh	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006526:	b29a      	uxth	r2, r3
 8006528:	8b3b      	ldrh	r3, [r7, #24]
 800652a:	4413      	add	r3, r2
 800652c:	833b      	strh	r3, [r7, #24]
	    break;
 800652e:	e02d      	b.n	800658c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006536:	b29b      	uxth	r3, r3
 8006538:	8bfa      	ldrh	r2, [r7, #30]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800653e:	8bfb      	ldrh	r3, [r7, #30]
 8006540:	3301      	adds	r3, #1
 8006542:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8006544:	8bbb      	ldrh	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800654a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800654e:	b29b      	uxth	r3, r3
 8006550:	8b7a      	ldrh	r2, [r7, #26]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006556:	8b7b      	ldrh	r3, [r7, #26]
 8006558:	3301      	adds	r3, #1
 800655a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800655c:	8b3b      	ldrh	r3, [r7, #24]
 800655e:	3301      	adds	r3, #1
 8006560:	833b      	strh	r3, [r7, #24]
	    break;	  
 8006562:	e013      	b.n	800658c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8006564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006568:	b29a      	uxth	r2, r3
 800656a:	8bbb      	ldrh	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006576:	b29b      	uxth	r3, r3
 8006578:	8b7a      	ldrh	r2, [r7, #26]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800657e:	8b7b      	ldrh	r3, [r7, #26]
 8006580:	3301      	adds	r3, #1
 8006582:	837b      	strh	r3, [r7, #26]
	    y1++;
 8006584:	8b3b      	ldrh	r3, [r7, #24]
 8006586:	3301      	adds	r3, #1
 8006588:	833b      	strh	r3, [r7, #24]
	    break;	  
 800658a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800658c:	8bb8      	ldrh	r0, [r7, #28]
 800658e:	8b7a      	ldrh	r2, [r7, #26]
 8006590:	8bf9      	ldrh	r1, [r7, #30]
 8006592:	8b3b      	ldrh	r3, [r7, #24]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	4603      	mov	r3, r0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fbd9 	bl	8006d50 <u8g2_IsIntersection>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <u8g2_font_decode_glyph+0x19e>
	return d;
 80065a4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80065a8:	e03a      	b.n	8006620 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80065bc:	4619      	mov	r1, r3
 80065be:	6978      	ldr	r0, [r7, #20]
 80065c0:	f7ff fd81 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80065ce:	4619      	mov	r1, r3
 80065d0:	6978      	ldr	r0, [r7, #20]
 80065d2:	f7ff fd78 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2200      	movs	r2, #0
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe54 	bl	800628e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2201      	movs	r2, #1
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fe4e 	bl	800628e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80065f2:	2101      	movs	r1, #1
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	f7ff fd66 	bl	80060c6 <u8g2_font_decode_get_unsigned_bits>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ec      	bne.n	80065da <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006606:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800660a:	429a      	cmp	r2, r3
 800660c:	dd00      	ble.n	8006610 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800660e:	e7d2      	b.n	80065b6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8006610:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	7b9a      	ldrb	r2, [r3, #14]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 800661c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3317      	adds	r3, #23
 800663e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	2bff      	cmp	r3, #255	; 0xff
 8006644:	d82a      	bhi.n	800669c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	2b60      	cmp	r3, #96	; 0x60
 800664a:	d907      	bls.n	800665c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8006652:	461a      	mov	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e009      	b.n	8006670 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800665c:	887b      	ldrh	r3, [r7, #2]
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d906      	bls.n	8006670 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006668:	461a      	mov	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3301      	adds	r3, #1
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d04e      	beq.n	8006718 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	887a      	ldrh	r2, [r7, #2]
 8006682:	429a      	cmp	r2, r3
 8006684:	d102      	bne.n	800668c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3302      	adds	r3, #2
 800668a:	e049      	b.n	8006720 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4413      	add	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800669a:	e7e9      	b.n	8006670 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80066a2:	461a      	mov	r2, r3
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80066ae:	2100      	movs	r1, #0
 80066b0:	6938      	ldr	r0, [r7, #16]
 80066b2:	f7ff fc3f 	bl	8005f34 <u8g2_font_get_word>
 80066b6:	4603      	mov	r3, r0
 80066b8:	461a      	mov	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80066c0:	2102      	movs	r1, #2
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f7ff fc36 	bl	8005f34 <u8g2_font_get_word>
 80066c8:	4603      	mov	r3, r0
 80066ca:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3304      	adds	r3, #4
 80066d0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80066d2:	89fa      	ldrh	r2, [r7, #14]
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3e9      	bcc.n	80066ae <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80066e0:	89fb      	ldrh	r3, [r7, #14]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3301      	adds	r3, #1
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	89fb      	ldrh	r3, [r7, #14]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80066fa:	89fa      	ldrh	r2, [r7, #14]
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d102      	bne.n	8006708 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	3303      	adds	r3, #3
 8006706:	e00b      	b.n	8006720 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	3302      	adds	r3, #2
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8006716:	e7e0      	b.n	80066da <u8g2_font_get_glyph_data+0xb2>
	break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <u8g2_font_get_glyph_data+0xf6>
	break;
 800671c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	897a      	ldrh	r2, [r7, #10]
 800674a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	893a      	ldrh	r2, [r7, #8]
 8006752:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	4619      	mov	r1, r3
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff ff64 	bl	8006628 <u8g2_font_get_glyph_data>
 8006760:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fe4e 	bl	800640c <u8g2_font_decode_glyph>
 8006770:	4603      	mov	r3, r0
 8006772:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8006774:	8afb      	ldrh	r3, [r7, #22]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	4608      	mov	r0, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	817b      	strh	r3, [r7, #10]
 80067b2:	460b      	mov	r3, r1
 80067b4:	813b      	strh	r3, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d833      	bhi.n	800682c <u8g2_DrawGlyph+0x8c>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <u8g2_DrawGlyph+0x2c>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	08006805 	.word	0x08006805
 80067d8:	08006819 	.word	0x08006819
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	893b      	ldrh	r3, [r7, #8]
 80067ea:	4413      	add	r3, r2
 80067ec:	813b      	strh	r3, [r7, #8]
      break;
 80067ee:	e01d      	b.n	800682c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	4798      	blx	r3
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	817b      	strh	r3, [r7, #10]
      break;
 8006802:	e013      	b.n	800682c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	4798      	blx	r3
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	813b      	strh	r3, [r7, #8]
      break;
 8006816:	e009      	b.n	800682c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	897b      	ldrh	r3, [r7, #10]
 8006826:	4413      	add	r3, r2
 8006828:	817b      	strh	r3, [r7, #10]
      break;
 800682a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	893a      	ldrh	r2, [r7, #8]
 8006830:	8979      	ldrh	r1, [r7, #10]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff78 	bl	8006728 <u8g2_font_draw_glyph>
 8006838:	4603      	mov	r3, r0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	817b      	strh	r3, [r7, #10]
 8006852:	4613      	mov	r3, r2
 8006854:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fd7c 	bl	8007354 <u8x8_utf8_init>
  sum = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	4611      	mov	r1, r2
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
 8006870:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8006872:	8abb      	ldrh	r3, [r7, #20]
 8006874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006878:	4293      	cmp	r3, r2
 800687a:	d038      	beq.n	80068ee <u8g2_draw_string+0xaa>
      break;
    str++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3301      	adds	r3, #1
 8006880:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8006882:	8abb      	ldrh	r3, [r7, #20]
 8006884:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006888:	4293      	cmp	r3, r2
 800688a:	d0e9      	beq.n	8006860 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800688c:	8abb      	ldrh	r3, [r7, #20]
 800688e:	893a      	ldrh	r2, [r7, #8]
 8006890:	8979      	ldrh	r1, [r7, #10]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff ff84 	bl	80067a0 <u8g2_DrawGlyph>
 8006898:	4603      	mov	r3, r0
 800689a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d81e      	bhi.n	80068e4 <u8g2_draw_string+0xa0>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <u8g2_draw_string+0x68>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068c7 	.word	0x080068c7
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068db 	.word	0x080068db
      {
	case 0:
	  x += delta;
 80068bc:	897a      	ldrh	r2, [r7, #10]
 80068be:	8a7b      	ldrh	r3, [r7, #18]
 80068c0:	4413      	add	r3, r2
 80068c2:	817b      	strh	r3, [r7, #10]
	  break;
 80068c4:	e00e      	b.n	80068e4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80068c6:	893a      	ldrh	r2, [r7, #8]
 80068c8:	8a7b      	ldrh	r3, [r7, #18]
 80068ca:	4413      	add	r3, r2
 80068cc:	813b      	strh	r3, [r7, #8]
	  break;
 80068ce:	e009      	b.n	80068e4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80068d0:	897a      	ldrh	r2, [r7, #10]
 80068d2:	8a7b      	ldrh	r3, [r7, #18]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	817b      	strh	r3, [r7, #10]
	  break;
 80068d8:	e004      	b.n	80068e4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80068da:	893a      	ldrh	r2, [r7, #8]
 80068dc:	8a7b      	ldrh	r3, [r7, #18]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	813b      	strh	r3, [r7, #8]
	  break;
 80068e2:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80068e4:	8afa      	ldrh	r2, [r7, #22]
 80068e6:	8a7b      	ldrh	r3, [r7, #18]
 80068e8:	4413      	add	r3, r2
 80068ea:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80068ec:	e7b8      	b.n	8006860 <u8g2_draw_string+0x1c>
      break;
 80068ee:	bf00      	nop
    }
  }
  return sum;
 80068f0:	8afb      	ldrh	r3, [r7, #22]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop

080068fc <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	817b      	strh	r3, [r7, #10]
 800690a:	4613      	mov	r3, r2
 800690c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a06      	ldr	r2, [pc, #24]	; (800692c <u8g2_DrawStr+0x30>)
 8006912:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006914:	893a      	ldrh	r2, [r7, #8]
 8006916:	8979      	ldrh	r1, [r7, #10]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ff92 	bl	8006844 <u8g2_draw_string>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	08007371 	.word	0x08007371

08006930 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	817b      	strh	r3, [r7, #10]
 800693e:	4613      	mov	r3, r2
 8006940:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a06      	ldr	r2, [pc, #24]	; (8006960 <u8g2_DrawUTF8+0x30>)
 8006946:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006948:	893a      	ldrh	r2, [r7, #8]
 800694a:	8979      	ldrh	r1, [r7, #10]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff78 	bl	8006844 <u8g2_draw_string>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	0800739f 	.word	0x0800739f

08006964 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006970:	2b00      	cmp	r3, #0
 8006972:	d05d      	beq.n	8006a30 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006992:	2b00      	cmp	r3, #0
 8006994:	d04d      	beq.n	8006a32 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800699c:	2b01      	cmp	r3, #1
 800699e:	d11c      	bne.n	80069da <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80069ac:	429a      	cmp	r2, r3
 80069ae:	da05      	bge.n	80069bc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80069c8:	429a      	cmp	r2, r3
 80069ca:	dd32      	ble.n	8006a32 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80069d8:	e02b      	b.n	8006a32 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80069e8:	4619      	mov	r1, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80069f0:	440b      	add	r3, r1
 80069f2:	429a      	cmp	r2, r3
 80069f4:	da0d      	bge.n	8006a12 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	b25a      	sxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	dd07      	ble.n	8006a32 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8006a2e:	e000      	b.n	8006a32 <u8g2_UpdateRefHeight+0xce>
    return;
 8006a30:	bf00      	nop
  }  
}
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  return 0;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a04      	ldr	r2, [pc, #16]	; (8006a70 <u8g2_SetFontPosBaseline+0x1c>)
 8006a60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	08006a3d 	.word	0x08006a3d

08006a74 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d00b      	beq.n	8006aa0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3374      	adds	r3, #116	; 0x74
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fa6d 	bl	8005f74 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ff62 	bl	8006964 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	80fb      	strh	r3, [r7, #6]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8006ae4:	8afb      	ldrh	r3, [r7, #22]
 8006ae6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	8abb      	ldrh	r3, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8006af2:	8afa      	ldrh	r2, [r7, #22]
 8006af4:	8abb      	ldrh	r3, [r7, #20]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d90b      	bls.n	8006b12 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8006afa:	8afa      	ldrh	r2, [r7, #22]
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d205      	bcs.n	8006b0e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8006b02:	88bb      	ldrh	r3, [r7, #4]
 8006b04:	82bb      	strh	r3, [r7, #20]
      b--;
 8006b06:	8abb      	ldrh	r3, [r7, #20]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	82bb      	strh	r3, [r7, #20]
 8006b0c:	e001      	b.n	8006b12 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8006b12:	8afa      	ldrh	r2, [r7, #22]
 8006b14:	88bb      	ldrh	r3, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d301      	bcc.n	8006b1e <u8g2_clip_intersection2+0x56>
    return 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e01c      	b.n	8006b58 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8006b1e:	8aba      	ldrh	r2, [r7, #20]
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d801      	bhi.n	8006b2a <u8g2_clip_intersection2+0x62>
    return 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e016      	b.n	8006b58 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8006b2a:	8afa      	ldrh	r2, [r7, #22]
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d201      	bcs.n	8006b36 <u8g2_clip_intersection2+0x6e>
    a = c;
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8006b36:	8aba      	ldrh	r2, [r7, #20]
 8006b38:	88bb      	ldrh	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d901      	bls.n	8006b42 <u8g2_clip_intersection2+0x7a>
    b = d;
 8006b3e:	88bb      	ldrh	r3, [r7, #4]
 8006b40:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8afa      	ldrh	r2, [r7, #22]
 8006b46:	801a      	strh	r2, [r3, #0]
  b -= a;
 8006b48:	8aba      	ldrh	r2, [r7, #20]
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	8aba      	ldrh	r2, [r7, #20]
 8006b54:	801a      	strh	r2, [r3, #0]
  return 1;
 8006b56:	2301      	movs	r3, #1
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	461a      	mov	r2, r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	817b      	strh	r3, [r7, #10]
 8006b76:	460b      	mov	r3, r1
 8006b78:	813b      	strh	r3, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b82:	893a      	ldrh	r2, [r7, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006b8c:	88f8      	ldrh	r0, [r7, #6]
 8006b8e:	893a      	ldrh	r2, [r7, #8]
 8006b90:	8979      	ldrh	r1, [r7, #10]
 8006b92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4603      	mov	r3, r0
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	47a0      	blx	r4
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd90      	pop	{r4, r7, pc}

08006ba6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006ba6:	b590      	push	{r4, r7, lr}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af02      	add	r7, sp, #8
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	4608      	mov	r0, r1
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	817b      	strh	r3, [r7, #10]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	813b      	strh	r3, [r7, #8]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d075      	beq.n	8006cb6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d072      	beq.n	8006cb6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d91a      	bls.n	8006c0c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8006bd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d109      	bne.n	8006bf2 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8006bde:	897a      	ldrh	r2, [r7, #10]
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	817b      	strh	r3, [r7, #10]
	  x++;
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	3301      	adds	r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	817b      	strh	r3, [r7, #10]
 8006bf0:	e00c      	b.n	8006c0c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8006bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d108      	bne.n	8006c0c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8006bfa:	893a      	ldrh	r2, [r7, #8]
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	813b      	strh	r3, [r7, #8]
	  y++;
 8006c04:	893b      	ldrh	r3, [r7, #8]
 8006c06:	3301      	adds	r3, #1
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8006c0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8006c18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11a      	bne.n	8006c56 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8006c26:	893b      	ldrh	r3, [r7, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d83b      	bhi.n	8006ca4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8006c32:	893b      	ldrh	r3, [r7, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d937      	bls.n	8006ca8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006c44:	1db9      	adds	r1, r7, #6
 8006c46:	f107 000a 	add.w	r0, r7, #10
 8006c4a:	f7ff ff3d 	bl	8006ac8 <u8g2_clip_intersection2>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11a      	bne.n	8006c8a <u8g2_DrawHVLine+0xe4>
	  return;
 8006c54:	e02f      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006c5c:	897b      	ldrh	r3, [r7, #10]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d824      	bhi.n	8006cac <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006c68:	897b      	ldrh	r3, [r7, #10]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d920      	bls.n	8006cb0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8006c7a:	1db9      	adds	r1, r7, #6
 8006c7c:	f107 0008 	add.w	r0, r7, #8
 8006c80:	f7ff ff22 	bl	8006ac8 <u8g2_clip_intersection2>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	689c      	ldr	r4, [r3, #8]
 8006c90:	8979      	ldrh	r1, [r7, #10]
 8006c92:	893a      	ldrh	r2, [r7, #8]
 8006c94:	88f8      	ldrh	r0, [r7, #6]
 8006c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	47a0      	blx	r4
 8006ca2:	e008      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
	  return;
 8006ca4:	bf00      	nop
 8006ca6:	e006      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
	  return;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
	  return;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
	  return;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <u8g2_DrawHVLine+0x110>
	  return;
 8006cb4:	bf00      	nop
    }
}
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd90      	pop	{r4, r7, pc}

08006cbc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d903      	bls.n	8006cde <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8006cea:	b490      	push	{r4, r7}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	80fb      	strh	r3, [r7, #6]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	80bb      	strh	r3, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	807b      	strh	r3, [r7, #2]
 8006d04:	4613      	mov	r3, r2
 8006d06:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8006d08:	887a      	ldrh	r2, [r7, #2]
 8006d0a:	88bb      	ldrh	r3, [r7, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d20d      	bcs.n	8006d2c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006d10:	883a      	ldrh	r2, [r7, #0]
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d901      	bls.n	8006d1c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e014      	b.n	8006d46 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8006d1c:	887a      	ldrh	r2, [r7, #2]
 8006d1e:	883b      	ldrh	r3, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d901      	bls.n	8006d28 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e00e      	b.n	8006d46 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e00c      	b.n	8006d46 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8006d2c:	883a      	ldrh	r2, [r7, #0]
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d907      	bls.n	8006d44 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8006d34:	887a      	ldrh	r2, [r7, #2]
 8006d36:	883b      	ldrh	r3, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d901      	bls.n	8006d40 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e002      	b.n	8006d46 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8006d44:	2300      	movs	r3, #0
    }
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc90      	pop	{r4, r7}
 8006d4e:	4770      	bx	lr

08006d50 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	4608      	mov	r0, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	817b      	strh	r3, [r7, #10]
 8006d62:	460b      	mov	r3, r1
 8006d64:	813b      	strh	r3, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8006d76:	8b3b      	ldrh	r3, [r7, #24]
 8006d78:	893a      	ldrh	r2, [r7, #8]
 8006d7a:	f7ff ffb6 	bl	8006cea <u8g2_is_intersection_decision_tree>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <u8g2_IsIntersection+0x38>
    return 0; 
 8006d84:	2300      	movs	r3, #0
 8006d86:	e00a      	b.n	8006d9e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	897a      	ldrh	r2, [r7, #10]
 8006d98:	f7ff ffa7 	bl	8006cea <u8g2_is_intersection_decision_tree>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b089      	sub	sp, #36	; 0x24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	4608      	mov	r0, r1
 8006db0:	4611      	mov	r1, r2
 8006db2:	461a      	mov	r2, r3
 8006db4:	4603      	mov	r3, r0
 8006db6:	817b      	strh	r3, [r7, #10]
 8006db8:	460b      	mov	r3, r1
 8006dba:	813b      	strh	r3, [r7, #8]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006dc0:	893b      	ldrh	r3, [r7, #8]
 8006dc2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006dc4:	7efb      	ldrb	r3, [r7, #27]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8006dd0:	7e3a      	ldrb	r2, [r7, #24]
 8006dd2:	7efb      	ldrb	r3, [r7, #27]
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d801      	bhi.n	8006df0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8006dec:	7e3b      	ldrb	r3, [r7, #24]
 8006dee:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d001      	beq.n	8006dfe <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8006dfa:	7e3b      	ldrb	r3, [r7, #24]
 8006dfc:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006dfe:	893b      	ldrh	r3, [r7, #8]
 8006e00:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	7c1b      	ldrb	r3, [r3, #16]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8afa      	ldrh	r2, [r7, #22]
 8006e14:	fb12 f303 	smulbb	r3, r2, r3
 8006e18:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8006e20:	8afb      	ldrh	r3, [r7, #22]
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8006e28:	897b      	ldrh	r3, [r7, #10]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8006e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d117      	bne.n	8006e68 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	7ebb      	ldrb	r3, [r7, #26]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	7e7b      	ldrb	r3, [r7, #25]
 8006e4c:	4053      	eors	r3, r2
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	701a      	strb	r2, [r3, #0]
	ptr++;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	3301      	adds	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
	len--;
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e8      	bne.n	8006e38 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8006e66:	e038      	b.n	8006eda <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	7ebb      	ldrb	r3, [r7, #26]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	7e7b      	ldrb	r3, [r7, #25]
 8006e7c:	4053      	eors	r3, r2
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8006e84:	7efb      	ldrb	r3, [r7, #27]
 8006e86:	3301      	adds	r3, #1
 8006e88:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8006e8a:	7efb      	ldrb	r3, [r7, #27]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	76fb      	strb	r3, [r7, #27]
      len--;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8006e98:	7efb      	ldrb	r3, [r7, #27]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d114      	bne.n	8006ec8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d801      	bhi.n	8006eb8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d008      	beq.n	8006ed4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	767b      	strb	r3, [r7, #25]
 8006ec6:	e005      	b.n	8006ed4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8006ec8:	7ebb      	ldrb	r3, [r7, #26]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8006ece:	7e7b      	ldrb	r3, [r7, #25]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1c6      	bne.n	8006e68 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8006eda:	bf00      	nop
 8006edc:	3724      	adds	r7, #36	; 0x24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4613      	mov	r3, r2
 8006f32:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	79fa      	ldrb	r2, [r7, #7]
 8006f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff ffa9 	bl	8006ee6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fd5d 	bl	8006a54 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fbe:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	89fa      	ldrh	r2, [r7, #14]
 8006fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	7c1b      	ldrb	r3, [r3, #16]
 8006fd0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8006fd2:	89fb      	ldrh	r3, [r7, #14]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	89fa      	ldrh	r2, [r7, #14]
 8006fdc:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fe4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8006fe6:	89fb      	ldrh	r3, [r7, #14]
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	89fa      	ldrh	r2, [r7, #14]
 8006ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ff8:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8007002:	4413      	add	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	7c52      	ldrb	r2, [r2, #17]
 8007008:	4293      	cmp	r3, r2
 800700a:	dd08      	ble.n	800701e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	7c5b      	ldrb	r3, [r3, #17]
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007018:	b29b      	uxth	r3, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800701e:	89fb      	ldrh	r3, [r7, #14]
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	4413      	add	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	8a9a      	ldrh	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	8ada      	ldrh	r2, [r3, #22]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4603      	mov	r3, r0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fe5d 	bl	8006d50 <u8g2_IsIntersection>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80070a4:	e03b      	b.n	800711e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d205      	bcs.n	80070ca <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d905      	bls.n	80070e6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d205      	bcs.n	8007102 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800710e:	429a      	cmp	r2, r3
 8007110:	d905      	bls.n	800711e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ff3b 	bl	8006faa <u8g2_update_dimension_common>
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff7b 	bl	800706c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af02      	add	r7, sp, #8
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	4608      	mov	r0, r1
 8007188:	4611      	mov	r1, r2
 800718a:	461a      	mov	r2, r3
 800718c:	4603      	mov	r3, r0
 800718e:	817b      	strh	r3, [r7, #10]
 8007190:	460b      	mov	r3, r1
 8007192:	813b      	strh	r3, [r7, #8]
 8007194:	4613      	mov	r3, r2
 8007196:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8007198:	88f8      	ldrh	r0, [r7, #6]
 800719a:	893a      	ldrh	r2, [r7, #8]
 800719c:	8979      	ldrh	r1, [r7, #10]
 800719e:	7e3b      	ldrb	r3, [r7, #24]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4603      	mov	r3, r0
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fcdd 	bl	8006b64 <u8g2_draw_hv_line_2dir>
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <u8g2stm32_init>:
#include "main.h"
#include "u8g2.h"
#include "u8x8.h"
#include "u8g2_stm32.h"
void u8g2stm32_init(u8g2_t *u8g2)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0,
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <u8g2stm32_init+0x40>)
 80071be:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <u8g2stm32_init+0x44>)
 80071c0:	490e      	ldr	r1, [pc, #56]	; (80071fc <u8g2stm32_init+0x48>)
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fe fe7c 	bl	8005ec0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			u8x8_byte_stm32hal_hw_i2c, stm32_gpio_and_delay_cb);
	u8g2_SetI2CAddress(u8g2, I2C_ADDRESS << 1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2278      	movs	r2, #120	; 0x78
 80071cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	u8g2_InitDisplay(u8g2);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc53 	bl	8007a7c <u8x8_InitDisplay>
	u8g2_SetPowerSave(u8g2,0);
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fc5e 	bl	8007a9a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(u8g2);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe fe49 	bl	8005e76 <u8g2_ClearDisplay>
	u8g2_SetDrawColor(u8g2, 1);
 80071e4:	2101      	movs	r1, #1
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fd68 	bl	8006cbc <u8g2_SetDrawColor>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	080072e1 	.word	0x080072e1
 80071f8:	08007201 	.word	0x08007201
 80071fc:	0800c370 	.word	0x0800c370

08007200 <u8x8_byte_stm32hal_hw_i2c>:
uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8,
		uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	72fb      	strb	r3, [r7, #11]
 800720e:	4613      	mov	r3, r2
 8007210:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;
	switch(msg)
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	3b14      	subs	r3, #20
 8007216:	2b0c      	cmp	r3, #12
 8007218:	d854      	bhi.n	80072c4 <u8x8_byte_stm32hal_hw_i2c+0xc4>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <u8x8_byte_stm32hal_hw_i2c+0x20>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	080072c9 	.word	0x080072c9
 8007224:	080072c5 	.word	0x080072c5
 8007228:	080072c5 	.word	0x080072c5
 800722c:	08007255 	.word	0x08007255
 8007230:	08007285 	.word	0x08007285
 8007234:	0800728d 	.word	0x0800728d
 8007238:	080072c5 	.word	0x080072c5
 800723c:	080072c5 	.word	0x080072c5
 8007240:	080072c5 	.word	0x080072c5
 8007244:	080072c5 	.word	0x080072c5
 8007248:	080072c5 	.word	0x080072c5
 800724c:	080072c5 	.word	0x080072c5
 8007250:	080072c9 	.word	0x080072c9
	{
	case U8X8_MSG_BYTE_SEND:
	{
		data = (uint8_t *)arg_ptr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	617b      	str	r3, [r7, #20]
		while(arg_int > 0)
 8007258:	e010      	b.n	800727c <u8x8_byte_stm32hal_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 800725a:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	b2d1      	uxtb	r1, r2
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8007264:	7011      	strb	r1, [r2, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	7819      	ldrb	r1, [r3, #0]
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 800726e:	5499      	strb	r1, [r3, r2]
			data++;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
			arg_int--;
 8007276:	7abb      	ldrb	r3, [r7, #10]
 8007278:	3b01      	subs	r3, #1
 800727a:	72bb      	strb	r3, [r7, #10]
		while(arg_int > 0)
 800727c:	7abb      	ldrb	r3, [r7, #10]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1eb      	bne.n	800725a <u8x8_byte_stm32hal_hw_i2c+0x5a>
		}
	}
		break;
 8007282:	e022      	b.n	80072ca <u8x8_byte_stm32hal_hw_i2c+0xca>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
	{
		buf_idx = 0;
 8007284:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
	}
		break;
 800728a:	e01e      	b.n	80072ca <u8x8_byte_stm32hal_hw_i2c+0xca>
	case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 800728c:	233c      	movs	r3, #60	; 0x3c
 800728e:	74fb      	strb	r3, [r7, #19]
		volatile uint16_t i;
		HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)iaddress <<1,
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	b29b      	uxth	r3, r3
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	b299      	uxth	r1, r3
 8007298:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 80072a0:	480e      	ldr	r0, [pc, #56]	; (80072dc <u8x8_byte_stm32hal_hw_i2c+0xdc>)
 80072a2:	f7fb f9fb 	bl	800269c <HAL_I2C_Master_Transmit_DMA>
				&buffer[0], buf_idx);
		for(i=1 ; i <= 5000 ; i++);  //5000은 STM32F4 84MHz 기준
 80072a6:	2301      	movs	r3, #1
 80072a8:	823b      	strh	r3, [r7, #16]
 80072aa:	e004      	b.n	80072b6 <u8x8_byte_stm32hal_hw_i2c+0xb6>
 80072ac:	8a3b      	ldrh	r3, [r7, #16]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3301      	adds	r3, #1
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	823b      	strh	r3, [r7, #16]
 80072b6:	8a3b      	ldrh	r3, [r7, #16]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80072be:	4293      	cmp	r3, r2
 80072c0:	d9f4      	bls.n	80072ac <u8x8_byte_stm32hal_hw_i2c+0xac>
	}
		break;
 80072c2:	e002      	b.n	80072ca <u8x8_byte_stm32hal_hw_i2c+0xca>
	default:
		return 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e001      	b.n	80072cc <u8x8_byte_stm32hal_hw_i2c+0xcc>
		break;
 80072c8:	bf00      	nop
	}
	return 1;
 80072ca:	2301      	movs	r3, #1
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000d54 	.word	0x20000d54
 80072d8:	20000d58 	.word	0x20000d58
 80072dc:	20000250 	.word	0x20000250

080072e0 <stm32_gpio_and_delay_cb>:
uint8_t stm32_gpio_and_delay_cb(u8x8_t *u8x8,
		uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	72fb      	strb	r3, [r7, #11]
 80072ee:	4613      	mov	r3, r2
 80072f0:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3b28      	subs	r3, #40	; 0x28
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d821      	bhi.n	800733e <stm32_gpio_and_delay_cb+0x5e>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <stm32_gpio_and_delay_cb+0x20>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007349 	.word	0x08007349
 8007304:	08007335 	.word	0x08007335
 8007308:	08007349 	.word	0x08007349
 800730c:	08007349 	.word	0x08007349
 8007310:	08007315 	.word	0x08007315
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		break;
	case U8X8_MSG_DELAY_NANO:
	{
		volatile uint32_t i;
		for(i = 1 ; i <= arg_int *10 ; i++ );
 8007314:	2301      	movs	r3, #1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e002      	b.n	8007320 <stm32_gpio_and_delay_cb+0x40>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3301      	adds	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	7aba      	ldrb	r2, [r7, #10]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	461a      	mov	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	429a      	cmp	r2, r3
 8007330:	d2f3      	bcs.n	800731a <stm32_gpio_and_delay_cb+0x3a>
	}
		break;
 8007332:	e00a      	b.n	800734a <stm32_gpio_and_delay_cb+0x6a>
	case U8X8_MSG_DELAY_10MICRO:   /* not used*/
		break;
	case U8X8_MSG_DELAY_100NANO:   /* not used*/
		break;
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8007334:	7abb      	ldrb	r3, [r7, #10]
 8007336:	4618      	mov	r0, r3
 8007338:	f7f9 fe9c 	bl	8001074 <HAL_Delay>
		break;
 800733c:	e005      	b.n	800734a <stm32_gpio_and_delay_cb+0x6a>
	default:
		u8x8_SetGPIOResult(u8x8,1);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8007346:	e000      	b.n	800734a <stm32_gpio_and_delay_cb+0x6a>
		break;
 8007348:	bf00      	nop
	}
	return 1;
 800734a:	2301      	movs	r3, #1
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <u8x8_ascii_next+0x18>
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	2b0a      	cmp	r3, #10
 8007386:	d102      	bne.n	800738e <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8007388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800738c:	e001      	b.n	8007392 <u8x8_ascii_next+0x22>
  return b;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	b29b      	uxth	r3, r3
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <u8x8_utf8_next+0x18>
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	2b0a      	cmp	r3, #10
 80073b4:	d102      	bne.n	80073bc <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80073b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073ba:	e06e      	b.n	800749a <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d145      	bne.n	8007452 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	2bfb      	cmp	r3, #251	; 0xfb
 80073ca:	d908      	bls.n	80073de <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2205      	movs	r2, #5
 80073d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	70fb      	strb	r3, [r7, #3]
 80073dc:	e032      	b.n	8007444 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	2bf7      	cmp	r3, #247	; 0xf7
 80073e2:	d908      	bls.n	80073f6 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2204      	movs	r2, #4
 80073e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	70fb      	strb	r3, [r7, #3]
 80073f4:	e026      	b.n	8007444 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	2bef      	cmp	r3, #239	; 0xef
 80073fa:	d908      	bls.n	800740e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2203      	movs	r2, #3
 8007400:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	70fb      	strb	r3, [r7, #3]
 800740c:	e01a      	b.n	8007444 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	2bdf      	cmp	r3, #223	; 0xdf
 8007412:	d908      	bls.n	8007426 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	70fb      	strb	r3, [r7, #3]
 8007424:	e00e      	b.n	8007444 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	2bbf      	cmp	r3, #191	; 0xbf
 800742a:	d908      	bls.n	800743e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	70fb      	strb	r3, [r7, #3]
 800743c:	e002      	b.n	8007444 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	b29b      	uxth	r3, r3
 8007442:	e02a      	b.n	800749a <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 800744c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007450:	e023      	b.n	800749a <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007458:	3b01      	subs	r3, #1
 800745a:	b2da      	uxtb	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8c1b      	ldrh	r3, [r3, #32]
 8007466:	019b      	lsls	r3, r3, #6
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007474:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8c1a      	ldrh	r2, [r3, #32]
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	b29b      	uxth	r3, r3
 800747e:	4313      	orrs	r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8007490:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007494:	e001      	b.n	800749a <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8c1b      	ldrh	r3, [r3, #32]
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80074a6:	b590      	push	{r4, r7, lr}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	460b      	mov	r3, r1
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691c      	ldr	r4, [r3, #16]
 80074b8:	7afa      	ldrb	r2, [r7, #11]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2117      	movs	r1, #23
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	47a0      	blx	r4
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd90      	pop	{r4, r7, pc}

080074cc <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80074d8:	1cfb      	adds	r3, r7, #3
 80074da:	461a      	mov	r2, r3
 80074dc:	2101      	movs	r1, #1
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff ffe1 	bl	80074a6 <u8x8_byte_SendBytes>
 80074e4:	4603      	mov	r3, r0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80074ee:	b590      	push	{r4, r7, lr}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691c      	ldr	r4, [r3, #16]
 80074fa:	2300      	movs	r3, #0
 80074fc:	2200      	movs	r2, #0
 80074fe:	2118      	movs	r1, #24
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	47a0      	blx	r4
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bd90      	pop	{r4, r7, pc}

0800750e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800750e:	b590      	push	{r4, r7, lr}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691c      	ldr	r4, [r3, #16]
 800751a:	2300      	movs	r3, #0
 800751c:	2200      	movs	r2, #0
 800751e:	2119      	movs	r1, #25
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	47a0      	blx	r4
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}

0800752e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800752e:	b590      	push	{r4, r7, lr}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68dc      	ldr	r4, [r3, #12]
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	2300      	movs	r3, #0
 8007542:	2115      	movs	r1, #21
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	47a0      	blx	r4
 8007548:	4603      	mov	r3, r0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}

08007552 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8007552:	b590      	push	{r4, r7, lr}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68dc      	ldr	r4, [r3, #12]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	2300      	movs	r3, #0
 8007566:	2116      	movs	r1, #22
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	47a0      	blx	r4
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	bd90      	pop	{r4, r7, pc}

08007576 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007576:	b590      	push	{r4, r7, lr}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	460b      	mov	r3, r1
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68dc      	ldr	r4, [r3, #12]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2117      	movs	r1, #23
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	47a0      	blx	r4
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	bd90      	pop	{r4, r7, pc}

0800759c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68dc      	ldr	r4, [r3, #12]
 80075a8:	2300      	movs	r3, #0
 80075aa:	2200      	movs	r2, #0
 80075ac:	2118      	movs	r1, #24
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	47a0      	blx	r4
 80075b2:	4603      	mov	r3, r0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68dc      	ldr	r4, [r3, #12]
 80075c8:	2300      	movs	r3, #0
 80075ca:	2200      	movs	r2, #0
 80075cc:	2119      	movs	r1, #25
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	47a0      	blx	r4
 80075d2:	4603      	mov	r3, r0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd90      	pop	{r4, r7, pc}

080075dc <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80075dc:	b590      	push	{r4, r7, lr}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	73fb      	strb	r3, [r7, #15]
    data++;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	3301      	adds	r3, #1
 80075f0:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	2bfe      	cmp	r3, #254	; 0xfe
 80075f6:	d031      	beq.n	800765c <u8x8_cad_SendSequence+0x80>
 80075f8:	2bfe      	cmp	r3, #254	; 0xfe
 80075fa:	dc3d      	bgt.n	8007678 <u8x8_cad_SendSequence+0x9c>
 80075fc:	2b19      	cmp	r3, #25
 80075fe:	dc3b      	bgt.n	8007678 <u8x8_cad_SendSequence+0x9c>
 8007600:	2b18      	cmp	r3, #24
 8007602:	da23      	bge.n	800764c <u8x8_cad_SendSequence+0x70>
 8007604:	2b16      	cmp	r3, #22
 8007606:	dc02      	bgt.n	800760e <u8x8_cad_SendSequence+0x32>
 8007608:	2b15      	cmp	r3, #21
 800760a:	da03      	bge.n	8007614 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800760c:	e034      	b.n	8007678 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800760e:	2b17      	cmp	r3, #23
 8007610:	d00e      	beq.n	8007630 <u8x8_cad_SendSequence+0x54>
	return;
 8007612:	e031      	b.n	8007678 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68dc      	ldr	r4, [r3, #12]
 800761e:	7bba      	ldrb	r2, [r7, #14]
 8007620:	7bf9      	ldrb	r1, [r7, #15]
 8007622:	2300      	movs	r3, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	47a0      	blx	r4
	  data++;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	603b      	str	r3, [r7, #0]
	  break;
 800762e:	e022      	b.n	8007676 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8007636:	f107 030e 	add.w	r3, r7, #14
 800763a:	461a      	mov	r2, r3
 800763c:	2101      	movs	r1, #1
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff ff99 	bl	8007576 <u8x8_cad_SendData>
	  data++;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	603b      	str	r3, [r7, #0]
	  break;
 800764a:	e014      	b.n	8007676 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68dc      	ldr	r4, [r3, #12]
 8007650:	7bf9      	ldrb	r1, [r7, #15]
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	47a0      	blx	r4
	  break;
 800765a:	e00c      	b.n	8007676 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	461a      	mov	r2, r3
 8007666:	2129      	movs	r1, #41	; 0x29
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa36 	bl	8007ada <u8x8_gpio_call>
	  data++;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3301      	adds	r3, #1
 8007672:	603b      	str	r3, [r7, #0]
	  break;
 8007674:	bf00      	nop
    cmd = *data;
 8007676:	e7b6      	b.n	80075e6 <u8x8_cad_SendSequence+0xa>
	return;
 8007678:	bf00      	nop
    }
  }
}
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}

08007680 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	460b      	mov	r3, r1
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff2d 	bl	80074ee <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff ff18 	bl	80074cc <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	691c      	ldr	r4, [r3, #16]
 80076a0:	7afa      	ldrb	r2, [r7, #11]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2117      	movs	r1, #23
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff2f 	bl	800750e <u8x8_byte_EndTransfer>
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	72fb      	strb	r3, [r7, #11]
 80076c6:	4613      	mov	r3, r2
 80076c8:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3b14      	subs	r3, #20
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d86e      	bhi.n	80077b0 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	0800776f 	.word	0x0800776f
 80076dc:	080076f1 	.word	0x080076f1
 80076e0:	0800771f 	.word	0x0800771f
 80076e4:	0800772b 	.word	0x0800772b
 80076e8:	08007793 	.word	0x08007793
 80076ec:	0800779b 	.word	0x0800779b
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80076f0:	4b33      	ldr	r3, [pc, #204]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7ff ff08 	bl	800750e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fef5 	bl	80074ee <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fee0 	bl	80074cc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800770c:	7abb      	ldrb	r3, [r7, #10]
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff fedb 	bl	80074cc <u8x8_byte_SendByte>
      in_transfer = 1;
 8007716:	4b2a      	ldr	r3, [pc, #168]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800771c:	e04a      	b.n	80077b4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800771e:	7abb      	ldrb	r3, [r7, #10]
 8007720:	4619      	mov	r1, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff fed2 	bl	80074cc <u8x8_byte_SendByte>
      break;      
 8007728:	e044      	b.n	80077b4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800772a:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff feeb 	bl	800750e <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800773c:	e00a      	b.n	8007754 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	2118      	movs	r1, #24
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff ff9c 	bl	8007680 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8007748:	7abb      	ldrb	r3, [r7, #10]
 800774a:	3b18      	subs	r3, #24
 800774c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	3318      	adds	r3, #24
 8007752:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8007754:	7abb      	ldrb	r3, [r7, #10]
 8007756:	2b18      	cmp	r3, #24
 8007758:	d8f1      	bhi.n	800773e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800775a:	7abb      	ldrb	r3, [r7, #10]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4619      	mov	r1, r3
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff ff8d 	bl	8007680 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8007766:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
      break;
 800776c:	e022      	b.n	80077b4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007774:	2bff      	cmp	r3, #255	; 0xff
 8007776:	d103      	bne.n	8007780 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2278      	movs	r2, #120	; 0x78
 800777c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	691c      	ldr	r4, [r3, #16]
 8007784:	7aba      	ldrb	r2, [r7, #10]
 8007786:	7af9      	ldrb	r1, [r7, #11]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	47a0      	blx	r4
 800778e:	4603      	mov	r3, r0
 8007790:	e011      	b.n	80077b6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
      break;
 8007798:	e00c      	b.n	80077b4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff feb3 	bl	800750e <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e001      	b.n	80077b4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80077b4:	2301      	movs	r3, #1
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd90      	pop	{r4, r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000d78 	.word	0x20000d78

080077c4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	72fb      	strb	r3, [r7, #11]
 80077d2:	4613      	mov	r3, r2
 80077d4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	3b0b      	subs	r3, #11
 80077da:	2b04      	cmp	r3, #4
 80077dc:	f200 808a 	bhi.w	80078f4 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	080077fd 	.word	0x080077fd
 80077ec:	080078f5 	.word	0x080078f5
 80077f0:	08007817 	.word	0x08007817
 80077f4:	08007849 	.word	0x08007849
 80077f8:	08007869 	.word	0x08007869
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80077fc:	7abb      	ldrb	r3, [r7, #10]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8007802:	4940      	ldr	r1, [pc, #256]	; (8007904 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff fee9 	bl	80075dc <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800780a:	e075      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800780c:	493e      	ldr	r1, [pc, #248]	; (8007908 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fee4 	bl	80075dc <u8x8_cad_SendSequence>
      break;
 8007814:	e070      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8007816:	7abb      	ldrb	r3, [r7, #10]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800781c:	493b      	ldr	r1, [pc, #236]	; (800790c <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fedc 	bl	80075dc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	7c9a      	ldrb	r2, [r3, #18]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007830:	e062      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8007832:	4937      	ldr	r1, [pc, #220]	; (8007910 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff fed1 	bl	80075dc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	7cda      	ldrb	r2, [r3, #19]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8007846:	e057      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fea7 	bl	800759c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800784e:	2181      	movs	r1, #129	; 0x81
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fe6c 	bl	800752e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8007856:	7abb      	ldrb	r3, [r7, #10]
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fe79 	bl	8007552 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff feab 	bl	80075bc <u8x8_cad_EndTransfer>
      break;
 8007866:	e047      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff fe97 	bl	800759c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	795b      	ldrb	r3, [r3, #5]
 8007872:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	4413      	add	r3, r2
 8007884:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8007886:	2140      	movs	r1, #64	; 0x40
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff fe50 	bl	800752e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f043 0310 	orr.w	r3, r3, #16
 8007898:	b2db      	uxtb	r3, r3
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff fe46 	bl	800752e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff fe50 	bl	8007552 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	799b      	ldrb	r3, [r3, #6]
 80078b6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	4619      	mov	r1, r3
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fe47 	bl	8007552 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80078d0:	7dbb      	ldrb	r3, [r7, #22]
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4619      	mov	r1, r3
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fe4b 	bl	8007576 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80078e0:	7abb      	ldrb	r3, [r7, #10]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80078e6:	7abb      	ldrb	r3, [r7, #10]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1eb      	bne.n	80078c4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fe65 	bl	80075bc <u8x8_cad_EndTransfer>
      break;
 80078f2:	e001      	b.n	80078f8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80078f8:	2301      	movs	r3, #1
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	0800c3b4 	.word	0x0800c3b4
 8007908:	0800c3bc 	.word	0x0800c3bc
 800790c:	0800c3c4 	.word	0x0800c3c4
 8007910:	0800c3cc 	.word	0x0800c3cc

08007914 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	72fb      	strb	r3, [r7, #11]
 8007922:	4613      	mov	r3, r2
 8007924:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007926:	7aba      	ldrb	r2, [r7, #10]
 8007928:	7af9      	ldrb	r1, [r7, #11]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7ff ff49 	bl	80077c4 <u8x8_d_ssd1306_sh1106_generic>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8007938:	2301      	movs	r3, #1
 800793a:	e014      	b.n	8007966 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	2b09      	cmp	r3, #9
 8007940:	d009      	beq.n	8007956 <u8x8_d_ssd1306_128x64_noname+0x42>
 8007942:	2b0a      	cmp	r3, #10
 8007944:	d10c      	bne.n	8007960 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f82a 	bl	80079a0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800794c:	4908      	ldr	r1, [pc, #32]	; (8007970 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff fe44 	bl	80075dc <u8x8_cad_SendSequence>
      break;
 8007954:	e006      	b.n	8007964 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8007956:	4907      	ldr	r1, [pc, #28]	; (8007974 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f80d 	bl	8007978 <u8x8_d_helper_display_setup_memory>
      break;
 800795e:	e001      	b.n	8007964 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8007960:	2300      	movs	r3, #0
 8007962:	e000      	b.n	8007966 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8007964:	2301      	movs	r3, #1
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	0800c37c 	.word	0x0800c37c
 8007974:	0800c3d4 	.word	0x0800c3d4

08007978 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	7c9a      	ldrb	r2, [r3, #18]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695c      	ldr	r4, [r3, #20]
 80079ac:	2300      	movs	r3, #0
 80079ae:	2200      	movs	r2, #0
 80079b0:	2128      	movs	r1, #40	; 0x28
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68dc      	ldr	r4, [r3, #12]
 80079ba:	2300      	movs	r3, #0
 80079bc:	2200      	movs	r2, #0
 80079be:	2114      	movs	r1, #20
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80079c4:	2201      	movs	r2, #1
 80079c6:	214b      	movs	r1, #75	; 0x4b
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f886 	bl	8007ada <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	791b      	ldrb	r3, [r3, #4]
 80079d4:	461a      	mov	r2, r3
 80079d6:	2129      	movs	r1, #41	; 0x29
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f87e 	bl	8007ada <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80079de:	2200      	movs	r2, #0
 80079e0:	214b      	movs	r1, #75	; 0x4b
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f879 	bl	8007ada <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	461a      	mov	r2, r3
 80079f0:	2129      	movs	r1, #41	; 0x29
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f871 	bl	8007ada <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80079f8:	2201      	movs	r2, #1
 80079fa:	214b      	movs	r1, #75	; 0x4b
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f86c 	bl	8007ada <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	795b      	ldrb	r3, [r3, #5]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2129      	movs	r1, #41	; 0x29
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f864 	bl	8007ada <u8x8_gpio_call>
}    
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd90      	pop	{r4, r7, pc}

08007a1a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007a1a:	b590      	push	{r4, r7, lr}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	4608      	mov	r0, r1
 8007a24:	4611      	mov	r1, r2
 8007a26:	461a      	mov	r2, r3
 8007a28:	4603      	mov	r3, r0
 8007a2a:	70fb      	strb	r3, [r7, #3]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70bb      	strb	r3, [r7, #2]
 8007a30:	4613      	mov	r3, r2
 8007a32:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007a38:	78bb      	ldrb	r3, [r7, #2]
 8007a3a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007a3c:	787b      	ldrb	r3, [r7, #1]
 8007a3e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689c      	ldr	r4, [r3, #8]
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	210f      	movs	r1, #15
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	47a0      	blx	r4
 8007a54:	4603      	mov	r3, r0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd90      	pop	{r4, r7, pc}

08007a5e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007a5e:	b590      	push	{r4, r7, lr}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689c      	ldr	r4, [r3, #8]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2109      	movs	r1, #9
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	47a0      	blx	r4
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689c      	ldr	r4, [r3, #8]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	210a      	movs	r1, #10
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd90      	pop	{r4, r7, pc}

08007a9a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007a9a:	b590      	push	{r4, r7, lr}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689c      	ldr	r4, [r3, #8]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	2300      	movs	r3, #0
 8007aae:	210b      	movs	r1, #11
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	47a0      	blx	r4
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd90      	pop	{r4, r7, pc}

08007abc <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689c      	ldr	r4, [r3, #8]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	2200      	movs	r2, #0
 8007acc:	2110      	movs	r1, #16
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	47a0      	blx	r4
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd90      	pop	{r4, r7, pc}

08007ada <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007ada:	b590      	push	{r4, r7, lr}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695c      	ldr	r4, [r3, #20]
 8007aee:	78ba      	ldrb	r2, [r7, #2]
 8007af0:	78f9      	ldrb	r1, [r7, #3]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	47a0      	blx	r4
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	607b      	str	r3, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	72fb      	strb	r3, [r7, #11]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <u8x8_SetupDefaults+0x58>)
 8007b32:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <u8x8_SetupDefaults+0x58>)
 8007b38:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <u8x8_SetupDefaults+0x58>)
 8007b3e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a0d      	ldr	r2, [pc, #52]	; (8007b78 <u8x8_SetupDefaults+0x58>)
 8007b44:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	22ff      	movs	r2, #255	; 0xff
 8007b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	22ff      	movs	r2, #255	; 0xff
 8007b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	08007b01 	.word	0x08007b01

08007b7c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff ffc8 	bl	8007b20 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff ff58 	bl	8007a5e <u8x8_SetupMemory>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <__libc_init_array>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4d0d      	ldr	r5, [pc, #52]	; (8007bf0 <__libc_init_array+0x38>)
 8007bbc:	4c0d      	ldr	r4, [pc, #52]	; (8007bf4 <__libc_init_array+0x3c>)
 8007bbe:	1b64      	subs	r4, r4, r5
 8007bc0:	10a4      	asrs	r4, r4, #2
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	42a6      	cmp	r6, r4
 8007bc6:	d109      	bne.n	8007bdc <__libc_init_array+0x24>
 8007bc8:	4d0b      	ldr	r5, [pc, #44]	; (8007bf8 <__libc_init_array+0x40>)
 8007bca:	4c0c      	ldr	r4, [pc, #48]	; (8007bfc <__libc_init_array+0x44>)
 8007bcc:	f000 f820 	bl	8007c10 <_init>
 8007bd0:	1b64      	subs	r4, r4, r5
 8007bd2:	10a4      	asrs	r4, r4, #2
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	42a6      	cmp	r6, r4
 8007bd8:	d105      	bne.n	8007be6 <__libc_init_array+0x2e>
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be0:	4798      	blx	r3
 8007be2:	3601      	adds	r6, #1
 8007be4:	e7ee      	b.n	8007bc4 <__libc_init_array+0xc>
 8007be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bea:	4798      	blx	r3
 8007bec:	3601      	adds	r6, #1
 8007bee:	e7f2      	b.n	8007bd6 <__libc_init_array+0x1e>
 8007bf0:	0800c3f4 	.word	0x0800c3f4
 8007bf4:	0800c3f4 	.word	0x0800c3f4
 8007bf8:	0800c3f4 	.word	0x0800c3f4
 8007bfc:	0800c3f8 	.word	0x0800c3f8

08007c00 <memset>:
 8007c00:	4402      	add	r2, r0
 8007c02:	4603      	mov	r3, r0
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d100      	bne.n	8007c0a <memset+0xa>
 8007c08:	4770      	bx	lr
 8007c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0e:	e7f9      	b.n	8007c04 <memset+0x4>

08007c10 <_init>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr

08007c1c <_fini>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr
