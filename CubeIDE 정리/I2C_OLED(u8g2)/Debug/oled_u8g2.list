
oled_u8g2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008498  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000485c  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea4  0800cea4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceac  0800ceac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ceb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000d80  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000df0  20000df0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056d09  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004146  00000000  00000000  00076da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037f8  00000000  00000000  0007aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003628  00000000  00000000  0007e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d62  00000000  00000000  00081d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d84  00000000  00000000  000a8a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5e4a  00000000  00000000  000cb7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c1640  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fb8c  00000000  00000000  001c1690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008630 	.word	0x08008630

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08008630 	.word	0x08008630

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int32_t i = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd93 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f851 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f9c9 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 f99f 	bl	80008ec <MX_DMA_Init>
  MX_ETH_Init();
 80005ae:	f000 f8b7 	bl	8000720 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b2:	f000 f943 	bl	800083c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b6:	f000 f96b 	bl	8000890 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8ff 	bl	80007bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
u8g2stm32_init(&u8g2);
 80005be:	481c      	ldr	r0, [pc, #112]	; (8000630 <main+0x9c>)
 80005c0:	f006 fe94 	bl	80072ec <u8g2stm32_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  u8g2_ClearBuffer(&u8g2);
 80005c4:	481a      	ldr	r0, [pc, #104]	; (8000630 <main+0x9c>)
 80005c6:	f005 fc17 	bl	8005df8 <u8g2_ClearBuffer>
	  u8g2_SetFontMode(&u8g2, 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	4818      	ldr	r0, [pc, #96]	; (8000630 <main+0x9c>)
 80005ce:	f006 f972 	bl	80068b6 <u8g2_SetFontMode>
	  u8g2_SetFontDirection(&u8g2, 0);
 80005d2:	2100      	movs	r1, #0
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0x9c>)
 80005d6:	f006 fb03 	bl	8006be0 <u8g2_SetFontDirection>

	  u8g2_SetFont(&u8g2, u8g2_font_cu12_hf);
 80005da:	4916      	ldr	r1, [pc, #88]	; (8000634 <main+0xa0>)
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <main+0x9c>)
 80005de:	f006 fae5 	bl	8006bac <u8g2_SetFont>
	  u8g2_DrawStr(&u8g2, 5, 15, "Hello OLED");
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0xa4>)
 80005e4:	220f      	movs	r2, #15
 80005e6:	2105      	movs	r1, #5
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x9c>)
 80005ea:	f006 fa23 	bl	8006a34 <u8g2_DrawStr>

	  u8g2_SetFont(&u8g2, u8g2_font_unifont_t_korean1);
 80005ee:	4913      	ldr	r1, [pc, #76]	; (800063c <main+0xa8>)
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x9c>)
 80005f2:	f006 fadb 	bl	8006bac <u8g2_SetFont>
	  u8g2_DrawUTF8(&u8g2, 5 , 35 ,"안녕 하세요");
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <main+0xac>)
 80005f8:	2223      	movs	r2, #35	; 0x23
 80005fa:	2105      	movs	r1, #5
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x9c>)
 80005fe:	f006 fa33 	bl	8006a68 <u8g2_DrawUTF8>

	  sprintf(str, "%d", i++);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	627a      	str	r2, [r7, #36]	; 0x24
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	461a      	mov	r2, r3
 800060c:	490d      	ldr	r1, [pc, #52]	; (8000644 <main+0xb0>)
 800060e:	f007 fba1 	bl	8007d54 <siprintf>
	  u8g2_DrawStr(&u8g2, 5 , 55, str);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2237      	movs	r2, #55	; 0x37
 8000616:	2105      	movs	r1, #5
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x9c>)
 800061a:	f006 fa0b 	bl	8006a34 <u8g2_DrawStr>
	  u8g2_SendBuffer(&u8g2);
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0x9c>)
 8000620:	f005 fc5d 	bl	8005ede <u8g2_SendBuffer>
	  HAL_Delay(1000);
 8000624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000628:	f000 fdc0 	bl	80011ac <HAL_Delay>
	  u8g2_ClearBuffer(&u8g2);
 800062c:	e7ca      	b.n	80005c4 <main+0x30>
 800062e:	bf00      	nop
 8000630:	20000918 	.word	0x20000918
 8000634:	0800868c 	.word	0x0800868c
 8000638:	08008648 	.word	0x08008648
 800063c:	08009590 	.word	0x08009590
 8000640:	08008654 	.word	0x08008654
 8000644:	08008668 	.word	0x08008668

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fb74 	bl	8007d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f934 	bl	8004940 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f9db 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fb95 	bl	8004e30 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800070c:	f000 f9c4 	bl	8000a98 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ETH_Init+0x84>)
 8000726:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <MX_ETH_Init+0x88>)
 8000728:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_ETH_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ETH_Init+0x8c>)
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_ETH_Init+0x8c>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ETH_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_ETH_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_ETH_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_ETH_Init+0x84>)
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_ETH_Init+0x8c>)
 8000752:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ETH_Init+0x84>)
 8000756:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800075a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ETH_Init+0x84>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_ETH_Init+0x90>)
 8000760:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_ETH_Init+0x84>)
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_ETH_Init+0x94>)
 8000766:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_ETH_Init+0x84>)
 800076a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800076e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ETH_Init+0x84>)
 8000772:	f001 f9fd 	bl	8001b70 <HAL_ETH_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f98c 	bl	8000a98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000780:	2238      	movs	r2, #56	; 0x38
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_ETH_Init+0x98>)
 8000786:	f007 fadd 	bl	8007d44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_ETH_Init+0x98>)
 800078c:	2221      	movs	r2, #33	; 0x21
 800078e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_ETH_Init+0x98>)
 8000792:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000796:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_ETH_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000204 	.word	0x20000204
 80007a8:	40028000 	.word	0x40028000
 80007ac:	200009ac 	.word	0x200009ac
 80007b0:	20000164 	.word	0x20000164
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	2000008c 	.word	0x2000008c

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_I2C1_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C1_Init+0x74>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_I2C1_Init+0x74>)
 80007fa:	f001 fea7 	bl	800254c <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 f948 	bl	8000a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_I2C1_Init+0x74>)
 800080c:	f003 feff 	bl	800460e <HAL_I2CEx_ConfigAnalogFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000816:	f000 f93f 	bl	8000a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C1_Init+0x74>)
 800081e:	f003 ff32 	bl	8004686 <HAL_I2CEx_ConfigDigitalFilter>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000828:	f000 f936 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200002b4 	.word	0x200002b4
 8000834:	40005400 	.word	0x40005400
 8000838:	00061a80 	.word	0x00061a80

0800083c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART3_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART3_UART_Init+0x4c>)
 8000874:	f004 fcfc 	bl	8005270 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f90b 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003c8 	.word	0x200003c8
 800088c:	40004800 	.word	0x40004800

08000890 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800089a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2204      	movs	r2, #4
 80008a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	f003 ff16 	bl	8004704 <HAL_PCD_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f8db 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000040c 	.word	0x2000040c

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_DMA_Init+0x4c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_DMA_Init+0x4c>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_DMA_Init+0x4c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2010      	movs	r0, #16
 8000914:	f000 fd49 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000918:	2010      	movs	r0, #16
 800091a:	f000 fd62 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	202f      	movs	r0, #47	; 0x2f
 8000924:	f000 fd41 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000928:	202f      	movs	r0, #47	; 0x2f
 800092a:	f000 fd5a 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <MX_GPIO_Init+0x14c>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a44      	ldr	r2, [pc, #272]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a3d      	ldr	r2, [pc, #244]	; (8000a88 <MX_GPIO_Init+0x14c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x14c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_GPIO_Init+0x14c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a00:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MX_GPIO_Init+0x150>)
 8000a02:	f001 fd89 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4821      	ldr	r0, [pc, #132]	; (8000a90 <MX_GPIO_Init+0x154>)
 8000a0c:	f001 fd84 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_GPIO_Init+0x158>)
 8000a28:	f001 fbca 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_GPIO_Init+0x150>)
 8000a46:	f001 fbbb 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x154>)
 8000a62:	f001 fbad 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_GPIO_Init+0x154>)
 8000a7a:	f001 fba1 	bl	80021c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40020800 	.word	0x40020800

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a55      	ldr	r2, [pc, #340]	; (8000c68 <HAL_ETH_MspInit+0x174>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f040 80a4 	bne.w	8000c60 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bdc:	2332      	movs	r3, #50	; 0x32
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bec:	230b      	movs	r3, #11
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481e      	ldr	r0, [pc, #120]	; (8000c70 <HAL_ETH_MspInit+0x17c>)
 8000bf8:	f001 fae2 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bfc:	2386      	movs	r3, #134	; 0x86
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0c:	230b      	movs	r3, #11
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4817      	ldr	r0, [pc, #92]	; (8000c74 <HAL_ETH_MspInit+0x180>)
 8000c18:	f001 fad2 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2e:	230b      	movs	r3, #11
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	480f      	ldr	r0, [pc, #60]	; (8000c78 <HAL_ETH_MspInit+0x184>)
 8000c3a:	f001 fac1 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <HAL_ETH_MspInit+0x188>)
 8000c5c:	f001 fab0 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	; 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40028000 	.word	0x40028000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40021800 	.word	0x40021800

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a50      	ldr	r2, [pc, #320]	; (8000de0 <HAL_I2C_MspInit+0x160>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f040 8099 	bne.w	8000dd6 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a4d      	ldr	r2, [pc, #308]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4842      	ldr	r0, [pc, #264]	; (8000de8 <HAL_I2C_MspInit+0x168>)
 8000cde:	f001 fa6f 	bl	80021c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <HAL_I2C_MspInit+0x164>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d00:	4a3b      	ldr	r2, [pc, #236]	; (8000df0 <HAL_I2C_MspInit+0x170>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000d04:	4b39      	ldr	r3, [pc, #228]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d0e:	2240      	movs	r2, #64	; 0x40
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d3e:	482b      	ldr	r0, [pc, #172]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d40:	f000 fb6a 	bl	8001418 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000d4a:	f7ff fea5 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
 8000d54:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_I2C_MspInit+0x16c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <HAL_I2C_MspInit+0x178>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d9a:	4816      	ldr	r0, [pc, #88]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000d9c:	f000 fb3c 	bl	8001418 <HAL_DMA_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000da6:	f7ff fe77 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_I2C_MspInit+0x174>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	201f      	movs	r0, #31
 8000dbc:	f000 faf5 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000dc0:	201f      	movs	r0, #31
 8000dc2:	f000 fb0e 	bl	80013e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2020      	movs	r0, #32
 8000dcc:	f000 faed 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dd0:	2020      	movs	r0, #32
 8000dd2:	f000 fb06 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	20000308 	.word	0x20000308
 8000df0:	400260b8 	.word	0x400260b8
 8000df4:	20000368 	.word	0x20000368
 8000df8:	40026088 	.word	0x40026088

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_MspInit+0x8c>)
 8000e74:	f001 f9a4 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d13f      	bne.n	8000f2e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000ee8:	f001 f96a 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f02:	f001 f95d 	bl	80021c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6353      	str	r3, [r2, #52]	; 0x34
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8ee 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream5_IRQHandler+0x10>)
 8000f9a:	f000 fb65 	bl	8001668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000368 	.word	0x20000368

08000fa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <I2C1_EV_IRQHandler+0x10>)
 8000fae:	f001 fd41 	bl	8002a34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002b4 	.word	0x200002b4

08000fbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <I2C1_ER_IRQHandler+0x10>)
 8000fc2:	f001 fea8 	bl	8002d16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002b4 	.word	0x200002b4

08000fd0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream7_IRQHandler+0x10>)
 8000fd6:	f000 fb47 	bl	8001668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000308 	.word	0x20000308

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f006 fe6c 	bl	8007cf0 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20030000 	.word	0x20030000
 8001044:	00000400 	.word	0x00000400
 8001048:	200009b4 	.word	0x200009b4
 800104c:	20000df0 	.word	0x20000df0

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109e:	f7ff ffd7 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f006 fe2b 	bl	8007cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fa75 	bl	8000594 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b8:	0800ceb4 	.word	0x0800ceb4
  ldr r2, =_sbss
 80010bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c0:	20000df0 	.word	0x20000df0

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94f 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fcd2 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f967 	bl	80013fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92f 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200009b8 	.word	0x200009b8

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200009b8 	.word	0x200009b8

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff feb6 	bl	8001194 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e099      	b.n	8001568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001454:	e00f      	b.n	8001476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001456:	f7ff fe9d 	bl	8001194 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b05      	cmp	r3, #5
 8001462:	d908      	bls.n	8001476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e078      	b.n	8001568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e8      	bne.n	8001456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_DMA_Init+0x158>)
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d107      	bne.n	80014e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4313      	orrs	r3, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f023 0307 	bic.w	r3, r3, #7
 80014f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	2b04      	cmp	r3, #4
 8001508:	d117      	bne.n	800153a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 faab 	bl	8001a78 <DMA_CheckFifoParam>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001536:	2301      	movs	r3, #1
 8001538:	e016      	b.n	8001568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fa62 	bl	8001a0c <DMA_CalcBaseAndBitshift>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	f010803f 	.word	0xf010803f

08001574 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_DMA_Start_IT+0x26>
 8001596:	2302      	movs	r3, #2
 8001598:	e040      	b.n	800161c <HAL_DMA_Start_IT+0xa8>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d12f      	bne.n	800160e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f9f4 	bl	80019b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0216 	orr.w	r2, r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e005      	b.n	800161a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001616:	2302      	movs	r3, #2
 8001618:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800161a:	7dfb      	ldrb	r3, [r7, #23]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d004      	beq.n	8001642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00c      	b.n	800165c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001674:	4b8e      	ldr	r3, [pc, #568]	; (80018b0 <HAL_DMA_IRQHandler+0x248>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a8e      	ldr	r2, [pc, #568]	; (80018b4 <HAL_DMA_IRQHandler+0x24c>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0a9b      	lsrs	r3, r3, #10
 8001680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001692:	2208      	movs	r2, #8
 8001694:	409a      	lsls	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2208      	movs	r2, #8
 80016c2:	409a      	lsls	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2201      	movs	r2, #1
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d012      	beq.n	800170a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f043 0202 	orr.w	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2204      	movs	r2, #4
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d012      	beq.n	8001740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00b      	beq.n	8001740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2204      	movs	r2, #4
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2210      	movs	r2, #16
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d043      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03c      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2210      	movs	r2, #16
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d018      	beq.n	80017aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
 8001796:	e01f      	b.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01b      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e016      	b.n	80017d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0208 	bic.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2220      	movs	r2, #32
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 808f 	beq.w	8001908 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8087 	beq.w	8001908 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2220      	movs	r2, #32
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b05      	cmp	r3, #5
 8001810:	d136      	bne.n	8001880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0216 	bic.w	r2, r2, #22
 8001820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_DMA_IRQHandler+0x1da>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	223f      	movs	r2, #63	; 0x3f
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001872:	2b00      	cmp	r3, #0
 8001874:	d07e      	beq.n	8001974 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
        }
        return;
 800187e:	e079      	b.n	8001974 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01d      	beq.n	80018ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d031      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e02c      	b.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000
 80018b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
 80018c8:	e01e      	b.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10f      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0210 	bic.w	r2, r2, #16
 80018e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	2b00      	cmp	r3, #0
 800190e:	d032      	beq.n	8001976 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d022      	beq.n	8001962 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2205      	movs	r2, #5
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	d307      	bcc.n	8001950 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <HAL_DMA_IRQHandler+0x2cc>
 800194e:	e000      	b.n	8001952 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001950:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
 8001972:	e000      	b.n	8001976 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001974:	bf00      	nop
    }
  }
}
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b40      	cmp	r3, #64	; 0x40
 80019dc:	d108      	bne.n	80019f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ee:	e007      	b.n	8001a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3b10      	subs	r3, #16
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <DMA_CalcBaseAndBitshift+0x64>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <DMA_CalcBaseAndBitshift+0x68>)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d909      	bls.n	8001a4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a42:	f023 0303 	bic.w	r3, r3, #3
 8001a46:	1d1a      	adds	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a4c:	e007      	b.n	8001a5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	aaaaaaab 	.word	0xaaaaaaab
 8001a74:	08008684 	.word	0x08008684

08001a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11f      	bne.n	8001ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d856      	bhi.n	8001b46 <DMA_CheckFifoParam+0xce>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <DMA_CheckFifoParam+0x28>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ac3 	.word	0x08001ac3
 8001aa8:	08001ab1 	.word	0x08001ab1
 8001aac:	08001b47 	.word	0x08001b47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d046      	beq.n	8001b4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac0:	e043      	b.n	8001b4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aca:	d140      	bne.n	8001b4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad0:	e03d      	b.n	8001b4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ada:	d121      	bne.n	8001b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d837      	bhi.n	8001b52 <DMA_CheckFifoParam+0xda>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <DMA_CheckFifoParam+0x70>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001af9 	.word	0x08001af9
 8001aec:	08001aff 	.word	0x08001aff
 8001af0:	08001af9 	.word	0x08001af9
 8001af4:	08001b11 	.word	0x08001b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
      break;
 8001afc:	e030      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d025      	beq.n	8001b56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b0e:	e022      	b.n	8001b56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b18:	d11f      	bne.n	8001b5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b1e:	e01c      	b.n	8001b5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d903      	bls.n	8001b2e <DMA_CheckFifoParam+0xb6>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d003      	beq.n	8001b34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b2c:	e018      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
      break;
 8001b32:	e015      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
      break;
 8001b44:	e00b      	b.n	8001b5e <DMA_CheckFifoParam+0xe6>
      break;
 8001b46:	bf00      	nop
 8001b48:	e00a      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e008      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e006      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e004      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;
 8001b56:	bf00      	nop
 8001b58:	e002      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b5a:	bf00      	nop
 8001b5c:	e000      	b.n	8001b60 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06c      	b.n	8001c5c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2223      	movs	r2, #35	; 0x23
 8001b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe ffad 	bl	8000af4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_ETH_Init+0xf4>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <HAL_ETH_Init+0xf4>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_ETH_Init+0xf4>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_ETH_Init+0xf8>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_ETH_Init+0xf8>)
 8001bbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bc0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_ETH_Init+0xf8>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_ETH_Init+0xf8>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_ETH_Init+0xf8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bec:	f7ff fad2 	bl	8001194 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bf2:	e011      	b.n	8001c18 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bf4:	f7ff face 	bl	8001194 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c02:	d909      	bls.n	8001c18 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2204      	movs	r2, #4
 8001c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	22e0      	movs	r2, #224	; 0xe0
 8001c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e021      	b.n	8001c5c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e4      	bne.n	8001bf4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f958 	bl	8001ee0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f9ff 	bl	8002034 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa55 	bl	80020e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	461a      	mov	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f9bd 	bl	8001fc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2210      	movs	r2, #16
 8001c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800

08001c6c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <ETH_SetMACConfig+0x15c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	7c1b      	ldrb	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetMACConfig+0x28>
 8001c8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c92:	e000      	b.n	8001c96 <ETH_SetMACConfig+0x2a>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	7c5b      	ldrb	r3, [r3, #17]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <ETH_SetMACConfig+0x38>
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	e000      	b.n	8001ca6 <ETH_SetMACConfig+0x3a>
 8001ca4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ca6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7fdb      	ldrb	r3, [r3, #31]
 8001cb2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cb4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	7f92      	ldrb	r2, [r2, #30]
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d102      	bne.n	8001cca <ETH_SetMACConfig+0x5e>
 8001cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc8:	e000      	b.n	8001ccc <ETH_SetMACConfig+0x60>
 8001cca:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ccc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7f1b      	ldrb	r3, [r3, #28]
 8001cd2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cd4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ce2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d102      	bne.n	8001cf4 <ETH_SetMACConfig+0x88>
 8001cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf2:	e000      	b.n	8001cf6 <ETH_SetMACConfig+0x8a>
 8001cf4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7bdb      	ldrb	r3, [r3, #15]
 8001cfc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cfe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff fa40 	bl	80011ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	d101      	bne.n	8001d5a <ETH_SetMACConfig+0xee>
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0xf0>
 8001d5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d6a:	2a01      	cmp	r2, #1
 8001d6c:	d101      	bne.n	8001d72 <ETH_SetMACConfig+0x106>
 8001d6e:	2208      	movs	r2, #8
 8001d70:	e000      	b.n	8001d74 <ETH_SetMACConfig+0x108>
 8001d72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d7c:	2a01      	cmp	r2, #1
 8001d7e:	d101      	bne.n	8001d84 <ETH_SetMACConfig+0x118>
 8001d80:	2204      	movs	r2, #4
 8001d82:	e000      	b.n	8001d86 <ETH_SetMACConfig+0x11a>
 8001d84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d8e:	2a01      	cmp	r2, #1
 8001d90:	d101      	bne.n	8001d96 <ETH_SetMACConfig+0x12a>
 8001d92:	2202      	movs	r2, #2
 8001d94:	e000      	b.n	8001d98 <ETH_SetMACConfig+0x12c>
 8001d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff f9fb 	bl	80011ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	ff20810f 	.word	0xff20810f

08001dcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <ETH_SetDMAConfig+0x110>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_SetDMAConfig+0x2c>
 8001df2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001df6:	e000      	b.n	8001dfa <ETH_SetDMAConfig+0x2e>
 8001df8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7b5b      	ldrb	r3, [r3, #13]
 8001dfe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	7f52      	ldrb	r2, [r2, #29]
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d102      	bne.n	8001e10 <ETH_SetDMAConfig+0x44>
 8001e0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e0e:	e000      	b.n	8001e12 <ETH_SetDMAConfig+0x46>
 8001e10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	7b9b      	ldrb	r3, [r3, #14]
 8001e18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7f1b      	ldrb	r3, [r3, #28]
 8001e26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7f9b      	ldrb	r3, [r3, #30]
 8001e2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e40:	4313      	orrs	r3, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff f9a2 	bl	80011ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	461a      	mov	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ea4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff f973 	bl	80011ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f8de3f23 	.word	0xf8de3f23

08001ee0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0a6      	sub	sp, #152	; 0x98
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fe86 	bl	8001c6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff08 	bl	8001dcc <ETH_SetDMAConfig>
}
 8001fbc:	bf00      	nop
 8001fbe:	3798      	adds	r7, #152	; 0x98
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	3204      	adds	r2, #4
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <ETH_MACAddressConfig+0x68>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4313      	orrs	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <ETH_MACAddressConfig+0x6c>)
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40028040 	.word	0x40028040
 8002030:	40028044 	.word	0x40028044

08002034 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e03e      	b.n	80020c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	3206      	adds	r2, #6
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d80c      	bhi.n	80020a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	e004      	b.n	80020ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9bd      	bls.n	8002042 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	611a      	str	r2, [r3, #16]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e046      	b.n	8002182 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6919      	ldr	r1, [r3, #16]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002130:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002138:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	3212      	adds	r2, #18
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d80c      	bhi.n	8002172 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e004      	b.n	800217c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d9b5      	bls.n	80020f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b2:	60da      	str	r2, [r3, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e177      	b.n	80024cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8166 	bne.w	80024c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80c0 	beq.w	80024c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_GPIO_Init+0x324>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a61      	ldr	r2, [pc, #388]	; (80024e8 <HAL_GPIO_Init+0x328>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_GPIO_Init+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d037      	beq.n	80023fe <HAL_GPIO_Init+0x23e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_GPIO_Init+0x330>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_GPIO_Init+0x23a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x236>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_GPIO_Init+0x338>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x232>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a54      	ldr	r2, [pc, #336]	; (80024fc <HAL_GPIO_Init+0x33c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x22e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a53      	ldr	r2, [pc, #332]	; (8002500 <HAL_GPIO_Init+0x340>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x22a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_GPIO_Init+0x344>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a51      	ldr	r2, [pc, #324]	; (8002508 <HAL_GPIO_Init+0x348>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x222>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a50      	ldr	r2, [pc, #320]	; (800250c <HAL_GPIO_Init+0x34c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x21e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4f      	ldr	r2, [pc, #316]	; (8002510 <HAL_GPIO_Init+0x350>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x21a>
 80023d6:	2309      	movs	r3, #9
 80023d8:	e012      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023da:	230a      	movs	r3, #10
 80023dc:	e010      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023de:	2308      	movs	r3, #8
 80023e0:	e00e      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00c      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023e6:	2306      	movs	r3, #6
 80023e8:	e00a      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x240>
 80023fe:	2300      	movs	r3, #0
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x328>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_GPIO_Init+0x354>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002442:	4a34      	ldr	r2, [pc, #208]	; (8002514 <HAL_GPIO_Init+0x354>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_GPIO_Init+0x354>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800246c:	4a29      	ldr	r2, [pc, #164]	; (8002514 <HAL_GPIO_Init+0x354>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_GPIO_Init+0x354>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_GPIO_Init+0x354>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_GPIO_Init+0x354>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <HAL_GPIO_Init+0x354>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3301      	adds	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	f67f ae84 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40021400 	.word	0x40021400
 8002504:	40021800 	.word	0x40021800
 8002508:	40021c00 	.word	0x40021c00
 800250c:	40022000 	.word	0x40022000
 8002510:	40022400 	.word	0x40022400
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12b      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fb84 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b0:	f002 fe36 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a81      	ldr	r2, [pc, #516]	; (80027c0 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d807      	bhi.n	80025d0 <HAL_I2C_Init+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_I2C_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7d      	ldr	r2, [pc, #500]	; (80027c8 <HAL_I2C_Init+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_I2C_Init+0x280>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d802      	bhi.n	8002620 <HAL_I2C_Init+0xd4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	e009      	b.n	8002634 <HAL_I2C_Init+0xe8>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_I2C_Init+0x284>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	495c      	ldr	r1, [pc, #368]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d819      	bhi.n	8002688 <HAL_I2C_Init+0x13c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e59      	subs	r1, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_Init+0x138>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e59      	subs	r1, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	e051      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002684:	2304      	movs	r3, #4
 8002686:	e04f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <HAL_I2C_Init+0x168>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e012      	b.n	80026da <HAL_I2C_Init+0x18e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x196>
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_I2C_Init+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e58      	subs	r0, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6911      	ldr	r1, [r2, #16]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	000186a0 	.word	0x000186a0
 80027c4:	001e847f 	.word	0x001e847f
 80027c8:	003d08ff 	.word	0x003d08ff
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	f040 810d 	bne.w	8002a14 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	4a88      	ldr	r2, [pc, #544]	; (8002a24 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a1a      	lsrs	r2, r3, #8
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3b01      	subs	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d116      	bne.n	800284e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e3      	b.n	8002a16 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b02      	cmp	r3, #2
 800285a:	d0db      	beq.n	8002814 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2C_Master_Transmit_DMA+0x96>
 8002866:	2302      	movs	r3, #2
 8002868:	e0d5      	b.n	8002a16 <HAL_I2C_Master_Transmit_DMA+0x242>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d007      	beq.n	8002890 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2210      	movs	r2, #16
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	893a      	ldrh	r2, [r7, #8]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80028d2:	897a      	ldrh	r2, [r7, #10]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d07b      	beq.n	80029d8 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02a      	beq.n	800293e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_I2C_Master_Transmit_DMA+0x258>)
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 80028f6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	2200      	movs	r2, #0
 800290e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	2200      	movs	r2, #0
 8002916:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	4619      	mov	r1, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3310      	adds	r3, #16
 8002928:	461a      	mov	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	f7fe fe21 	bl	8001574 <HAL_DMA_Start_IT>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d139      	bne.n	80029b0 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800293c:	e013      	b.n	8002966 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e057      	b.n	8002a16 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800297c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800299c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e02f      	b.n	8002a10 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e01e      	b.n	8002a16 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002a0e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000000 	.word	0x20000000
 8002a24:	14f8b589 	.word	0x14f8b589
 8002a28:	ffff0000 	.word	0xffff0000
 8002a2c:	08004201 	.word	0x08004201
 8002a30:	080043ab 	.word	0x080043ab

08002a34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d003      	beq.n	8002a6c <HAL_I2C_EV_IRQHandler+0x38>
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	f040 80c1 	bne.w	8002bee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a8c:	d003      	beq.n	8002a96 <HAL_I2C_EV_IRQHandler+0x62>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_EV_IRQHandler+0x66>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_EV_IRQHandler+0x68>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f000 8132 	beq.w	8002d06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x92>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	0a5b      	lsrs	r3, r3, #9
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 fd8d 	bl	80045d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fd83 	bl	80035ca <I2C_Master_SB>
 8002ac4:	e092      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	0a5b      	lsrs	r3, r3, #9
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fdf9 	bl	80036d6 <I2C_Master_ADD10>
 8002ae4:	e082      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0xd2>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a5b      	lsrs	r3, r3, #9
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fe13 	bl	800372a <I2C_Master_ADDR>
 8002b04:	e072      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03b      	beq.n	8002b8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b20:	f000 80f3 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	09db      	lsrs	r3, r3, #7
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f9f3 	bl	8002f34 <I2C_MasterTransmit_TXE>
 8002b4e:	e04d      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80d6 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	0a5b      	lsrs	r3, r3, #9
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80cf 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
 8002b6e:	2b21      	cmp	r3, #33	; 0x21
 8002b70:	d103      	bne.n	8002b7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa7a 	bl	800306c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b78:	e0c7      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	f040 80c4 	bne.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fae8 	bl	8003158 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b88:	e0bf      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b98:	f000 80b7 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x194>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x194>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb5d 	bl	8003280 <I2C_MasterReceive_RXNE>
 8002bc6:	e011      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 809a 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	0a5b      	lsrs	r3, r3, #9
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8093 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fc06 	bl	80033f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bea:	e08e      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bec:	e08d      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e007      	b.n	8002c10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x20e>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	0a5b      	lsrs	r3, r3, #9
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c38:	69b9      	ldr	r1, [r7, #24]
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 ffc4 	bl	8003bc8 <I2C_Slave_ADDR>
 8002c40:	e066      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x22e>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	0a5b      	lsrs	r3, r3, #9
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fffe 	bl	8003c5c <I2C_Slave_STOPF>
 8002c60:	e056      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c62:	7bbb      	ldrb	r3, [r7, #14]
 8002c64:	2b21      	cmp	r3, #33	; 0x21
 8002c66:	d002      	beq.n	8002c6e <HAL_I2C_EV_IRQHandler+0x23a>
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	2b29      	cmp	r3, #41	; 0x29
 8002c6c:	d125      	bne.n	8002cba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	09db      	lsrs	r3, r3, #7
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x266>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	0a9b      	lsrs	r3, r3, #10
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x266>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 feda 	bl	8003a4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c98:	e039      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d033      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x2da>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	0a5b      	lsrs	r3, r3, #9
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02d      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 ff07 	bl	8003ac6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb8:	e029      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	0a9b      	lsrs	r3, r3, #10
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 ff12 	bl	8003b08 <I2C_SlaveReceive_RXNE>
 8002ce4:	e014      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	0a5b      	lsrs	r3, r3, #9
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 ff40 	bl	8003b84 <I2C_SlaveReceive_BTF>
 8002d04:	e004      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08a      	sub	sp, #40	; 0x28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0x4e>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <HAL_I2C_ER_IRQHandler+0x78>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	0a9b      	lsrs	r3, r3, #10
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03f      	beq.n	8002e1a <HAL_I2C_ER_IRQHandler+0x104>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d039      	beq.n	8002e1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002dc0:	7ebb      	ldrb	r3, [r7, #26]
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d112      	bne.n	8002dec <HAL_I2C_ER_IRQHandler+0xd6>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_I2C_ER_IRQHandler+0xd6>
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b21      	cmp	r3, #33	; 0x21
 8002dd0:	d008      	beq.n	8002de4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b29      	cmp	r3, #41	; 0x29
 8002dd6:	d005      	beq.n	8002de4 <HAL_I2C_ER_IRQHandler+0xce>
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b28      	cmp	r3, #40	; 0x28
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b21      	cmp	r3, #33	; 0x21
 8002de2:	d103      	bne.n	8002dec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f001 f869 	bl	8003ebc <I2C_Slave_AF>
 8002dea:	e016      	b.n	8002e1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002dfe:	7efb      	ldrb	r3, [r7, #27]
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d002      	beq.n	8002e0a <HAL_I2C_ER_IRQHandler+0xf4>
 8002e04:	7efb      	ldrb	r3, [r7, #27]
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d107      	bne.n	8002e1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	0adb      	lsrs	r3, r3, #11
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <HAL_I2C_ER_IRQHandler+0x12e>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f001 f8a0 	bl	8003f9c <I2C_ITError>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d150      	bne.n	8002ffc <I2C_MasterTransmit_TXE+0xc8>
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b21      	cmp	r3, #33	; 0x21
 8002f5e:	d14d      	bne.n	8002ffc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d01d      	beq.n	8002fa2 <I2C_MasterTransmit_TXE+0x6e>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d01a      	beq.n	8002fa2 <I2C_MasterTransmit_TXE+0x6e>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f72:	d016      	beq.n	8002fa2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2211      	movs	r2, #17
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff62 	bl	8002e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa0:	e060      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d107      	bne.n	8002fec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff7d 	bl	8002ee4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fea:	e03b      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff35 	bl	8002e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ffa:	e033      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b21      	cmp	r3, #33	; 0x21
 8003000:	d005      	beq.n	800300e <I2C_MasterTransmit_TXE+0xda>
 8003002:	7bbb      	ldrb	r3, [r7, #14]
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d12d      	bne.n	8003064 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d12a      	bne.n	8003064 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d108      	bne.n	800302a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003026:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003028:	e01c      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d103      	bne.n	800303e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f88e 	bl	8003158 <I2C_MemoryTransmit_TXE_BTF>
}
 800303c:	e012      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003062:	e7ff      	b.n	8003064 <I2C_MasterTransmit_TXE+0x130>
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b21      	cmp	r3, #33	; 0x21
 8003084:	d164      	bne.n	8003150 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030b4:	e04c      	b.n	8003150 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d01d      	beq.n	80030f8 <I2C_MasterTransmit_BTF+0x8c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d01a      	beq.n	80030f8 <I2C_MasterTransmit_BTF+0x8c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c8:	d016      	beq.n	80030f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2211      	movs	r2, #17
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff feb7 	bl	8002e64 <HAL_I2C_MasterTxCpltCallback>
}
 80030f6:	e02b      	b.n	8003150 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003106:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d107      	bne.n	8003142 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fed2 	bl	8002ee4 <HAL_I2C_MemTxCpltCallback>
}
 8003140:	e006      	b.n	8003150 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fe8a 	bl	8002e64 <HAL_I2C_MasterTxCpltCallback>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10b      	bne.n	8003190 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317c:	b2da      	uxtb	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800318e:	e073      	b.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	b29b      	uxth	r3, r3
 8003196:	121b      	asrs	r3, r3, #8
 8003198:	b2da      	uxtb	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031aa:	e065      	b.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10b      	bne.n	80031cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031ca:	e055      	b.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d151      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d10d      	bne.n	80031f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031f4:	e040      	b.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d015      	beq.n	800322c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b21      	cmp	r3, #33	; 0x21
 8003204:	d112      	bne.n	800322c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800322a:	e025      	b.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d120      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b21      	cmp	r3, #33	; 0x21
 800323a:	d11d      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800324a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fe36 	bl	8002ee4 <HAL_I2C_MemTxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b22      	cmp	r3, #34	; 0x22
 8003292:	f040 80ac 	bne.w	80033ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d921      	bls.n	80032e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	f040 808c 	bne.w	80033ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80032e6:	e082      	b.n	80033ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d075      	beq.n	80033dc <I2C_MasterReceive_RXNE+0x15c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <I2C_MasterReceive_RXNE+0x7c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d16f      	bne.n	80033dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f001 f939 	bl	8004574 <I2C_WaitOnSTOPRequestThroughIT>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d142      	bne.n	800338e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003316:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003326:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d10a      	bne.n	8003378 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fdc1 	bl	8002ef8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003376:	e03a      	b.n	80033ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2212      	movs	r2, #18
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fd76 	bl	8002e78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800338c:	e02f      	b.n	80033ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fd99 	bl	8002f0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033da:	e008      	b.n	80033ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	605a      	str	r2, [r3, #4]
}
 80033ec:	e7ff      	b.n	80033ee <I2C_MasterReceive_RXNE+0x16e>
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d11b      	bne.n	8003446 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003444:	e0bd      	b.n	80035c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d129      	bne.n	80034a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d00a      	beq.n	800347c <I2C_MasterReceive_BTF+0x86>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d007      	beq.n	800347c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034a2:	e08e      	b.n	80035c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d176      	bne.n	800359c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d002      	beq.n	80034ba <I2C_MasterReceive_BTF+0xc4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d108      	bne.n	80034cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e019      	b.n	8003500 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d002      	beq.n	80034d8 <I2C_MasterReceive_BTF+0xe2>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d108      	bne.n	80034ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e00a      	b.n	8003500 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d007      	beq.n	8003500 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800355a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d10a      	bne.n	8003586 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fcba 	bl	8002ef8 <HAL_I2C_MemRxCpltCallback>
}
 8003584:	e01d      	b.n	80035c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2212      	movs	r2, #18
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fc6f 	bl	8002e78 <HAL_I2C_MasterRxCpltCallback>
}
 800359a:	e012      	b.n	80035c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d117      	bne.n	800360e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80035f8:	e067      	b.n	80036ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	b2da      	uxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]
}
 800360c:	e05d      	b.n	80036ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003616:	d133      	bne.n	8003680 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b21      	cmp	r3, #33	; 0x21
 8003622:	d109      	bne.n	8003638 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e008      	b.n	800364a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <I2C_Master_SB+0x92>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d108      	bne.n	800366e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d032      	beq.n	80036ca <I2C_Master_SB+0x100>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d02d      	beq.n	80036ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367c:	605a      	str	r2, [r3, #4]
}
 800367e:	e024      	b.n	80036ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10e      	bne.n	80036a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	b29b      	uxth	r3, r3
 800368e:	11db      	asrs	r3, r3, #7
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f063 030f 	orn	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
}
 80036a4:	e011      	b.n	80036ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10d      	bne.n	80036ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	11db      	asrs	r3, r3, #7
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 0306 	and.w	r3, r3, #6
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f063 030e 	orn	r3, r3, #14
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <I2C_Master_ADD10+0x26>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <I2C_Master_ADD10+0x48>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371c:	605a      	str	r2, [r3, #4]
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800372a:	b480      	push	{r7}
 800372c:	b091      	sub	sp, #68	; 0x44
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b22      	cmp	r3, #34	; 0x22
 8003752:	f040 8169 	bne.w	8003a28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <I2C_Master_ADDR+0x54>
 800375e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d10b      	bne.n	800377e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	e160      	b.n	8003a40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11d      	bne.n	80037c2 <I2C_Master_ADDR+0x98>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800378e:	d118      	bne.n	80037c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	651a      	str	r2, [r3, #80]	; 0x50
 80037c0:	e13e      	b.n	8003a40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e115      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 808a 	bne.w	8003914 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003806:	d137      	bne.n	8003878 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003826:	d113      	bne.n	8003850 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	e0e7      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e0d3      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b08      	cmp	r3, #8
 800387c:	d02e      	beq.n	80038dc <I2C_Master_ADDR+0x1b2>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b20      	cmp	r3, #32
 8003882:	d02b      	beq.n	80038dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	2b12      	cmp	r3, #18
 8003888:	d102      	bne.n	8003890 <I2C_Master_ADDR+0x166>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b01      	cmp	r3, #1
 800388e:	d125      	bne.n	80038dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00e      	beq.n	80038b4 <I2C_Master_ADDR+0x18a>
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b02      	cmp	r3, #2
 800389a:	d00b      	beq.n	80038b4 <I2C_Master_ADDR+0x18a>
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d008      	beq.n	80038b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e007      	b.n	80038c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	e0a1      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e085      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d14d      	bne.n	80039ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b04      	cmp	r3, #4
 8003922:	d016      	beq.n	8003952 <I2C_Master_ADDR+0x228>
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	2b02      	cmp	r3, #2
 8003928:	d013      	beq.n	8003952 <I2C_Master_ADDR+0x228>
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b10      	cmp	r3, #16
 800392e:	d010      	beq.n	8003952 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e007      	b.n	8003962 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003960:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d117      	bne.n	80039a2 <I2C_Master_ADDR+0x278>
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003978:	d00b      	beq.n	8003992 <I2C_Master_ADDR+0x268>
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2b01      	cmp	r3, #1
 800397e:	d008      	beq.n	8003992 <I2C_Master_ADDR+0x268>
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	2b08      	cmp	r3, #8
 8003984:	d005      	beq.n	8003992 <I2C_Master_ADDR+0x268>
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	2b10      	cmp	r3, #16
 800398a:	d002      	beq.n	8003992 <I2C_Master_ADDR+0x268>
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	2b20      	cmp	r3, #32
 8003990:	d107      	bne.n	80039a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	e032      	b.n	8003a20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d117      	bne.n	8003a0a <I2C_Master_ADDR+0x2e0>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e0:	d00b      	beq.n	80039fa <I2C_Master_ADDR+0x2d0>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d008      	beq.n	80039fa <I2C_Master_ADDR+0x2d0>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d005      	beq.n	80039fa <I2C_Master_ADDR+0x2d0>
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d002      	beq.n	80039fa <I2C_Master_ADDR+0x2d0>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d107      	bne.n	8003a0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a26:	e00b      	b.n	8003a40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	e7ff      	b.n	8003a40 <I2C_Master_ADDR+0x316>
 8003a40:	bf00      	nop
 8003a42:	3744      	adds	r7, #68	; 0x44
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02b      	beq.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d114      	bne.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b29      	cmp	r3, #41	; 0x29
 8003a98:	d111      	bne.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2221      	movs	r2, #33	; 0x21
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2228      	movs	r2, #40	; 0x28
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff f9e7 	bl	8002e8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d011      	beq.n	8003afc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02c      	beq.n	8003b7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d114      	bne.n	8003b7c <I2C_SlaveReceive_RXNE+0x74>
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b2a      	cmp	r3, #42	; 0x2a
 8003b56:	d111      	bne.n	8003b7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2222      	movs	r2, #34	; 0x22
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2228      	movs	r2, #40	; 0x28
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff f992 	bl	8002ea0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003be2:	2b28      	cmp	r3, #40	; 0x28
 8003be4:	d127      	bne.n	8003c36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	09db      	lsrs	r3, r3, #7
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	81bb      	strh	r3, [r7, #12]
 8003c18:	e002      	b.n	8003c20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c28:	89ba      	ldrh	r2, [r7, #12]
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff f940 	bl	8002eb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c34:	e00e      	b.n	8003c54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb8:	d172      	bne.n	8003da0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b22      	cmp	r3, #34	; 0x22
 8003cbe:	d002      	beq.n	8003cc6 <I2C_Slave_STOPF+0x6a>
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc4:	d135      	bne.n	8003d32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd fe3c 	bl	800197c <HAL_DMA_GetState>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d049      	beq.n	8003d9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	4a69      	ldr	r2, [pc, #420]	; (8003eb4 <I2C_Slave_STOPF+0x258>)
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fc84 	bl	8001624 <HAL_DMA_Abort_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d03d      	beq.n	8003d9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d30:	e035      	b.n	8003d9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fe06 	bl	800197c <HAL_DMA_GetState>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d014      	beq.n	8003da0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	4a4e      	ldr	r2, [pc, #312]	; (8003eb4 <I2C_Slave_STOPF+0x258>)
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fc4e 	bl	8001624 <HAL_DMA_Abort_IT>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4798      	blx	r3
 8003d9c:	e000      	b.n	8003da0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03e      	beq.n	8003e28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d112      	bne.n	8003dde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d112      	bne.n	8003e12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8b3 	bl	8003f9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e36:	e039      	b.n	8003eac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d109      	bne.n	8003e52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2228      	movs	r2, #40	; 0x28
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff f827 	bl	8002ea0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b28      	cmp	r3, #40	; 0x28
 8003e5c:	d111      	bne.n	8003e82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <I2C_Slave_STOPF+0x25c>)
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff f828 	bl	8002ed0 <HAL_I2C_ListenCpltCallback>
}
 8003e80:	e014      	b.n	8003eac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	2b22      	cmp	r3, #34	; 0x22
 8003e88:	d002      	beq.n	8003e90 <I2C_Slave_STOPF+0x234>
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b22      	cmp	r3, #34	; 0x22
 8003e8e:	d10d      	bne.n	8003eac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe fffa 	bl	8002ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	08004425 	.word	0x08004425
 8003eb8:	ffff0000 	.word	0xffff0000

08003ebc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d002      	beq.n	8003ede <I2C_Slave_AF+0x22>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d129      	bne.n	8003f32 <I2C_Slave_AF+0x76>
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b28      	cmp	r3, #40	; 0x28
 8003ee2:	d126      	bne.n	8003f32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <I2C_Slave_AF+0xdc>)
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe ffd0 	bl	8002ed0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f30:	e02e      	b.n	8003f90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b21      	cmp	r3, #33	; 0x21
 8003f36:	d126      	bne.n	8003f86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <I2C_Slave_AF+0xdc>)
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2221      	movs	r2, #33	; 0x21
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe ff84 	bl	8002e8c <HAL_I2C_SlaveTxCpltCallback>
}
 8003f84:	e004      	b.n	8003f90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f8e:	615a      	str	r2, [r3, #20]
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	ffff0000 	.word	0xffff0000

08003f9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d002      	beq.n	8003fc0 <I2C_ITError+0x24>
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d10a      	bne.n	8003fd6 <I2C_ITError+0x3a>
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b22      	cmp	r3, #34	; 0x22
 8003fc4:	d107      	bne.n	8003fd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fdc:	2b28      	cmp	r3, #40	; 0x28
 8003fde:	d107      	bne.n	8003ff0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2228      	movs	r2, #40	; 0x28
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fee:	e015      	b.n	800401c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d00a      	beq.n	8004016 <I2C_ITError+0x7a>
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d007      	beq.n	8004016 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d162      	bne.n	80040f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d020      	beq.n	800408c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <I2C_ITError+0x25c>)
 8004050:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fae4 	bl	8001624 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8089 	beq.w	8004176 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004086:	4610      	mov	r0, r2
 8004088:	4798      	blx	r3
 800408a:	e074      	b.n	8004176 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	4a59      	ldr	r2, [pc, #356]	; (80041f8 <I2C_ITError+0x25c>)
 8004092:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fac3 	bl	8001624 <HAL_DMA_Abort_IT>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d068      	beq.n	8004176 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d10b      	bne.n	80040ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040ec:	4610      	mov	r0, r2
 80040ee:	4798      	blx	r3
 80040f0:	e041      	b.n	8004176 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b60      	cmp	r3, #96	; 0x60
 80040fc:	d125      	bne.n	800414a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d10b      	bne.n	8004132 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe feec 	bl	8002f20 <HAL_I2C_AbortCpltCallback>
 8004148:	e015      	b.n	8004176 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d10b      	bne.n	8004170 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fe fecb 	bl	8002f0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d113      	bne.n	80041f0 <I2C_ITError+0x254>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b28      	cmp	r3, #40	; 0x28
 80041cc:	d110      	bne.n	80041f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <I2C_ITError+0x260>)
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe fe70 	bl	8002ed0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	08004425 	.word	0x08004425
 80041fc:	ffff0000 	.word	0xffff0000

08004200 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004232:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	2200      	movs	r2, #0
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	2200      	movs	r2, #0
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800425a:	2b21      	cmp	r3, #33	; 0x21
 800425c:	d007      	beq.n	800426e <I2C_DMAXferCplt+0x6e>
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004264:	2b22      	cmp	r3, #34	; 0x22
 8004266:	d131      	bne.n	80042cc <I2C_DMAXferCplt+0xcc>
 8004268:	7cbb      	ldrb	r3, [r7, #18]
 800426a:	2b20      	cmp	r3, #32
 800426c:	d12e      	bne.n	80042cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800427c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	2b29      	cmp	r3, #41	; 0x29
 8004288:	d10a      	bne.n	80042a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2221      	movs	r2, #33	; 0x21
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2228      	movs	r2, #40	; 0x28
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7fe fdf7 	bl	8002e8c <HAL_I2C_SlaveTxCpltCallback>
 800429e:	e00c      	b.n	80042ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d109      	bne.n	80042ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2222      	movs	r2, #34	; 0x22
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2228      	movs	r2, #40	; 0x28
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042b4:	6978      	ldr	r0, [r7, #20]
 80042b6:	f7fe fdf3 	bl	8002ea0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042ca:	e06a      	b.n	80043a2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d064      	beq.n	80043a2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004300:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004308:	d009      	beq.n	800431e <I2C_DMAXferCplt+0x11e>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d006      	beq.n	800431e <I2C_DMAXferCplt+0x11e>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004316:	d002      	beq.n	800431e <I2C_DMAXferCplt+0x11e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b20      	cmp	r3, #32
 800431c:	d107      	bne.n	800432e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800433c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800435c:	6978      	ldr	r0, [r7, #20]
 800435e:	f7fe fdd5 	bl	8002f0c <HAL_I2C_ErrorCallback>
}
 8004362:	e01e      	b.n	80043a2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d10a      	bne.n	800438e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7fe fdb6 	bl	8002ef8 <HAL_I2C_MemRxCpltCallback>
}
 800438c:	e009      	b.n	80043a2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2212      	movs	r2, #18
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f7fe fd6b 	bl	8002e78 <HAL_I2C_MasterRxCpltCallback>
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2200      	movs	r2, #0
 80043c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	2200      	movs	r2, #0
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fd fadd 	bl	8001998 <HAL_DMA_GetError>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d01b      	beq.n	800441c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0210 	orr.w	r2, r3, #16
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7fe fd78 	bl	8002f0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800443e:	4b4b      	ldr	r3, [pc, #300]	; (800456c <I2C_DMAAbort+0x148>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <I2C_DMAAbort+0x14c>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a1a      	lsrs	r2, r3, #8
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00da      	lsls	r2, r3, #3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800446a:	e00a      	b.n	8004482 <I2C_DMAAbort+0x5e>
    }
    count--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	d0ea      	beq.n	8004458 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	2200      	movs	r2, #0
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	2200      	movs	r2, #0
 80044a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	2200      	movs	r2, #0
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	2200      	movs	r2, #0
 80044d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b60      	cmp	r3, #96	; 0x60
 80044f2:	d10e      	bne.n	8004512 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7fe fd08 	bl	8002f20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004510:	e027      	b.n	8004562 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004518:	2b28      	cmp	r3, #40	; 0x28
 800451a:	d117      	bne.n	800454c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2228      	movs	r2, #40	; 0x28
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800454a:	e007      	b.n	800455c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800455c:	6978      	ldr	r0, [r7, #20]
 800455e:	f7fe fcd5 	bl	8002f0c <HAL_I2C_ErrorCallback>
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000
 8004570:	14f8b589 	.word	0x14f8b589

08004574 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004580:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	0a1a      	lsrs	r2, r3, #8
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b01      	subs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e008      	b.n	80045c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c0:	d0e9      	beq.n	8004596 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000000 	.word	0x20000000
 80045d4:	14f8b589 	.word	0x14f8b589

080045d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045e8:	d103      	bne.n	80045f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045f0:	e007      	b.n	8004602 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045fa:	d102      	bne.n	8004602 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2208      	movs	r2, #8
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b20      	cmp	r3, #32
 8004622:	d129      	bne.n	8004678 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d12a      	bne.n	80046f6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	f023 030f 	bic.w	r3, r3, #15
 80046c6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	89fa      	ldrh	r2, [r7, #14]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004706:	b08f      	sub	sp, #60	; 0x3c
 8004708:	af0a      	add	r7, sp, #40	; 0x28
 800470a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e10f      	b.n	8004936 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc fbab 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2203      	movs	r2, #3
 800473a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f8ae 	bl	80058b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	687e      	ldr	r6, [r7, #4]
 8004762:	466d      	mov	r5, sp
 8004764:	f106 0410 	add.w	r4, r6, #16
 8004768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004774:	e885 0003 	stmia.w	r5, {r0, r1}
 8004778:	1d33      	adds	r3, r6, #4
 800477a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f001 f839 	bl	80057f4 <USB_CoreInit>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0d0      	b.n	8004936 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f89c 	bl	80058d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e04a      	b.n	800483c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	333d      	adds	r3, #61	; 0x3d
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	333c      	adds	r3, #60	; 0x3c
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3344      	adds	r3, #68	; 0x44
 80047e2:	4602      	mov	r2, r0
 80047e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3340      	adds	r3, #64	; 0x40
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3348      	adds	r3, #72	; 0x48
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	334c      	adds	r3, #76	; 0x4c
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3354      	adds	r3, #84	; 0x54
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	3301      	adds	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3af      	bcc.n	80047a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	e044      	b.n	80048d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	3301      	adds	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d3b5      	bcc.n	800484c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	687e      	ldr	r6, [r7, #4]
 80048e8:	466d      	mov	r5, sp
 80048ea:	f106 0410 	add.w	r4, r6, #16
 80048ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80048fe:	1d33      	adds	r3, r6, #4
 8004900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004902:	6838      	ldr	r0, [r7, #0]
 8004904:	f001 f834 	bl	8005970 <USB_DevInit>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00d      	b.n	8004936 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f001 f9ff 	bl	8005d32 <USB_DevDisconnect>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e267      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b82      	ldr	r3, [pc, #520]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b7e      	ldr	r3, [pc, #504]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e242      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a75      	ldr	r2, [pc, #468]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b70      	ldr	r3, [pc, #448]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6f      	ldr	r2, [pc, #444]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6c      	ldr	r2, [pc, #432]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a68      	ldr	r2, [pc, #416]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b66      	ldr	r3, [pc, #408]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a65      	ldr	r2, [pc, #404]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fc fbcc 	bl	8001194 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fc fbc8 	bl	8001194 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e207      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fc fbb8 	bl	8001194 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fc fbb4 	bl	8001194 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1f3      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	4b4a      	ldr	r3, [pc, #296]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d116      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1c7      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4937      	ldr	r1, [pc, #220]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	e03a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fc fb6d 	bl	8001194 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fc fb69 	bl	8001194 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1a8      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4925      	ldr	r1, [pc, #148]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fc fb4c 	bl	8001194 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7fc fb48 	bl	8001194 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e187      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d036      	beq.n	8004b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fc fb2c 	bl	8001194 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fc fb28 	bl	8001194 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e167      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b5e:	e01b      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fc fb15 	bl	8001194 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fc fb11 	bl	8001194 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d907      	bls.n	8004b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e150      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470000 	.word	0x42470000
 8004b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ea      	bne.n	8004b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8097 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004baa:	4b81      	ldr	r3, [pc, #516]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4b7d      	ldr	r3, [pc, #500]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc6:	4b7a      	ldr	r3, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	4b77      	ldr	r3, [pc, #476]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d118      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	4b74      	ldr	r3, [pc, #464]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bee:	f7fc fad1 	bl	8001194 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fc facd 	bl	8001194 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e10c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2ea>
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a63      	ldr	r2, [pc, #396]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	e01c      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x30c>
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a5e      	ldr	r2, [pc, #376]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a5b      	ldr	r2, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c4c:	4b58      	ldr	r3, [pc, #352]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a57      	ldr	r2, [pc, #348]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a54      	ldr	r2, [pc, #336]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 0304 	bic.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc fa92 	bl	8001194 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fc fa8e 	bl	8001194 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0cb      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ee      	beq.n	8004c74 <HAL_RCC_OscConfig+0x334>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7fc fa7c 	bl	8001194 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fc fa78 	bl	8001194 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0b5      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a1 	beq.w	8004e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d05c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d141      	bne.n	8004d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fc fa4c 	bl	8001194 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fc fa48 	bl	8001194 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e087      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	491b      	ldr	r1, [pc, #108]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fc fa21 	bl	8001194 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fc fa1d 	bl	8001194 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e05c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x416>
 8004d74:	e054      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fa0a 	bl	8001194 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fc fa06 	bl	8001194 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e045      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x444>
 8004da2:	e03d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e038      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d121      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	3b01      	subs	r3, #1
 8004e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cc      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efe:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e067      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4934      	ldr	r1, [pc, #208]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fc f938 	bl	8001194 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f28:	f7fc f934 	bl	8001194 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 020c 	and.w	r2, r3, #12
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1eb      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc f898 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	0800866c 	.word	0x0800866c
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	20000004 	.word	0x20000004

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b094      	sub	sp, #80	; 0x50
 8005002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
 8005008:	2300      	movs	r3, #0
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500c:	2300      	movs	r3, #0
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4b79      	ldr	r3, [pc, #484]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d00d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x40>
 8005020:	2b08      	cmp	r3, #8
 8005022:	f200 80e1 	bhi.w	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x34>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x3a>
 800502e:	e0db      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b73      	ldr	r3, [pc, #460]	; (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005034:	e0db      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005036:	4b73      	ldr	r3, [pc, #460]	; (8005204 <HAL_RCC_GetSysClockFreq+0x208>)
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503a:	e0d8      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b6f      	ldr	r3, [pc, #444]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d063      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	2200      	movs	r2, #0
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
 800505c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	0159      	lsls	r1, r3, #5
 800507c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005080:	0150      	lsls	r0, r2, #5
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4621      	mov	r1, r4
 8005088:	1a51      	subs	r1, r2, r1
 800508a:	6139      	str	r1, [r7, #16]
 800508c:	4629      	mov	r1, r5
 800508e:	eb63 0301 	sbc.w	r3, r3, r1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a0:	4659      	mov	r1, fp
 80050a2:	018b      	lsls	r3, r1, #6
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050aa:	4651      	mov	r1, sl
 80050ac:	018a      	lsls	r2, r1, #6
 80050ae:	4651      	mov	r1, sl
 80050b0:	ebb2 0801 	subs.w	r8, r2, r1
 80050b4:	4659      	mov	r1, fp
 80050b6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ce:	4690      	mov	r8, r2
 80050d0:	4699      	mov	r9, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	eb18 0303 	adds.w	r3, r8, r3
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	462b      	mov	r3, r5
 80050dc:	eb49 0303 	adc.w	r3, r9, r3
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ee:	4629      	mov	r1, r5
 80050f0:	024b      	lsls	r3, r1, #9
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050f8:	4621      	mov	r1, r4
 80050fa:	024a      	lsls	r2, r1, #9
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005102:	2200      	movs	r2, #0
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
 8005106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800510c:	f7fb f8c0 	bl	8000290 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	e058      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	2200      	movs	r2, #0
 8005122:	4618      	mov	r0, r3
 8005124:	4611      	mov	r1, r2
 8005126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	0159      	lsls	r1, r3, #5
 8005142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005146:	0150      	lsls	r0, r2, #5
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4641      	mov	r1, r8
 800514e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005152:	4649      	mov	r1, r9
 8005154:	eb63 0b01 	sbc.w	fp, r3, r1
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800516c:	ebb2 040a 	subs.w	r4, r2, sl
 8005170:	eb63 050b 	sbc.w	r5, r3, fp
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	464b      	mov	r3, r9
 8005190:	eb45 0303 	adc.w	r3, r5, r3
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a2:	4629      	mov	r1, r5
 80051a4:	028b      	lsls	r3, r1, #10
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051ac:	4621      	mov	r1, r4
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	61fa      	str	r2, [r7, #28]
 80051bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c0:	f7fb f866 	bl	8000290 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	3301      	adds	r3, #1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3750      	adds	r7, #80	; 0x50
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_RCC_GetHCLKFreq+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005224:	f7ff fff0 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0a9b      	lsrs	r3, r3, #10
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	; (8005244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40023800 	.word	0x40023800
 8005244:	0800867c 	.word	0x0800867c

08005248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800524c:	f7ff ffdc 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0b5b      	lsrs	r3, r3, #13
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	; (800526c <HAL_RCC_GetPCLK2Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	0800867c 	.word	0x0800867c

08005270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e03f      	b.n	8005302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb fdb0 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f829 	bl	800530c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b0c0      	sub	sp, #256	; 0x100
 8005312:	af00      	add	r7, sp, #0
 8005314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	68d9      	ldr	r1, [r3, #12]
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	ea40 0301 	orr.w	r3, r0, r1
 8005334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	431a      	orrs	r2, r3
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	431a      	orrs	r2, r3
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005364:	f021 010c 	bic.w	r1, r1, #12
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005372:	430b      	orrs	r3, r1
 8005374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	6999      	ldr	r1, [r3, #24]
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	ea40 0301 	orr.w	r3, r0, r1
 8005392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b8f      	ldr	r3, [pc, #572]	; (80055d8 <UART_SetConfig+0x2cc>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d005      	beq.n	80053ac <UART_SetConfig+0xa0>
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b8d      	ldr	r3, [pc, #564]	; (80055dc <UART_SetConfig+0x2d0>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d104      	bne.n	80053b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ac:	f7ff ff4c 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 80053b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053b4:	e003      	b.n	80053be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053b6:	f7ff ff33 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 80053ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c8:	f040 810c 	bne.w	80055e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053de:	4622      	mov	r2, r4
 80053e0:	462b      	mov	r3, r5
 80053e2:	1891      	adds	r1, r2, r2
 80053e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053e6:	415b      	adcs	r3, r3
 80053e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053ee:	4621      	mov	r1, r4
 80053f0:	eb12 0801 	adds.w	r8, r2, r1
 80053f4:	4629      	mov	r1, r5
 80053f6:	eb43 0901 	adc.w	r9, r3, r1
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540e:	4690      	mov	r8, r2
 8005410:	4699      	mov	r9, r3
 8005412:	4623      	mov	r3, r4
 8005414:	eb18 0303 	adds.w	r3, r8, r3
 8005418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800541c:	462b      	mov	r3, r5
 800541e:	eb49 0303 	adc.w	r3, r9, r3
 8005422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800543a:	460b      	mov	r3, r1
 800543c:	18db      	adds	r3, r3, r3
 800543e:	653b      	str	r3, [r7, #80]	; 0x50
 8005440:	4613      	mov	r3, r2
 8005442:	eb42 0303 	adc.w	r3, r2, r3
 8005446:	657b      	str	r3, [r7, #84]	; 0x54
 8005448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800544c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005450:	f7fa ff1e 	bl	8000290 <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4b61      	ldr	r3, [pc, #388]	; (80055e0 <UART_SetConfig+0x2d4>)
 800545a:	fba3 2302 	umull	r2, r3, r3, r2
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	011c      	lsls	r4, r3, #4
 8005462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800546c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	1891      	adds	r1, r2, r2
 800547a:	64b9      	str	r1, [r7, #72]	; 0x48
 800547c:	415b      	adcs	r3, r3
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005484:	4641      	mov	r1, r8
 8005486:	eb12 0a01 	adds.w	sl, r2, r1
 800548a:	4649      	mov	r1, r9
 800548c:	eb43 0b01 	adc.w	fp, r3, r1
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800549c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a4:	4692      	mov	sl, r2
 80054a6:	469b      	mov	fp, r3
 80054a8:	4643      	mov	r3, r8
 80054aa:	eb1a 0303 	adds.w	r3, sl, r3
 80054ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054b2:	464b      	mov	r3, r9
 80054b4:	eb4b 0303 	adc.w	r3, fp, r3
 80054b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054d0:	460b      	mov	r3, r1
 80054d2:	18db      	adds	r3, r3, r3
 80054d4:	643b      	str	r3, [r7, #64]	; 0x40
 80054d6:	4613      	mov	r3, r2
 80054d8:	eb42 0303 	adc.w	r3, r2, r3
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
 80054de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054e6:	f7fa fed3 	bl	8000290 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <UART_SetConfig+0x2d4>)
 80054f2:	fba3 2301 	umull	r2, r3, r3, r1
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2264      	movs	r2, #100	; 0x64
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	1acb      	subs	r3, r1, r3
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <UART_SetConfig+0x2d4>)
 8005508:	fba3 2302 	umull	r2, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005514:	441c      	add	r4, r3
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	1891      	adds	r1, r2, r2
 800552e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005530:	415b      	adcs	r3, r3
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005538:	4641      	mov	r1, r8
 800553a:	1851      	adds	r1, r2, r1
 800553c:	6339      	str	r1, [r7, #48]	; 0x30
 800553e:	4649      	mov	r1, r9
 8005540:	414b      	adcs	r3, r1
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005550:	4659      	mov	r1, fp
 8005552:	00cb      	lsls	r3, r1, #3
 8005554:	4651      	mov	r1, sl
 8005556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555a:	4651      	mov	r1, sl
 800555c:	00ca      	lsls	r2, r1, #3
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	4603      	mov	r3, r0
 8005564:	4642      	mov	r2, r8
 8005566:	189b      	adds	r3, r3, r2
 8005568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556c:	464b      	mov	r3, r9
 800556e:	460a      	mov	r2, r1
 8005570:	eb42 0303 	adc.w	r3, r2, r3
 8005574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800558c:	460b      	mov	r3, r1
 800558e:	18db      	adds	r3, r3, r3
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	4613      	mov	r3, r2
 8005594:	eb42 0303 	adc.w	r3, r2, r3
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800559e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055a2:	f7fa fe75 	bl	8000290 <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <UART_SetConfig+0x2d4>)
 80055ac:	fba3 1302 	umull	r1, r3, r3, r2
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	2164      	movs	r1, #100	; 0x64
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	3332      	adds	r3, #50	; 0x32
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <UART_SetConfig+0x2d4>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	f003 0207 	and.w	r2, r3, #7
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4422      	add	r2, r4
 80055d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055d4:	e105      	b.n	80057e2 <UART_SetConfig+0x4d6>
 80055d6:	bf00      	nop
 80055d8:	40011000 	.word	0x40011000
 80055dc:	40011400 	.word	0x40011400
 80055e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055f6:	4642      	mov	r2, r8
 80055f8:	464b      	mov	r3, r9
 80055fa:	1891      	adds	r1, r2, r2
 80055fc:	6239      	str	r1, [r7, #32]
 80055fe:	415b      	adcs	r3, r3
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005606:	4641      	mov	r1, r8
 8005608:	1854      	adds	r4, r2, r1
 800560a:	4649      	mov	r1, r9
 800560c:	eb43 0501 	adc.w	r5, r3, r1
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	00eb      	lsls	r3, r5, #3
 800561a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	4643      	mov	r3, r8
 8005626:	18e3      	adds	r3, r4, r3
 8005628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800562c:	464b      	mov	r3, r9
 800562e:	eb45 0303 	adc.w	r3, r5, r3
 8005632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005652:	4629      	mov	r1, r5
 8005654:	008b      	lsls	r3, r1, #2
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565c:	4621      	mov	r1, r4
 800565e:	008a      	lsls	r2, r1, #2
 8005660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005664:	f7fa fe14 	bl	8000290 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b60      	ldr	r3, [pc, #384]	; (80057f0 <UART_SetConfig+0x4e4>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011c      	lsls	r4, r3, #4
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	61b9      	str	r1, [r7, #24]
 8005690:	415b      	adcs	r3, r3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005698:	4641      	mov	r1, r8
 800569a:	1851      	adds	r1, r2, r1
 800569c:	6139      	str	r1, [r7, #16]
 800569e:	4649      	mov	r1, r9
 80056a0:	414b      	adcs	r3, r1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b0:	4659      	mov	r1, fp
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4651      	mov	r1, sl
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4642      	mov	r2, r8
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056cc:	464b      	mov	r3, r9
 80056ce:	460a      	mov	r2, r1
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056f0:	4649      	mov	r1, r9
 80056f2:	008b      	lsls	r3, r1, #2
 80056f4:	4641      	mov	r1, r8
 80056f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fa:	4641      	mov	r1, r8
 80056fc:	008a      	lsls	r2, r1, #2
 80056fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005702:	f7fa fdc5 	bl	8000290 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <UART_SetConfig+0x4e4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <UART_SetConfig+0x4e4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572a:	441c      	add	r4, r3
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005730:	2200      	movs	r2, #0
 8005732:	673b      	str	r3, [r7, #112]	; 0x70
 8005734:	677a      	str	r2, [r7, #116]	; 0x74
 8005736:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800573a:	4642      	mov	r2, r8
 800573c:	464b      	mov	r3, r9
 800573e:	1891      	adds	r1, r2, r2
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	415b      	adcs	r3, r3
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800574a:	4641      	mov	r1, r8
 800574c:	1851      	adds	r1, r2, r1
 800574e:	6039      	str	r1, [r7, #0]
 8005750:	4649      	mov	r1, r9
 8005752:	414b      	adcs	r3, r1
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005762:	4659      	mov	r1, fp
 8005764:	00cb      	lsls	r3, r1, #3
 8005766:	4651      	mov	r1, sl
 8005768:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576c:	4651      	mov	r1, sl
 800576e:	00ca      	lsls	r2, r1, #3
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	4603      	mov	r3, r0
 8005776:	4642      	mov	r2, r8
 8005778:	189b      	adds	r3, r3, r2
 800577a:	66bb      	str	r3, [r7, #104]	; 0x68
 800577c:	464b      	mov	r3, r9
 800577e:	460a      	mov	r2, r1
 8005780:	eb42 0303 	adc.w	r3, r2, r3
 8005784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	663b      	str	r3, [r7, #96]	; 0x60
 8005790:	667a      	str	r2, [r7, #100]	; 0x64
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800579e:	4649      	mov	r1, r9
 80057a0:	008b      	lsls	r3, r1, #2
 80057a2:	4641      	mov	r1, r8
 80057a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a8:	4641      	mov	r1, r8
 80057aa:	008a      	lsls	r2, r1, #2
 80057ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057b0:	f7fa fd6e 	bl	8000290 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <UART_SetConfig+0x4e4>)
 80057ba:	fba3 1302 	umull	r1, r3, r3, r2
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2164      	movs	r1, #100	; 0x64
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	3332      	adds	r3, #50	; 0x32
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <UART_SetConfig+0x4e4>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4422      	add	r2, r4
 80057e0:	609a      	str	r2, [r3, #8]
}
 80057e2:	bf00      	nop
 80057e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ee:	bf00      	nop
 80057f0:	51eb851f 	.word	0x51eb851f

080057f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 001c 	add.w	r0, r7, #28
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2b01      	cmp	r3, #1
 800580a:	d122      	bne.n	8005852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 faa2 	bl	8005d90 <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e01a      	b.n	8005888 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa96 	bl	8005d90 <USB_CoreReset>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
 800587a:	e005      	b.n	8005888 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10b      	bne.n	80058a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f043 0206 	orr.w	r2, r3, #6
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b2:	b004      	add	sp, #16
 80058b4:	4770      	bx	lr

080058b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d115      	bne.n	8005926 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005906:	2001      	movs	r0, #1
 8005908:	f7fb fc50 	bl	80011ac <HAL_Delay>
      ms++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa2e 	bl	8005d74 <USB_GetMode>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d01e      	beq.n	800595c <USB_SetCurrentMode+0x84>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b31      	cmp	r3, #49	; 0x31
 8005922:	d9f0      	bls.n	8005906 <USB_SetCurrentMode+0x2e>
 8005924:	e01a      	b.n	800595c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d115      	bne.n	8005958 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005938:	2001      	movs	r0, #1
 800593a:	f7fb fc37 	bl	80011ac <HAL_Delay>
      ms++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa15 	bl	8005d74 <USB_GetMode>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <USB_SetCurrentMode+0x84>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b31      	cmp	r3, #49	; 0x31
 8005954:	d9f0      	bls.n	8005938 <USB_SetCurrentMode+0x60>
 8005956:	e001      	b.n	800595c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e005      	b.n	8005968 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b32      	cmp	r3, #50	; 0x32
 8005960:	d101      	bne.n	8005966 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005970:	b084      	sub	sp, #16
 8005972:	b580      	push	{r7, lr}
 8005974:	b086      	sub	sp, #24
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800597e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e009      	b.n	80059a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3340      	adds	r3, #64	; 0x40
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3301      	adds	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b0e      	cmp	r3, #14
 80059a8:	d9f2      	bls.n	8005990 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11c      	bne.n	80059ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059be:	f043 0302 	orr.w	r3, r3, #2
 80059c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
 80059e8:	e00b      	b.n	8005a02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	4619      	mov	r1, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	680b      	ldr	r3, [r1, #0]
 8005a20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10c      	bne.n	8005a42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f965 	bl	8005d00 <USB_SetDevSpeed>
 8005a36:	e008      	b.n	8005a4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a38:	2101      	movs	r1, #1
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f960 	bl	8005d00 <USB_SetDevSpeed>
 8005a40:	e003      	b.n	8005a4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a42:	2103      	movs	r1, #3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f95b 	bl	8005d00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a4a:	2110      	movs	r1, #16
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f8f3 	bl	8005c38 <USB_FlushTxFifo>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f91f 	bl	8005ca0 <USB_FlushRxFifo>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e043      	b.n	8005b1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aac:	d118      	bne.n	8005ae0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e013      	b.n	8005af2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e008      	b.n	8005af2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	461a      	mov	r2, r3
 8005aee:	2300      	movs	r3, #0
 8005af0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	2300      	movs	r3, #0
 8005b02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	461a      	mov	r2, r3
 8005b12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d3b7      	bcc.n	8005a96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	e043      	b.n	8005bb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b42:	d118      	bne.n	8005b76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	461a      	mov	r2, r3
 8005b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e013      	b.n	8005b88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e008      	b.n	8005b88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d3b7      	bcc.n	8005b2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f043 0210 	orr.w	r2, r3, #16
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <USB_DevInit+0x2c4>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f043 0208 	orr.w	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d107      	bne.n	8005c24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	f043 0304 	orr.w	r3, r3, #4
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	803c3800 	.word	0x803c3800

08005c38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <USB_FlushTxFifo+0x64>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e01b      	b.n	8005c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	daf2      	bge.n	8005c46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	019b      	lsls	r3, r3, #6
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <USB_FlushTxFifo+0x64>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d0f0      	beq.n	8005c70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <USB_FlushRxFifo+0x5c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e018      	b.n	8005cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	daf2      	bge.n	8005cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <USB_FlushRxFifo+0x5c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e006      	b.n	8005cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d0f0      	beq.n	8005cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	00030d40 	.word	0x00030d40

08005d00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d60:	f043 0302 	orr.w	r3, r3, #2
 8005d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0301 	and.w	r3, r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <USB_CoreReset+0x64>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e01b      	b.n	8005de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	daf2      	bge.n	8005d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <USB_CoreReset+0x64>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d901      	bls.n	8005dd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d0f0      	beq.n	8005dc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	00030d40 	.word	0x00030d40

08005df8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	7c1b      	ldrb	r3, [r3, #16]
 8005e06:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 ff8c 	bl	8007d44 <memset>
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	4613      	mov	r3, r2
 8005e42:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	7c1b      	ldrb	r3, [r3, #16]
 8005e4a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	89ba      	ldrh	r2, [r7, #12]
 8005e5c:	fb12 f303 	smulbb	r3, r2, r3
 8005e60:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8005e62:	89bb      	ldrh	r3, [r7, #12]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005e68:	89bb      	ldrh	r3, [r7, #12]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005e70:	7bf9      	ldrb	r1, [r7, #15]
 8005e72:	78ba      	ldrb	r2, [r7, #2]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 fe68 	bl	8007b52 <u8x8_DrawTile>
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e9c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ea4:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	7c5b      	ldrb	r3, [r3, #17]
 8005eac:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005eae:	7bba      	ldrb	r2, [r7, #14]
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ffbd 	bl	8005e34 <u8g2_send_tile_row>
    src_row++;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8005ec6:	7bfa      	ldrb	r2, [r7, #15]
 8005ec8:	7b7b      	ldrb	r3, [r7, #13]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d203      	bcs.n	8005ed6 <u8g2_send_buffer+0x4c>
 8005ece:	7bba      	ldrb	r2, [r7, #14]
 8005ed0:	7b3b      	ldrb	r3, [r7, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3eb      	bcc.n	8005eae <u8g2_send_buffer+0x24>
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ffcf 	bl	8005e8a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fe81 	bl	8007bf4 <u8x8_RefreshDisplay>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff5b 	bl	8005df8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ffd8 	bl	8005efa <u8g2_SetBufferCurrTileRow>
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff ff95 	bl	8005e8a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f66:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	4413      	add	r3, r2
 8005f72:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	7c5b      	ldrb	r3, [r3, #17]
 8005f7a:	7bfa      	ldrb	r2, [r7, #15]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d304      	bcc.n	8005f8a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fe37 	bl	8007bf4 <u8x8_RefreshDisplay>
    return 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e00d      	b.n	8005fa6 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff2f 	bl	8005df8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ffab 	bl	8005efa <u8g2_SetBufferCurrTileRow>
  return 1;
 8005fa4:	2301      	movs	r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ffb7 	bl	8005f2a <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ffc8 	bl	8005f52 <u8g2_NextPage>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f9      	bne.n	8005fbc <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ff95 	bl	8005efa <u8g2_SetBufferCurrTileRow>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	701a      	strb	r2, [r3, #0]
  return buf;
 8005fe6:	4b03      	ldr	r3, [pc, #12]	; (8005ff4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	200009bc 	.word	0x200009bc

08005ff8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a0b      	ldr	r2, [pc, #44]	; (800603c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 800600e:	490c      	ldr	r1, [pc, #48]	; (8006040 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 fe4f 	bl	8007cb4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8006016:	f107 0313 	add.w	r3, r7, #19
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ffdc 	bl	8005fd8 <u8g2_m_16_8_f>
 8006020:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006022:	7cfa      	ldrb	r2, [r7, #19]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 800602a:	6979      	ldr	r1, [r7, #20]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f001 f815 	bl	800705c <u8g2_SetupBuffer>
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	080077f1 	.word	0x080077f1
 8006040:	08007a4d 	.word	0x08007a4d
 8006044:	08006edf 	.word	0x08006edf

08006048 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	781b      	ldrb	r3, [r3, #0]
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	81fb      	strh	r3, [r7, #14]
    font++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3301      	adds	r3, #1
 800608a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	4413      	add	r3, r2
 800609c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800609e:	89fb      	ldrh	r3, [r7, #14]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80060b6:	2100      	movs	r1, #0
 80060b8:	6838      	ldr	r0, [r7, #0]
 80060ba:	f7ff ffc5 	bl	8006048 <u8g2_font_get_byte>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80060c6:	2101      	movs	r1, #1
 80060c8:	6838      	ldr	r0, [r7, #0]
 80060ca:	f7ff ffbd 	bl	8006048 <u8g2_font_get_byte>
 80060ce:	4603      	mov	r3, r0
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80060d6:	2102      	movs	r1, #2
 80060d8:	6838      	ldr	r0, [r7, #0]
 80060da:	f7ff ffb5 	bl	8006048 <u8g2_font_get_byte>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80060e6:	2103      	movs	r1, #3
 80060e8:	6838      	ldr	r0, [r7, #0]
 80060ea:	f7ff ffad 	bl	8006048 <u8g2_font_get_byte>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80060f6:	2104      	movs	r1, #4
 80060f8:	6838      	ldr	r0, [r7, #0]
 80060fa:	f7ff ffa5 	bl	8006048 <u8g2_font_get_byte>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8006106:	2105      	movs	r1, #5
 8006108:	6838      	ldr	r0, [r7, #0]
 800610a:	f7ff ff9d 	bl	8006048 <u8g2_font_get_byte>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006116:	2106      	movs	r1, #6
 8006118:	6838      	ldr	r0, [r7, #0]
 800611a:	f7ff ff95 	bl	8006048 <u8g2_font_get_byte>
 800611e:	4603      	mov	r3, r0
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006126:	2107      	movs	r1, #7
 8006128:	6838      	ldr	r0, [r7, #0]
 800612a:	f7ff ff8d 	bl	8006048 <u8g2_font_get_byte>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006136:	2108      	movs	r1, #8
 8006138:	6838      	ldr	r0, [r7, #0]
 800613a:	f7ff ff85 	bl	8006048 <u8g2_font_get_byte>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8006146:	2109      	movs	r1, #9
 8006148:	6838      	ldr	r0, [r7, #0]
 800614a:	f7ff ff7d 	bl	8006048 <u8g2_font_get_byte>
 800614e:	4603      	mov	r3, r0
 8006150:	b25a      	sxtb	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8006156:	210a      	movs	r1, #10
 8006158:	6838      	ldr	r0, [r7, #0]
 800615a:	f7ff ff75 	bl	8006048 <u8g2_font_get_byte>
 800615e:	4603      	mov	r3, r0
 8006160:	b25a      	sxtb	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8006166:	210b      	movs	r1, #11
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f7ff ff6d 	bl	8006048 <u8g2_font_get_byte>
 800616e:	4603      	mov	r3, r0
 8006170:	b25a      	sxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8006176:	210c      	movs	r1, #12
 8006178:	6838      	ldr	r0, [r7, #0]
 800617a:	f7ff ff65 	bl	8006048 <u8g2_font_get_byte>
 800617e:	4603      	mov	r3, r0
 8006180:	b25a      	sxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8006186:	210d      	movs	r1, #13
 8006188:	6838      	ldr	r0, [r7, #0]
 800618a:	f7ff ff5d 	bl	8006048 <u8g2_font_get_byte>
 800618e:	4603      	mov	r3, r0
 8006190:	b25a      	sxtb	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8006196:	210e      	movs	r1, #14
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f7ff ff55 	bl	8006048 <u8g2_font_get_byte>
 800619e:	4603      	mov	r3, r0
 80061a0:	b25a      	sxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80061a6:	210f      	movs	r1, #15
 80061a8:	6838      	ldr	r0, [r7, #0]
 80061aa:	f7ff ff4d 	bl	8006048 <u8g2_font_get_byte>
 80061ae:	4603      	mov	r3, r0
 80061b0:	b25a      	sxtb	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80061b6:	2110      	movs	r1, #16
 80061b8:	6838      	ldr	r0, [r7, #0]
 80061ba:	f7ff ff45 	bl	8006048 <u8g2_font_get_byte>
 80061be:	4603      	mov	r3, r0
 80061c0:	b25a      	sxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80061c6:	2111      	movs	r1, #17
 80061c8:	6838      	ldr	r0, [r7, #0]
 80061ca:	f7ff ff4f 	bl	800606c <u8g2_font_get_word>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80061d6:	2113      	movs	r1, #19
 80061d8:	6838      	ldr	r0, [r7, #0]
 80061da:	f7ff ff47 	bl	800606c <u8g2_font_get_word>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80061e6:	2115      	movs	r1, #21
 80061e8:	6838      	ldr	r0, [r7, #0]
 80061ea:	f7ff ff3f 	bl	800606c <u8g2_font_get_word>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	82da      	strh	r2, [r3, #22]
#endif
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	7b1b      	ldrb	r3, [r3, #12]
 800620e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8006218:	7bfa      	ldrb	r2, [r7, #15]
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	fa42 f303 	asr.w	r3, r2, r3
 8006220:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8006222:	7b7b      	ldrb	r3, [r7, #13]
 8006224:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8006226:	7bba      	ldrb	r2, [r7, #14]
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	4413      	add	r3, r2
 800622c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b07      	cmp	r3, #7
 8006232:	d91a      	bls.n	800626a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8006234:	2308      	movs	r3, #8
 8006236:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8006238:	7b3a      	ldrb	r2, [r7, #12]
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	7b3b      	ldrb	r3, [r7, #12]
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	b25a      	sxtb	r2, r3
 800625a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800625e:	4313      	orrs	r3, r2
 8006260:	b25b      	sxtb	r3, r3
 8006262:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	3b08      	subs	r3, #8
 8006268:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f04f 32ff 	mov.w	r2, #4294967295
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	b2da      	uxtb	r2, r3
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	4013      	ands	r3, r2
 800627e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7bba      	ldrb	r2, [r7, #14]
 8006284:	731a      	strb	r2, [r3, #12]
  return val;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ffaa 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 80062aa:	4603      	mov	r3, r0
 80062ac:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80062b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80062c4:	7bfa      	ldrb	r2, [r7, #15]
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	73fb      	strb	r3, [r7, #15]
  return v;
 80062ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80062da:	b490      	push	{r4, r7}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	4604      	mov	r4, r0
 80062e2:	4608      	mov	r0, r1
 80062e4:	4611      	mov	r1, r2
 80062e6:	461a      	mov	r2, r3
 80062e8:	4623      	mov	r3, r4
 80062ea:	80fb      	strh	r3, [r7, #6]
 80062ec:	4603      	mov	r3, r0
 80062ee:	717b      	strb	r3, [r7, #5]
 80062f0:	460b      	mov	r3, r1
 80062f2:	713b      	strb	r3, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d014      	beq.n	8006328 <u8g2_add_vector_y+0x4e>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	dc19      	bgt.n	8006336 <u8g2_add_vector_y+0x5c>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <u8g2_add_vector_y+0x32>
 8006306:	2b01      	cmp	r3, #1
 8006308:	d007      	beq.n	800631a <u8g2_add_vector_y+0x40>
 800630a:	e014      	b.n	8006336 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800630c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006310:	b29a      	uxth	r2, r3
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	4413      	add	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
      break;
 8006318:	e014      	b.n	8006344 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800631a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800631e:	b29a      	uxth	r2, r3
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	4413      	add	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
      break;
 8006326:	e00d      	b.n	8006344 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8006328:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800632c:	b29b      	uxth	r3, r3
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	80fb      	strh	r3, [r7, #6]
      break;
 8006334:	e006      	b.n	8006344 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8006336:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800633a:	b29b      	uxth	r3, r3
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	80fb      	strh	r3, [r7, #6]
      break;      
 8006342:	bf00      	nop
  }
  return dy;
 8006344:	88fb      	ldrh	r3, [r7, #6]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bc90      	pop	{r4, r7}
 800634e:	4770      	bx	lr

08006350 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006350:	b490      	push	{r4, r7}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	461a      	mov	r2, r3
 800635e:	4623      	mov	r3, r4
 8006360:	80fb      	strh	r3, [r7, #6]
 8006362:	4603      	mov	r3, r0
 8006364:	717b      	strb	r3, [r7, #5]
 8006366:	460b      	mov	r3, r1
 8006368:	713b      	strb	r3, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d014      	beq.n	800639e <u8g2_add_vector_x+0x4e>
 8006374:	2b02      	cmp	r3, #2
 8006376:	dc19      	bgt.n	80063ac <u8g2_add_vector_x+0x5c>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <u8g2_add_vector_x+0x32>
 800637c:	2b01      	cmp	r3, #1
 800637e:	d007      	beq.n	8006390 <u8g2_add_vector_x+0x40>
 8006380:	e014      	b.n	80063ac <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8006382:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006386:	b29a      	uxth	r2, r3
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	4413      	add	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
      break;
 800638e:	e014      	b.n	80063ba <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8006390:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006394:	b29b      	uxth	r3, r3
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	80fb      	strh	r3, [r7, #6]
      break;
 800639c:	e00d      	b.n	80063ba <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800639e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	80fb      	strh	r3, [r7, #6]
      break;
 80063aa:	e006      	b.n	80063ba <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80063ac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	4413      	add	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
      break;      
 80063b8:	bf00      	nop
  }
  return dx;
 80063ba:	88fb      	ldrh	r3, [r7, #6]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc90      	pop	{r4, r7}
 80063c4:	4770      	bx	lr

080063c6 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b088      	sub	sp, #32
 80063ca:	af02      	add	r7, sp, #8
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
 80063d2:	4613      	mov	r3, r2
 80063d4:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3360      	adds	r3, #96	; 0x60
 80063da:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80063e6:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063ee:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80063f6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	7d7b      	ldrb	r3, [r7, #21]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8006404:	7dfa      	ldrb	r2, [r7, #23]
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	429a      	cmp	r2, r3
 800640a:	d201      	bcs.n	8006410 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	889b      	ldrh	r3, [r3, #4]
 8006414:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	88db      	ldrh	r3, [r3, #6]
 800641a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800641c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006420:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	7c1b      	ldrb	r3, [r3, #16]
 8006428:	89b8      	ldrh	r0, [r7, #12]
 800642a:	f7ff ff91 	bl	8006350 <u8g2_add_vector_x>
 800642e:	4603      	mov	r3, r0
 8006430:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8006432:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006436:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	7c1b      	ldrb	r3, [r3, #16]
 800643e:	8978      	ldrh	r0, [r7, #10]
 8006440:	f7ff ff4b 	bl	80062da <u8g2_add_vector_y>
 8006444:	4603      	mov	r3, r0
 8006446:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8006448:	78bb      	ldrb	r3, [r7, #2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	7b9a      	ldrb	r2, [r3, #14]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8006458:	7dbb      	ldrb	r3, [r7, #22]
 800645a:	b298      	uxth	r0, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	7c1b      	ldrb	r3, [r3, #16]
 8006460:	897a      	ldrh	r2, [r7, #10]
 8006462:	89b9      	ldrh	r1, [r7, #12]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4603      	mov	r3, r0
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc38 	bl	8006cde <u8g2_DrawHVLine>
 800646e:	e013      	b.n	8006498 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	7b5b      	ldrb	r3, [r3, #13]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10f      	bne.n	8006498 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	7bda      	ldrb	r2, [r3, #15]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	b298      	uxth	r0, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	7c1b      	ldrb	r3, [r3, #16]
 800648a:	897a      	ldrh	r2, [r7, #10]
 800648c:	89b9      	ldrh	r1, [r7, #12]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fc23 	bl	8006cde <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006498:	7dfa      	ldrb	r2, [r7, #23]
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	429a      	cmp	r2, r3
 800649e:	d309      	bcc.n	80064b4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80064a0:	7dfa      	ldrb	r2, [r7, #23]
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	757b      	strb	r3, [r7, #21]
    ly++;
 80064ac:	7d3b      	ldrb	r3, [r7, #20]
 80064ae:	3301      	adds	r3, #1
 80064b0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80064b2:	e79d      	b.n	80063f0 <u8g2_font_decode_len+0x2a>
      break;
 80064b4:	bf00      	nop
  }
  lx += cnt;
 80064b6:	7d7a      	ldrb	r2, [r7, #21]
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	4413      	add	r3, r2
 80064bc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80064be:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80064c6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	725a      	strb	r2, [r3, #9]
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3360      	adds	r3, #96	; 0x60
 80064e4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80064f8:	4619      	mov	r1, r3
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fe7f 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 8006500:	4603      	mov	r3, r0
 8006502:	b25a      	sxtb	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fe74 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 8006516:	4603      	mov	r3, r0
 8006518:	b25a      	sxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	7b9b      	ldrb	r3, [r3, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	73da      	strb	r2, [r3, #15]
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3360      	adds	r3, #96	; 0x60
 8006552:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ffbd 	bl	80064d6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006562:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800656a:	4619      	mov	r1, r3
 800656c:	6978      	ldr	r0, [r7, #20]
 800656e:	f7ff fe91 	bl	8006294 <u8g2_font_decode_get_signed_bits>
 8006572:	4603      	mov	r3, r0
 8006574:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800657c:	4619      	mov	r1, r3
 800657e:	6978      	ldr	r0, [r7, #20]
 8006580:	f7ff fe88 	bl	8006294 <u8g2_font_decode_get_signed_bits>
 8006584:	4603      	mov	r3, r0
 8006586:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800658e:	4619      	mov	r1, r3
 8006590:	6978      	ldr	r0, [r7, #20]
 8006592:	f7ff fe7f 	bl	8006294 <u8g2_font_decode_get_signed_bits>
 8006596:	4603      	mov	r3, r0
 8006598:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f340 80d7 	ble.w	8006754 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	8898      	ldrh	r0, [r3, #4]
 80065aa:	7cfa      	ldrb	r2, [r7, #19]
 80065ac:	7c7b      	ldrb	r3, [r7, #17]
 80065ae:	4413      	add	r3, r2
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	425b      	negs	r3, r3
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	b25a      	sxtb	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	7c1b      	ldrb	r3, [r3, #16]
 80065bc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80065c0:	f7ff fec6 	bl	8006350 <u8g2_add_vector_x>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	88d8      	ldrh	r0, [r3, #6]
 80065d0:	7cfa      	ldrb	r2, [r7, #19]
 80065d2:	7c7b      	ldrb	r3, [r7, #17]
 80065d4:	4413      	add	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	425b      	negs	r3, r3
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	b25a      	sxtb	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	7c1b      	ldrb	r3, [r3, #16]
 80065e2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80065e6:	f7ff fe78 	bl	80062da <u8g2_add_vector_y>
 80065ea:	4603      	mov	r3, r0
 80065ec:	461a      	mov	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	889b      	ldrh	r3, [r3, #4]
 80065f6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	88db      	ldrh	r3, [r3, #6]
 80065fc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80065fe:	8bfb      	ldrh	r3, [r7, #30]
 8006600:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8006602:	8b7b      	ldrh	r3, [r7, #26]
 8006604:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	7c1b      	ldrb	r3, [r3, #16]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d85a      	bhi.n	80066c4 <u8g2_font_decode_glyph+0x180>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <u8g2_font_decode_glyph+0xd0>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006625 	.word	0x08006625
 8006618:	08006641 	.word	0x08006641
 800661c:	08006669 	.word	0x08006669
 8006620:	0800669d 	.word	0x0800669d
      {
	case 0:
	    x1 += decode->glyph_width;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800662a:	b29a      	uxth	r2, r3
 800662c:	8bbb      	ldrh	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8006632:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006636:	b29a      	uxth	r2, r3
 8006638:	8b3b      	ldrh	r3, [r7, #24]
 800663a:	4413      	add	r3, r2
 800663c:	833b      	strh	r3, [r7, #24]
	    break;
 800663e:	e041      	b.n	80066c4 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8006640:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006644:	b29b      	uxth	r3, r3
 8006646:	8bfa      	ldrh	r2, [r7, #30]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800664c:	8bfb      	ldrh	r3, [r7, #30]
 800664e:	3301      	adds	r3, #1
 8006650:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8006652:	8bbb      	ldrh	r3, [r7, #28]
 8006654:	3301      	adds	r3, #1
 8006656:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800665e:	b29a      	uxth	r2, r3
 8006660:	8b3b      	ldrh	r3, [r7, #24]
 8006662:	4413      	add	r3, r2
 8006664:	833b      	strh	r3, [r7, #24]
	    break;
 8006666:	e02d      	b.n	80066c4 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800666e:	b29b      	uxth	r3, r3
 8006670:	8bfa      	ldrh	r2, [r7, #30]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006676:	8bfb      	ldrh	r3, [r7, #30]
 8006678:	3301      	adds	r3, #1
 800667a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800667c:	8bbb      	ldrh	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8006682:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006686:	b29b      	uxth	r3, r3
 8006688:	8b7a      	ldrh	r2, [r7, #26]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800668e:	8b7b      	ldrh	r3, [r7, #26]
 8006690:	3301      	adds	r3, #1
 8006692:	837b      	strh	r3, [r7, #26]
	    y1++;
 8006694:	8b3b      	ldrh	r3, [r7, #24]
 8006696:	3301      	adds	r3, #1
 8006698:	833b      	strh	r3, [r7, #24]
	    break;	  
 800669a:	e013      	b.n	80066c4 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800669c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	8bbb      	ldrh	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	8b7a      	ldrh	r2, [r7, #26]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80066b6:	8b7b      	ldrh	r3, [r7, #26]
 80066b8:	3301      	adds	r3, #1
 80066ba:	837b      	strh	r3, [r7, #26]
	    y1++;
 80066bc:	8b3b      	ldrh	r3, [r7, #24]
 80066be:	3301      	adds	r3, #1
 80066c0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80066c2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80066c4:	8bb8      	ldrh	r0, [r7, #28]
 80066c6:	8b7a      	ldrh	r2, [r7, #26]
 80066c8:	8bf9      	ldrh	r1, [r7, #30]
 80066ca:	8b3b      	ldrh	r3, [r7, #24]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4603      	mov	r3, r0
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fbd9 	bl	8006e88 <u8g2_IsIntersection>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <u8g2_font_decode_glyph+0x19e>
	return d;
 80066dc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80066e0:	e03a      	b.n	8006758 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80066f4:	4619      	mov	r1, r3
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f7ff fd81 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8006706:	4619      	mov	r1, r3
 8006708:	6978      	ldr	r0, [r7, #20]
 800670a:	f7ff fd78 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 800670e:	4603      	mov	r3, r0
 8006710:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2200      	movs	r2, #0
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fe54 	bl	80063c6 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2201      	movs	r2, #1
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fe4e 	bl	80063c6 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800672a:	2101      	movs	r1, #1
 800672c:	6978      	ldr	r0, [r7, #20]
 800672e:	f7ff fd66 	bl	80061fe <u8g2_font_decode_get_unsigned_bits>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ec      	bne.n	8006712 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800673e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8006742:	429a      	cmp	r2, r3
 8006744:	dd00      	ble.n	8006748 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006746:	e7d2      	b.n	80066ee <u8g2_font_decode_glyph+0x1aa>
	break;
 8006748:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	7b9a      	ldrb	r2, [r3, #14]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8006754:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006770:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3317      	adds	r3, #23
 8006776:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006778:	887b      	ldrh	r3, [r7, #2]
 800677a:	2bff      	cmp	r3, #255	; 0xff
 800677c:	d82a      	bhi.n	80067d4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800677e:	887b      	ldrh	r3, [r7, #2]
 8006780:	2b60      	cmp	r3, #96	; 0x60
 8006782:	d907      	bls.n	8006794 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800678a:	461a      	mov	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	4413      	add	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e009      	b.n	80067a8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d906      	bls.n	80067a8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80067a0:	461a      	mov	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3301      	adds	r3, #1
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04e      	beq.n	8006850 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	887a      	ldrh	r2, [r7, #2]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d102      	bne.n	80067c4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	3302      	adds	r3, #2
 80067c2:	e049      	b.n	8006858 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3301      	adds	r3, #1
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80067d2:	e7e9      	b.n	80067a8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80067da:	461a      	mov	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4413      	add	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80067e6:	2100      	movs	r1, #0
 80067e8:	6938      	ldr	r0, [r7, #16]
 80067ea:	f7ff fc3f 	bl	800606c <u8g2_font_get_word>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80067f8:	2102      	movs	r1, #2
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f7ff fc36 	bl	800606c <u8g2_font_get_word>
 8006800:	4603      	mov	r3, r0
 8006802:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3304      	adds	r3, #4
 8006808:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800680a:	89fa      	ldrh	r2, [r7, #14]
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3e9      	bcc.n	80067e6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	3301      	adds	r3, #1
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	b29a      	uxth	r2, r3
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	4313      	orrs	r3, r2
 800682a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800682c:	89fb      	ldrh	r3, [r7, #14]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d010      	beq.n	8006854 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8006832:	89fa      	ldrh	r2, [r7, #14]
 8006834:	887b      	ldrh	r3, [r7, #2]
 8006836:	429a      	cmp	r2, r3
 8006838:	d102      	bne.n	8006840 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3303      	adds	r3, #3
 800683e:	e00b      	b.n	8006858 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3302      	adds	r3, #2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800684e:	e7e0      	b.n	8006812 <u8g2_font_get_glyph_data+0xb2>
	break;
 8006850:	bf00      	nop
 8006852:	e000      	b.n	8006856 <u8g2_font_get_glyph_data+0xf6>
	break;
 8006854:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	4603      	mov	r3, r0
 8006870:	817b      	strh	r3, [r7, #10]
 8006872:	460b      	mov	r3, r1
 8006874:	813b      	strh	r3, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	897a      	ldrh	r2, [r7, #10]
 8006882:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	893a      	ldrh	r2, [r7, #8]
 800688a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	4619      	mov	r1, r3
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff ff64 	bl	8006760 <u8g2_font_get_glyph_data>
 8006898:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80068a0:	6939      	ldr	r1, [r7, #16]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fe4e 	bl	8006544 <u8g2_font_decode_glyph>
 80068a8:	4603      	mov	r3, r0
 80068aa:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80068ac:	8afb      	ldrh	r3, [r7, #22]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d833      	bhi.n	8006964 <u8g2_DrawGlyph+0x8c>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <u8g2_DrawGlyph+0x2c>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006915 	.word	0x08006915
 8006908:	08006929 	.word	0x08006929
 800690c:	0800693d 	.word	0x0800693d
 8006910:	08006951 	.word	0x08006951
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	4798      	blx	r3
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	893b      	ldrh	r3, [r7, #8]
 8006922:	4413      	add	r3, r2
 8006924:	813b      	strh	r3, [r7, #8]
      break;
 8006926:	e01d      	b.n	8006964 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	461a      	mov	r2, r3
 8006934:	897b      	ldrh	r3, [r7, #10]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	817b      	strh	r3, [r7, #10]
      break;
 800693a:	e013      	b.n	8006964 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	4798      	blx	r3
 8006944:	4603      	mov	r3, r0
 8006946:	461a      	mov	r2, r3
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	813b      	strh	r3, [r7, #8]
      break;
 800694e:	e009      	b.n	8006964 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	897b      	ldrh	r3, [r7, #10]
 800695e:	4413      	add	r3, r2
 8006960:	817b      	strh	r3, [r7, #10]
      break;
 8006962:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	893a      	ldrh	r2, [r7, #8]
 8006968:	8979      	ldrh	r1, [r7, #10]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff ff78 	bl	8006860 <u8g2_font_draw_glyph>
 8006970:	4603      	mov	r3, r0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	817b      	strh	r3, [r7, #10]
 800698a:	4613      	mov	r3, r2
 800698c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fd7c 	bl	800748c <u8x8_utf8_init>
  sum = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	4611      	mov	r1, r2
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80069aa:	8abb      	ldrh	r3, [r7, #20]
 80069ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d038      	beq.n	8006a26 <u8g2_draw_string+0xaa>
      break;
    str++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3301      	adds	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80069ba:	8abb      	ldrh	r3, [r7, #20]
 80069bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d0e9      	beq.n	8006998 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80069c4:	8abb      	ldrh	r3, [r7, #20]
 80069c6:	893a      	ldrh	r2, [r7, #8]
 80069c8:	8979      	ldrh	r1, [r7, #10]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7ff ff84 	bl	80068d8 <u8g2_DrawGlyph>
 80069d0:	4603      	mov	r3, r0
 80069d2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d81e      	bhi.n	8006a1c <u8g2_draw_string+0xa0>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <u8g2_draw_string+0x68>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	080069ff 	.word	0x080069ff
 80069ec:	08006a09 	.word	0x08006a09
 80069f0:	08006a13 	.word	0x08006a13
      {
	case 0:
	  x += delta;
 80069f4:	897a      	ldrh	r2, [r7, #10]
 80069f6:	8a7b      	ldrh	r3, [r7, #18]
 80069f8:	4413      	add	r3, r2
 80069fa:	817b      	strh	r3, [r7, #10]
	  break;
 80069fc:	e00e      	b.n	8006a1c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80069fe:	893a      	ldrh	r2, [r7, #8]
 8006a00:	8a7b      	ldrh	r3, [r7, #18]
 8006a02:	4413      	add	r3, r2
 8006a04:	813b      	strh	r3, [r7, #8]
	  break;
 8006a06:	e009      	b.n	8006a1c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8006a08:	897a      	ldrh	r2, [r7, #10]
 8006a0a:	8a7b      	ldrh	r3, [r7, #18]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	817b      	strh	r3, [r7, #10]
	  break;
 8006a10:	e004      	b.n	8006a1c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8006a12:	893a      	ldrh	r2, [r7, #8]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	813b      	strh	r3, [r7, #8]
	  break;
 8006a1a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8006a1c:	8afa      	ldrh	r2, [r7, #22]
 8006a1e:	8a7b      	ldrh	r3, [r7, #18]
 8006a20:	4413      	add	r3, r2
 8006a22:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006a24:	e7b8      	b.n	8006998 <u8g2_draw_string+0x1c>
      break;
 8006a26:	bf00      	nop
    }
  }
  return sum;
 8006a28:	8afb      	ldrh	r3, [r7, #22]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop

08006a34 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	4613      	mov	r3, r2
 8006a44:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <u8g2_DrawStr+0x30>)
 8006a4a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006a4c:	893a      	ldrh	r2, [r7, #8]
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff ff92 	bl	800697c <u8g2_draw_string>
 8006a58:	4603      	mov	r3, r0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	080074a9 	.word	0x080074a9

08006a68 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	4613      	mov	r3, r2
 8006a78:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a06      	ldr	r2, [pc, #24]	; (8006a98 <u8g2_DrawUTF8+0x30>)
 8006a7e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006a80:	893a      	ldrh	r2, [r7, #8]
 8006a82:	8979      	ldrh	r1, [r7, #10]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ff78 	bl	800697c <u8g2_draw_string>
 8006a8c:	4603      	mov	r3, r0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	080074d7 	.word	0x080074d7

08006a9c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05d      	beq.n	8006b68 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d04d      	beq.n	8006b6a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d11c      	bne.n	8006b12 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	da05      	bge.n	8006af4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8006b00:	429a      	cmp	r2, r3
 8006b02:	dd32      	ble.n	8006b6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8006b10:	e02b      	b.n	8006b6a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8006b20:	4619      	mov	r1, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006b28:	440b      	add	r3, r1
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	da0d      	bge.n	8006b4a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	b25a      	sxtb	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006b56:	429a      	cmp	r2, r3
 8006b58:	dd07      	ble.n	8006b6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8006b66:	e000      	b.n	8006b6a <u8g2_UpdateRefHeight+0xce>
    return;
 8006b68:	bf00      	nop
  }  
}
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  return 0;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <u8g2_SetFontPosBaseline+0x1c>)
 8006b98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	08006b75 	.word	0x08006b75

08006bac <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d00b      	beq.n	8006bd8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3374      	adds	r3, #116	; 0x74
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fa6d 	bl	80060ac <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff62 	bl	8006a9c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	78fa      	ldrb	r2, [r7, #3]
 8006bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	460b      	mov	r3, r1
 8006c10:	80fb      	strh	r3, [r7, #6]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8006c1c:	8afb      	ldrh	r3, [r7, #22]
 8006c1e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	8abb      	ldrh	r3, [r7, #20]
 8006c26:	4413      	add	r3, r2
 8006c28:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8006c2a:	8afa      	ldrh	r2, [r7, #22]
 8006c2c:	8abb      	ldrh	r3, [r7, #20]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d90b      	bls.n	8006c4a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8006c32:	8afa      	ldrh	r2, [r7, #22]
 8006c34:	88bb      	ldrh	r3, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d205      	bcs.n	8006c46 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8006c3a:	88bb      	ldrh	r3, [r7, #4]
 8006c3c:	82bb      	strh	r3, [r7, #20]
      b--;
 8006c3e:	8abb      	ldrh	r3, [r7, #20]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	82bb      	strh	r3, [r7, #20]
 8006c44:	e001      	b.n	8006c4a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8006c4a:	8afa      	ldrh	r2, [r7, #22]
 8006c4c:	88bb      	ldrh	r3, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d301      	bcc.n	8006c56 <u8g2_clip_intersection2+0x56>
    return 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e01c      	b.n	8006c90 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8006c56:	8aba      	ldrh	r2, [r7, #20]
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d801      	bhi.n	8006c62 <u8g2_clip_intersection2+0x62>
    return 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e016      	b.n	8006c90 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8006c62:	8afa      	ldrh	r2, [r7, #22]
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d201      	bcs.n	8006c6e <u8g2_clip_intersection2+0x6e>
    a = c;
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8006c6e:	8aba      	ldrh	r2, [r7, #20]
 8006c70:	88bb      	ldrh	r3, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d901      	bls.n	8006c7a <u8g2_clip_intersection2+0x7a>
    b = d;
 8006c76:	88bb      	ldrh	r3, [r7, #4]
 8006c78:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8afa      	ldrh	r2, [r7, #22]
 8006c7e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8006c80:	8aba      	ldrh	r2, [r7, #20]
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	8aba      	ldrh	r2, [r7, #20]
 8006c8c:	801a      	strh	r2, [r3, #0]
  return 1;
 8006c8e:	2301      	movs	r3, #1
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	817b      	strh	r3, [r7, #10]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	813b      	strh	r3, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	893a      	ldrh	r2, [r7, #8]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006cc4:	88f8      	ldrh	r0, [r7, #6]
 8006cc6:	893a      	ldrh	r2, [r7, #8]
 8006cc8:	8979      	ldrh	r1, [r7, #10]
 8006cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	47a0      	blx	r4
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}

08006cde <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006cde:	b590      	push	{r4, r7, lr}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	4611      	mov	r1, r2
 8006cea:	461a      	mov	r2, r3
 8006cec:	4603      	mov	r3, r0
 8006cee:	817b      	strh	r3, [r7, #10]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	813b      	strh	r3, [r7, #8]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d075      	beq.n	8006dee <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d072      	beq.n	8006dee <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d91a      	bls.n	8006d44 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8006d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d109      	bne.n	8006d2a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8006d16:	897a      	ldrh	r2, [r7, #10]
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	817b      	strh	r3, [r7, #10]
	  x++;
 8006d20:	897b      	ldrh	r3, [r7, #10]
 8006d22:	3301      	adds	r3, #1
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	817b      	strh	r3, [r7, #10]
 8006d28:	e00c      	b.n	8006d44 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8006d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d108      	bne.n	8006d44 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8006d32:	893a      	ldrh	r2, [r7, #8]
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	813b      	strh	r3, [r7, #8]
	  y++;
 8006d3c:	893b      	ldrh	r3, [r7, #8]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8006d44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8006d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11a      	bne.n	8006d8e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8006d5e:	893b      	ldrh	r3, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d83b      	bhi.n	8006ddc <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8006d6a:	893b      	ldrh	r3, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d937      	bls.n	8006de0 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006d7c:	1db9      	adds	r1, r7, #6
 8006d7e:	f107 000a 	add.w	r0, r7, #10
 8006d82:	f7ff ff3d 	bl	8006c00 <u8g2_clip_intersection2>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11a      	bne.n	8006dc2 <u8g2_DrawHVLine+0xe4>
	  return;
 8006d8c:	e02f      	b.n	8006dee <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006d94:	897b      	ldrh	r3, [r7, #10]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d824      	bhi.n	8006de4 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006da0:	897b      	ldrh	r3, [r7, #10]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d920      	bls.n	8006de8 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8006db2:	1db9      	adds	r1, r7, #6
 8006db4:	f107 0008 	add.w	r0, r7, #8
 8006db8:	f7ff ff22 	bl	8006c00 <u8g2_clip_intersection2>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	689c      	ldr	r4, [r3, #8]
 8006dc8:	8979      	ldrh	r1, [r7, #10]
 8006dca:	893a      	ldrh	r2, [r7, #8]
 8006dcc:	88f8      	ldrh	r0, [r7, #6]
 8006dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	47a0      	blx	r4
 8006dda:	e008      	b.n	8006dee <u8g2_DrawHVLine+0x110>
	  return;
 8006ddc:	bf00      	nop
 8006dde:	e006      	b.n	8006dee <u8g2_DrawHVLine+0x110>
	  return;
 8006de0:	bf00      	nop
 8006de2:	e004      	b.n	8006dee <u8g2_DrawHVLine+0x110>
	  return;
 8006de4:	bf00      	nop
 8006de6:	e002      	b.n	8006dee <u8g2_DrawHVLine+0x110>
	  return;
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <u8g2_DrawHVLine+0x110>
	  return;
 8006dec:	bf00      	nop
    }
}
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd90      	pop	{r4, r7, pc}

08006df4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d903      	bls.n	8006e16 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8006e22:	b490      	push	{r4, r7}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	80fb      	strh	r3, [r7, #6]
 8006e34:	4603      	mov	r3, r0
 8006e36:	80bb      	strh	r3, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	807b      	strh	r3, [r7, #2]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8006e40:	887a      	ldrh	r2, [r7, #2]
 8006e42:	88bb      	ldrh	r3, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d20d      	bcs.n	8006e64 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006e48:	883a      	ldrh	r2, [r7, #0]
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d901      	bls.n	8006e54 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e014      	b.n	8006e7e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8006e54:	887a      	ldrh	r2, [r7, #2]
 8006e56:	883b      	ldrh	r3, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d901      	bls.n	8006e60 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e00e      	b.n	8006e7e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e00c      	b.n	8006e7e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8006e64:	883a      	ldrh	r2, [r7, #0]
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d907      	bls.n	8006e7c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8006e6c:	887a      	ldrh	r2, [r7, #2]
 8006e6e:	883b      	ldrh	r3, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d901      	bls.n	8006e78 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e002      	b.n	8006e7e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8006e7c:	2300      	movs	r3, #0
    }
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc90      	pop	{r4, r7}
 8006e86:	4770      	bx	lr

08006e88 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	461a      	mov	r2, r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	817b      	strh	r3, [r7, #10]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	813b      	strh	r3, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8006eae:	8b3b      	ldrh	r3, [r7, #24]
 8006eb0:	893a      	ldrh	r2, [r7, #8]
 8006eb2:	f7ff ffb6 	bl	8006e22 <u8g2_is_intersection_decision_tree>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <u8g2_IsIntersection+0x38>
    return 0; 
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e00a      	b.n	8006ed6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	897a      	ldrh	r2, [r7, #10]
 8006ed0:	f7ff ffa7 	bl	8006e22 <u8g2_is_intersection_decision_tree>
 8006ed4:	4603      	mov	r3, r0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b089      	sub	sp, #36	; 0x24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	461a      	mov	r2, r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	817b      	strh	r3, [r7, #10]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	813b      	strh	r3, [r7, #8]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006ef8:	893b      	ldrh	r3, [r7, #8]
 8006efa:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006efc:	7efb      	ldrb	r3, [r7, #27]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8006f04:	2301      	movs	r3, #1
 8006f06:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8006f08:	7e3a      	ldrb	r2, [r7, #24]
 8006f0a:	7efb      	ldrb	r3, [r7, #27]
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d801      	bhi.n	8006f28 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8006f24:	7e3b      	ldrb	r3, [r7, #24]
 8006f26:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d001      	beq.n	8006f36 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8006f32:	7e3b      	ldrb	r3, [r7, #24]
 8006f34:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8006f3a:	8afb      	ldrh	r3, [r7, #22]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	7c1b      	ldrb	r3, [r3, #16]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8afa      	ldrh	r2, [r7, #22]
 8006f4c:	fb12 f303 	smulbb	r3, r2, r3
 8006f50:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8006f60:	897b      	ldrh	r3, [r7, #10]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8006f68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d117      	bne.n	8006fa0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	7ebb      	ldrb	r3, [r7, #26]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	7e7b      	ldrb	r3, [r7, #25]
 8006f84:	4053      	eors	r3, r2
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	701a      	strb	r2, [r3, #0]
	ptr++;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
	len--;
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e8      	bne.n	8006f70 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8006f9e:	e038      	b.n	8007012 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	7ebb      	ldrb	r3, [r7, #26]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	7e7b      	ldrb	r3, [r7, #25]
 8006fb4:	4053      	eors	r3, r2
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8006fbc:	7efb      	ldrb	r3, [r7, #27]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8006fc2:	7efb      	ldrb	r3, [r7, #27]
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	76fb      	strb	r3, [r7, #27]
      len--;
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8006fd0:	7efb      	ldrb	r3, [r7, #27]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d114      	bne.n	8007000 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006fda:	461a      	mov	r2, r3
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d801      	bhi.n	8006ff0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8006fec:	2301      	movs	r3, #1
 8006fee:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d008      	beq.n	800700c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	767b      	strb	r3, [r7, #25]
 8006ffe:	e005      	b.n	800700c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8007000:	7ebb      	ldrb	r3, [r7, #26]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8007006:	7e7b      	ldrb	r3, [r7, #25]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800700c:	88fb      	ldrh	r3, [r7, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1c6      	bne.n	8006fa0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8007012:	bf00      	nop
 8007014:	3724      	adds	r7, #36	; 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	79fa      	ldrb	r2, [r7, #7]
 8007082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff ffa9 	bl	800701e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fd5d 	bl	8006b8c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070f6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80070f8:	89fb      	ldrh	r3, [r7, #14]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	89fa      	ldrh	r2, [r7, #14]
 8007102:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	7c1b      	ldrb	r3, [r3, #16]
 8007108:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	89fa      	ldrh	r2, [r7, #14]
 8007114:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800711c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	89fa      	ldrh	r2, [r7, #14]
 8007128:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007130:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800713a:	4413      	add	r3, r2
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	7c52      	ldrb	r2, [r2, #17]
 8007140:	4293      	cmp	r3, r2
 8007142:	dd08      	ble.n	8007156 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	7c5b      	ldrb	r3, [r3, #17]
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007150:	b29b      	uxth	r3, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8007156:	89fb      	ldrh	r3, [r7, #14]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8007178:	89fb      	ldrh	r3, [r7, #14]
 800717a:	4413      	add	r3, r2
 800717c:	b29a      	uxth	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	8a9a      	ldrh	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	8ada      	ldrh	r2, [r3, #22]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	4603      	mov	r3, r0
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fe5d 	bl	8006e88 <u8g2_IsIntersection>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80071dc:	e03b      	b.n	8007256 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d205      	bcs.n	8007202 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800720e:	429a      	cmp	r2, r3
 8007210:	d905      	bls.n	800721e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800722a:	429a      	cmp	r2, r3
 800722c:	d205      	bcs.n	800723a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007246:	429a      	cmp	r2, r3
 8007248:	d905      	bls.n	8007256 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff ff3b 	bl	80070e2 <u8g2_update_dimension_common>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ff7b 	bl	80071a4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b086      	sub	sp, #24
 80072ba:	af02      	add	r7, sp, #8
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	461a      	mov	r2, r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	817b      	strh	r3, [r7, #10]
 80072c8:	460b      	mov	r3, r1
 80072ca:	813b      	strh	r3, [r7, #8]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80072d0:	88f8      	ldrh	r0, [r7, #6]
 80072d2:	893a      	ldrh	r2, [r7, #8]
 80072d4:	8979      	ldrh	r1, [r7, #10]
 80072d6:	7e3b      	ldrb	r3, [r7, #24]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4603      	mov	r3, r0
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fcdd 	bl	8006c9c <u8g2_draw_hv_line_2dir>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <u8g2stm32_init>:
#include "main.h"
#include "u8g2.h"
#include "u8x8.h"
#include "u8g2_stm32.h"
void u8g2stm32_init(u8g2_t *u8g2)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0,
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <u8g2stm32_init+0x40>)
 80072f6:	4a0e      	ldr	r2, [pc, #56]	; (8007330 <u8g2stm32_init+0x44>)
 80072f8:	490e      	ldr	r1, [pc, #56]	; (8007334 <u8g2stm32_init+0x48>)
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fe fe7c 	bl	8005ff8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			u8x8_byte_stm32hal_hw_i2c, stm32_gpio_and_delay_cb);
	u8g2_SetI2CAddress(u8g2, I2C_ADDRESS << 1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2278      	movs	r2, #120	; 0x78
 8007304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	u8g2_InitDisplay(u8g2);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc53 	bl	8007bb4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(u8g2,0);
 800730e:	2100      	movs	r1, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc5e 	bl	8007bd2 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(u8g2);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fe fe49 	bl	8005fae <u8g2_ClearDisplay>
	u8g2_SetDrawColor(u8g2, 1);
 800731c:	2101      	movs	r1, #1
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fd68 	bl	8006df4 <u8g2_SetDrawColor>
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08007419 	.word	0x08007419
 8007330:	08007339 	.word	0x08007339
 8007334:	0800cd94 	.word	0x0800cd94

08007338 <u8x8_byte_stm32hal_hw_i2c>:
uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8,
		uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	607b      	str	r3, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	72fb      	strb	r3, [r7, #11]
 8007346:	4613      	mov	r3, r2
 8007348:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;
	switch(msg)
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	3b14      	subs	r3, #20
 800734e:	2b0c      	cmp	r3, #12
 8007350:	d854      	bhi.n	80073fc <u8x8_byte_stm32hal_hw_i2c+0xc4>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <u8x8_byte_stm32hal_hw_i2c+0x20>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007401 	.word	0x08007401
 800735c:	080073fd 	.word	0x080073fd
 8007360:	080073fd 	.word	0x080073fd
 8007364:	0800738d 	.word	0x0800738d
 8007368:	080073bd 	.word	0x080073bd
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073fd 	.word	0x080073fd
 8007374:	080073fd 	.word	0x080073fd
 8007378:	080073fd 	.word	0x080073fd
 800737c:	080073fd 	.word	0x080073fd
 8007380:	080073fd 	.word	0x080073fd
 8007384:	080073fd 	.word	0x080073fd
 8007388:	08007401 	.word	0x08007401
	{
	case U8X8_MSG_BYTE_SEND:
	{
		data = (uint8_t *)arg_ptr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	617b      	str	r3, [r7, #20]
		while(arg_int > 0)
 8007390:	e010      	b.n	80073b4 <u8x8_byte_stm32hal_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8007392:	4b1e      	ldr	r3, [pc, #120]	; (800740c <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	b2d1      	uxtb	r1, r2
 800739a:	4a1c      	ldr	r2, [pc, #112]	; (800740c <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 800739c:	7011      	strb	r1, [r2, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 80073a6:	5499      	strb	r1, [r3, r2]
			data++;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
			arg_int--;
 80073ae:	7abb      	ldrb	r3, [r7, #10]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	72bb      	strb	r3, [r7, #10]
		while(arg_int > 0)
 80073b4:	7abb      	ldrb	r3, [r7, #10]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1eb      	bne.n	8007392 <u8x8_byte_stm32hal_hw_i2c+0x5a>
		}
	}
		break;
 80073ba:	e022      	b.n	8007402 <u8x8_byte_stm32hal_hw_i2c+0xca>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
	{
		buf_idx = 0;
 80073bc:	4b13      	ldr	r3, [pc, #76]	; (800740c <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
	}
		break;
 80073c2:	e01e      	b.n	8007402 <u8x8_byte_stm32hal_hw_i2c+0xca>
	case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 80073c4:	233c      	movs	r3, #60	; 0x3c
 80073c6:	74fb      	strb	r3, [r7, #19]
		volatile uint16_t i;
		HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)iaddress <<1,
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	b299      	uxth	r1, r3
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4a0e      	ldr	r2, [pc, #56]	; (8007410 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 80073d8:	480e      	ldr	r0, [pc, #56]	; (8007414 <u8x8_byte_stm32hal_hw_i2c+0xdc>)
 80073da:	f7fb f9fb 	bl	80027d4 <HAL_I2C_Master_Transmit_DMA>
				&buffer[0], buf_idx);
		for(i=1 ; i <= 5000 ; i++);  //5000은 STM32F4 84MHz 기준
 80073de:	2301      	movs	r3, #1
 80073e0:	823b      	strh	r3, [r7, #16]
 80073e2:	e004      	b.n	80073ee <u8x8_byte_stm32hal_hw_i2c+0xb6>
 80073e4:	8a3b      	ldrh	r3, [r7, #16]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3301      	adds	r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	823b      	strh	r3, [r7, #16]
 80073ee:	8a3b      	ldrh	r3, [r7, #16]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d9f4      	bls.n	80073e4 <u8x8_byte_stm32hal_hw_i2c+0xac>
	}
		break;
 80073fa:	e002      	b.n	8007402 <u8x8_byte_stm32hal_hw_i2c+0xca>
	default:
		return 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e001      	b.n	8007404 <u8x8_byte_stm32hal_hw_i2c+0xcc>
		break;
 8007400:	bf00      	nop
	}
	return 1;
 8007402:	2301      	movs	r3, #1
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000dbc 	.word	0x20000dbc
 8007410:	20000dc0 	.word	0x20000dc0
 8007414:	200002b4 	.word	0x200002b4

08007418 <stm32_gpio_and_delay_cb>:
uint8_t stm32_gpio_and_delay_cb(u8x8_t *u8x8,
		uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	72fb      	strb	r3, [r7, #11]
 8007426:	4613      	mov	r3, r2
 8007428:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	3b28      	subs	r3, #40	; 0x28
 800742e:	2b04      	cmp	r3, #4
 8007430:	d821      	bhi.n	8007476 <stm32_gpio_and_delay_cb+0x5e>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <stm32_gpio_and_delay_cb+0x20>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007481 	.word	0x08007481
 800743c:	0800746d 	.word	0x0800746d
 8007440:	08007481 	.word	0x08007481
 8007444:	08007481 	.word	0x08007481
 8007448:	0800744d 	.word	0x0800744d
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		break;
	case U8X8_MSG_DELAY_NANO:
	{
		volatile uint32_t i;
		for(i = 1 ; i <= arg_int *10 ; i++ );
 800744c:	2301      	movs	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e002      	b.n	8007458 <stm32_gpio_and_delay_cb+0x40>
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3301      	adds	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	7aba      	ldrb	r2, [r7, #10]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	461a      	mov	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	429a      	cmp	r2, r3
 8007468:	d2f3      	bcs.n	8007452 <stm32_gpio_and_delay_cb+0x3a>
	}
		break;
 800746a:	e00a      	b.n	8007482 <stm32_gpio_and_delay_cb+0x6a>
	case U8X8_MSG_DELAY_10MICRO:   /* not used*/
		break;
	case U8X8_MSG_DELAY_100NANO:   /* not used*/
		break;
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 800746c:	7abb      	ldrb	r3, [r7, #10]
 800746e:	4618      	mov	r0, r3
 8007470:	f7f9 fe9c 	bl	80011ac <HAL_Delay>
		break;
 8007474:	e005      	b.n	8007482 <stm32_gpio_and_delay_cb+0x6a>
	default:
		u8x8_SetGPIOResult(u8x8,1);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 800747e:	e000      	b.n	8007482 <stm32_gpio_and_delay_cb+0x6a>
		break;
 8007480:	bf00      	nop
	}
	return 1;
 8007482:	2301      	movs	r3, #1
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <u8x8_ascii_next+0x18>
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b0a      	cmp	r3, #10
 80074be:	d102      	bne.n	80074c6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80074c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074c4:	e001      	b.n	80074ca <u8x8_ascii_next+0x22>
  return b;
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	b29b      	uxth	r3, r3
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <u8x8_utf8_next+0x18>
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d102      	bne.n	80074f4 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80074ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f2:	e06e      	b.n	80075d2 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d145      	bne.n	800758a <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	2bfb      	cmp	r3, #251	; 0xfb
 8007502:	d908      	bls.n	8007516 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2205      	movs	r2, #5
 8007508:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	70fb      	strb	r3, [r7, #3]
 8007514:	e032      	b.n	800757c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	2bf7      	cmp	r3, #247	; 0xf7
 800751a:	d908      	bls.n	800752e <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2204      	movs	r2, #4
 8007520:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	70fb      	strb	r3, [r7, #3]
 800752c:	e026      	b.n	800757c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2bef      	cmp	r3, #239	; 0xef
 8007532:	d908      	bls.n	8007546 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2203      	movs	r2, #3
 8007538:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	70fb      	strb	r3, [r7, #3]
 8007544:	e01a      	b.n	800757c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	2bdf      	cmp	r3, #223	; 0xdf
 800754a:	d908      	bls.n	800755e <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	70fb      	strb	r3, [r7, #3]
 800755c:	e00e      	b.n	800757c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	2bbf      	cmp	r3, #191	; 0xbf
 8007562:	d908      	bls.n	8007576 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	70fb      	strb	r3, [r7, #3]
 8007574:	e002      	b.n	800757c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	b29b      	uxth	r3, r3
 800757a:	e02a      	b.n	80075d2 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8007584:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007588:	e023      	b.n	80075d2 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007590:	3b01      	subs	r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8c1b      	ldrh	r3, [r3, #32]
 800759e:	019b      	lsls	r3, r3, #6
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ac:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8c1a      	ldrh	r2, [r3, #32]
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80075c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80075cc:	e001      	b.n	80075d2 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8c1b      	ldrh	r3, [r3, #32]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80075de:	b590      	push	{r4, r7, lr}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	460b      	mov	r3, r1
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691c      	ldr	r4, [r3, #16]
 80075f0:	7afa      	ldrb	r2, [r7, #11]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2117      	movs	r1, #23
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	47a0      	blx	r4
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	bd90      	pop	{r4, r7, pc}

08007604 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8007610:	1cfb      	adds	r3, r7, #3
 8007612:	461a      	mov	r2, r3
 8007614:	2101      	movs	r1, #1
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff ffe1 	bl	80075de <u8x8_byte_SendBytes>
 800761c:	4603      	mov	r3, r0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8007626:	b590      	push	{r4, r7, lr}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691c      	ldr	r4, [r3, #16]
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	2118      	movs	r1, #24
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	47a0      	blx	r4
 800763c:	4603      	mov	r3, r0
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	bd90      	pop	{r4, r7, pc}

08007646 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8007646:	b590      	push	{r4, r7, lr}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691c      	ldr	r4, [r3, #16]
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	2119      	movs	r1, #25
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	47a0      	blx	r4
 800765c:	4603      	mov	r3, r0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bd90      	pop	{r4, r7, pc}

08007666 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8007666:	b590      	push	{r4, r7, lr}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68dc      	ldr	r4, [r3, #12]
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	2300      	movs	r3, #0
 800767a:	2115      	movs	r1, #21
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	47a0      	blx	r4
 8007680:	4603      	mov	r3, r0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bd90      	pop	{r4, r7, pc}

0800768a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800768a:	b590      	push	{r4, r7, lr}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68dc      	ldr	r4, [r3, #12]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	2300      	movs	r3, #0
 800769e:	2116      	movs	r1, #22
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	47a0      	blx	r4
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd90      	pop	{r4, r7, pc}

080076ae <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80076ae:	b590      	push	{r4, r7, lr}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	460b      	mov	r3, r1
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68dc      	ldr	r4, [r3, #12]
 80076c0:	7afa      	ldrb	r2, [r7, #11]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2117      	movs	r1, #23
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	47a0      	blx	r4
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68dc      	ldr	r4, [r3, #12]
 80076e0:	2300      	movs	r3, #0
 80076e2:	2200      	movs	r2, #0
 80076e4:	2118      	movs	r1, #24
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	47a0      	blx	r4
 80076ea:	4603      	mov	r3, r0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd90      	pop	{r4, r7, pc}

080076f4 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68dc      	ldr	r4, [r3, #12]
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2119      	movs	r1, #25
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	47a0      	blx	r4
 800770a:	4603      	mov	r3, r0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	73fb      	strb	r3, [r7, #15]
    data++;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	3301      	adds	r3, #1
 8007728:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2bfe      	cmp	r3, #254	; 0xfe
 800772e:	d031      	beq.n	8007794 <u8x8_cad_SendSequence+0x80>
 8007730:	2bfe      	cmp	r3, #254	; 0xfe
 8007732:	dc3d      	bgt.n	80077b0 <u8x8_cad_SendSequence+0x9c>
 8007734:	2b19      	cmp	r3, #25
 8007736:	dc3b      	bgt.n	80077b0 <u8x8_cad_SendSequence+0x9c>
 8007738:	2b18      	cmp	r3, #24
 800773a:	da23      	bge.n	8007784 <u8x8_cad_SendSequence+0x70>
 800773c:	2b16      	cmp	r3, #22
 800773e:	dc02      	bgt.n	8007746 <u8x8_cad_SendSequence+0x32>
 8007740:	2b15      	cmp	r3, #21
 8007742:	da03      	bge.n	800774c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8007744:	e034      	b.n	80077b0 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8007746:	2b17      	cmp	r3, #23
 8007748:	d00e      	beq.n	8007768 <u8x8_cad_SendSequence+0x54>
	return;
 800774a:	e031      	b.n	80077b0 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68dc      	ldr	r4, [r3, #12]
 8007756:	7bba      	ldrb	r2, [r7, #14]
 8007758:	7bf9      	ldrb	r1, [r7, #15]
 800775a:	2300      	movs	r3, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	47a0      	blx	r4
	  data++;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	603b      	str	r3, [r7, #0]
	  break;
 8007766:	e022      	b.n	80077ae <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800776e:	f107 030e 	add.w	r3, r7, #14
 8007772:	461a      	mov	r2, r3
 8007774:	2101      	movs	r1, #1
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff ff99 	bl	80076ae <u8x8_cad_SendData>
	  data++;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	3301      	adds	r3, #1
 8007780:	603b      	str	r3, [r7, #0]
	  break;
 8007782:	e014      	b.n	80077ae <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68dc      	ldr	r4, [r3, #12]
 8007788:	7bf9      	ldrb	r1, [r7, #15]
 800778a:	2300      	movs	r3, #0
 800778c:	2200      	movs	r2, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	47a0      	blx	r4
	  break;
 8007792:	e00c      	b.n	80077ae <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	461a      	mov	r2, r3
 800779e:	2129      	movs	r1, #41	; 0x29
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa36 	bl	8007c12 <u8x8_gpio_call>
	  data++;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	603b      	str	r3, [r7, #0]
	  break;
 80077ac:	bf00      	nop
    cmd = *data;
 80077ae:	e7b6      	b.n	800771e <u8x8_cad_SendSequence+0xa>
	return;
 80077b0:	bf00      	nop
    }
  }
}
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd90      	pop	{r4, r7, pc}

080077b8 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	460b      	mov	r3, r1
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff ff2d 	bl	8007626 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80077cc:	2140      	movs	r1, #64	; 0x40
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff ff18 	bl	8007604 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691c      	ldr	r4, [r3, #16]
 80077d8:	7afa      	ldrb	r2, [r7, #11]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2117      	movs	r1, #23
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f7ff ff2f 	bl	8007646 <u8x8_byte_EndTransfer>
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd90      	pop	{r4, r7, pc}

080077f0 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	72fb      	strb	r3, [r7, #11]
 80077fe:	4613      	mov	r3, r2
 8007800:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3b14      	subs	r3, #20
 8007806:	2b05      	cmp	r3, #5
 8007808:	d86e      	bhi.n	80078e8 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	080078a7 	.word	0x080078a7
 8007814:	08007829 	.word	0x08007829
 8007818:	08007857 	.word	0x08007857
 800781c:	08007863 	.word	0x08007863
 8007820:	080078cb 	.word	0x080078cb
 8007824:	080078d3 	.word	0x080078d3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8007828:	4b33      	ldr	r3, [pc, #204]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff ff08 	bl	8007646 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fef5 	bl	8007626 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff fee0 	bl	8007604 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007844:	7abb      	ldrb	r3, [r7, #10]
 8007846:	4619      	mov	r1, r3
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fedb 	bl	8007604 <u8x8_byte_SendByte>
      in_transfer = 1;
 800784e:	4b2a      	ldr	r3, [pc, #168]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007850:	2201      	movs	r2, #1
 8007852:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8007854:	e04a      	b.n	80078ec <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8007856:	7abb      	ldrb	r3, [r7, #10]
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fed2 	bl	8007604 <u8x8_byte_SendByte>
      break;      
 8007860:	e044      	b.n	80078ec <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8007862:	4b25      	ldr	r3, [pc, #148]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff feeb 	bl	8007646 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8007874:	e00a      	b.n	800788c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	2118      	movs	r1, #24
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff ff9c 	bl	80077b8 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8007880:	7abb      	ldrb	r3, [r7, #10]
 8007882:	3b18      	subs	r3, #24
 8007884:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3318      	adds	r3, #24
 800788a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800788c:	7abb      	ldrb	r3, [r7, #10]
 800788e:	2b18      	cmp	r3, #24
 8007890:	d8f1      	bhi.n	8007876 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8007892:	7abb      	ldrb	r3, [r7, #10]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7ff ff8d 	bl	80077b8 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
      break;
 80078a4:	e022      	b.n	80078ec <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078ac:	2bff      	cmp	r3, #255	; 0xff
 80078ae:	d103      	bne.n	80078b8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2278      	movs	r2, #120	; 0x78
 80078b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691c      	ldr	r4, [r3, #16]
 80078bc:	7aba      	ldrb	r2, [r7, #10]
 80078be:	7af9      	ldrb	r1, [r7, #11]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	47a0      	blx	r4
 80078c6:	4603      	mov	r3, r0
 80078c8:	e011      	b.n	80078ee <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
      break;
 80078d0:	e00c      	b.n	80078ec <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff feb3 	bl	8007646 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80078e0:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e001      	b.n	80078ec <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e000      	b.n	80078ee <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80078ec:	2301      	movs	r3, #1
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000de0 	.word	0x20000de0

080078fc <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	72fb      	strb	r3, [r7, #11]
 800790a:	4613      	mov	r3, r2
 800790c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	3b0b      	subs	r3, #11
 8007912:	2b04      	cmp	r3, #4
 8007914:	f200 808a 	bhi.w	8007a2c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007935 	.word	0x08007935
 8007924:	08007a2d 	.word	0x08007a2d
 8007928:	0800794f 	.word	0x0800794f
 800792c:	08007981 	.word	0x08007981
 8007930:	080079a1 	.word	0x080079a1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8007934:	7abb      	ldrb	r3, [r7, #10]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800793a:	4940      	ldr	r1, [pc, #256]	; (8007a3c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fee9 	bl	8007714 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8007942:	e075      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8007944:	493e      	ldr	r1, [pc, #248]	; (8007a40 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7ff fee4 	bl	8007714 <u8x8_cad_SendSequence>
      break;
 800794c:	e070      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800794e:	7abb      	ldrb	r3, [r7, #10]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8007954:	493b      	ldr	r1, [pc, #236]	; (8007a44 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fedc 	bl	8007714 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	7c9a      	ldrb	r2, [r3, #18]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007968:	e062      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800796a:	4937      	ldr	r1, [pc, #220]	; (8007a48 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fed1 	bl	8007714 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	7cda      	ldrb	r2, [r3, #19]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800797e:	e057      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fea7 	bl	80076d4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8007986:	2181      	movs	r1, #129	; 0x81
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff fe6c 	bl	8007666 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800798e:	7abb      	ldrb	r3, [r7, #10]
 8007990:	4619      	mov	r1, r3
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff fe79 	bl	800768a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff feab 	bl	80076f4 <u8x8_cad_EndTransfer>
      break;
 800799e:	e047      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fe97 	bl	80076d4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	4413      	add	r3, r2
 80079bc:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80079be:	2140      	movs	r1, #64	; 0x40
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff fe50 	bl	8007666 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f043 0310 	orr.w	r3, r3, #16
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff fe46 	bl	8007666 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff fe50 	bl	800768a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	799b      	ldrb	r3, [r3, #6]
 80079ee:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fe47 	bl	800768a <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4619      	mov	r1, r3
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fe4b 	bl	80076ae <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8007a18:	7abb      	ldrb	r3, [r7, #10]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8007a1e:	7abb      	ldrb	r3, [r7, #10]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1eb      	bne.n	80079fc <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff fe65 	bl	80076f4 <u8x8_cad_EndTransfer>
      break;
 8007a2a:	e001      	b.n	8007a30 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e000      	b.n	8007a32 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8007a30:	2301      	movs	r3, #1
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	0800cdd8 	.word	0x0800cdd8
 8007a40:	0800cde0 	.word	0x0800cde0
 8007a44:	0800cde8 	.word	0x0800cde8
 8007a48:	0800cdf0 	.word	0x0800cdf0

08007a4c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	72fb      	strb	r3, [r7, #11]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007a5e:	7aba      	ldrb	r2, [r7, #10]
 8007a60:	7af9      	ldrb	r1, [r7, #11]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff ff49 	bl	80078fc <u8x8_d_ssd1306_sh1106_generic>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e014      	b.n	8007a9e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	2b09      	cmp	r3, #9
 8007a78:	d009      	beq.n	8007a8e <u8x8_d_ssd1306_128x64_noname+0x42>
 8007a7a:	2b0a      	cmp	r3, #10
 8007a7c:	d10c      	bne.n	8007a98 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f82a 	bl	8007ad8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8007a84:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fe44 	bl	8007714 <u8x8_cad_SendSequence>
      break;
 8007a8c:	e006      	b.n	8007a9c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8007a8e:	4907      	ldr	r1, [pc, #28]	; (8007aac <u8x8_d_ssd1306_128x64_noname+0x60>)
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f80d 	bl	8007ab0 <u8x8_d_helper_display_setup_memory>
      break;
 8007a96:	e001      	b.n	8007a9c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e000      	b.n	8007a9e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8007a9c:	2301      	movs	r3, #1
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	0800cda0 	.word	0x0800cda0
 8007aac:	0800cdf8 	.word	0x0800cdf8

08007ab0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	7c9a      	ldrb	r2, [r3, #18]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695c      	ldr	r4, [r3, #20]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2128      	movs	r1, #40	; 0x28
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68dc      	ldr	r4, [r3, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	2114      	movs	r1, #20
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8007afc:	2201      	movs	r2, #1
 8007afe:	214b      	movs	r1, #75	; 0x4b
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f886 	bl	8007c12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2129      	movs	r1, #41	; 0x29
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f87e 	bl	8007c12 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007b16:	2200      	movs	r2, #0
 8007b18:	214b      	movs	r1, #75	; 0x4b
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f879 	bl	8007c12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	461a      	mov	r2, r3
 8007b28:	2129      	movs	r1, #41	; 0x29
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f871 	bl	8007c12 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007b30:	2201      	movs	r2, #1
 8007b32:	214b      	movs	r1, #75	; 0x4b
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f86c 	bl	8007c12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	461a      	mov	r2, r3
 8007b42:	2129      	movs	r1, #41	; 0x29
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f864 	bl	8007c12 <u8x8_gpio_call>
}    
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd90      	pop	{r4, r7, pc}

08007b52 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007b52:	b590      	push	{r4, r7, lr}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4603      	mov	r3, r0
 8007b62:	70fb      	strb	r3, [r7, #3]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70bb      	strb	r3, [r7, #2]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007b70:	78bb      	ldrb	r3, [r7, #2]
 8007b72:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007b74:	787b      	ldrb	r3, [r7, #1]
 8007b76:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689c      	ldr	r4, [r3, #8]
 8007b80:	f107 0308 	add.w	r3, r7, #8
 8007b84:	2201      	movs	r2, #1
 8007b86:	210f      	movs	r1, #15
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	47a0      	blx	r4
 8007b8c:	4603      	mov	r3, r0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd90      	pop	{r4, r7, pc}

08007b96 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007b96:	b590      	push	{r4, r7, lr}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689c      	ldr	r4, [r3, #8]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2109      	movs	r1, #9
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	47a0      	blx	r4
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd90      	pop	{r4, r7, pc}

08007bb4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689c      	ldr	r4, [r3, #8]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	210a      	movs	r1, #10
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd90      	pop	{r4, r7, pc}

08007bd2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007bd2:	b590      	push	{r4, r7, lr}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689c      	ldr	r4, [r3, #8]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	2300      	movs	r3, #0
 8007be6:	210b      	movs	r1, #11
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	47a0      	blx	r4
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd90      	pop	{r4, r7, pc}

08007bf4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007bf4:	b590      	push	{r4, r7, lr}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689c      	ldr	r4, [r3, #8]
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	2110      	movs	r1, #16
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	47a0      	blx	r4
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd90      	pop	{r4, r7, pc}

08007c12 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007c12:	b590      	push	{r4, r7, lr}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695c      	ldr	r4, [r3, #20]
 8007c26:	78ba      	ldrb	r2, [r7, #2]
 8007c28:	78f9      	ldrb	r1, [r7, #3]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	47a0      	blx	r4
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd90      	pop	{r4, r7, pc}

08007c38 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
 8007c46:	4613      	mov	r3, r2
 8007c48:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <u8x8_SetupDefaults+0x58>)
 8007c6a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a10      	ldr	r2, [pc, #64]	; (8007cb0 <u8x8_SetupDefaults+0x58>)
 8007c70:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a0e      	ldr	r2, [pc, #56]	; (8007cb0 <u8x8_SetupDefaults+0x58>)
 8007c76:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a0d      	ldr	r2, [pc, #52]	; (8007cb0 <u8x8_SetupDefaults+0x58>)
 8007c7c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	22ff      	movs	r2, #255	; 0xff
 8007c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	22ff      	movs	r2, #255	; 0xff
 8007ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	08007c39 	.word	0x08007c39

08007cb4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff ffc8 	bl	8007c58 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff ff58 	bl	8007b96 <u8x8_SetupMemory>
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <__errno>:
 8007cf0:	4b01      	ldr	r3, [pc, #4]	; (8007cf8 <__errno+0x8>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <__libc_init_array>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4d0d      	ldr	r5, [pc, #52]	; (8007d34 <__libc_init_array+0x38>)
 8007d00:	4c0d      	ldr	r4, [pc, #52]	; (8007d38 <__libc_init_array+0x3c>)
 8007d02:	1b64      	subs	r4, r4, r5
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	2600      	movs	r6, #0
 8007d08:	42a6      	cmp	r6, r4
 8007d0a:	d109      	bne.n	8007d20 <__libc_init_array+0x24>
 8007d0c:	4d0b      	ldr	r5, [pc, #44]	; (8007d3c <__libc_init_array+0x40>)
 8007d0e:	4c0c      	ldr	r4, [pc, #48]	; (8007d40 <__libc_init_array+0x44>)
 8007d10:	f000 fc8e 	bl	8008630 <_init>
 8007d14:	1b64      	subs	r4, r4, r5
 8007d16:	10a4      	asrs	r4, r4, #2
 8007d18:	2600      	movs	r6, #0
 8007d1a:	42a6      	cmp	r6, r4
 8007d1c:	d105      	bne.n	8007d2a <__libc_init_array+0x2e>
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d24:	4798      	blx	r3
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7ee      	b.n	8007d08 <__libc_init_array+0xc>
 8007d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2e:	4798      	blx	r3
 8007d30:	3601      	adds	r6, #1
 8007d32:	e7f2      	b.n	8007d1a <__libc_init_array+0x1e>
 8007d34:	0800ceac 	.word	0x0800ceac
 8007d38:	0800ceac 	.word	0x0800ceac
 8007d3c:	0800ceac 	.word	0x0800ceac
 8007d40:	0800ceb0 	.word	0x0800ceb0

08007d44 <memset>:
 8007d44:	4402      	add	r2, r0
 8007d46:	4603      	mov	r3, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <siprintf>:
 8007d54:	b40e      	push	{r1, r2, r3}
 8007d56:	b500      	push	{lr}
 8007d58:	b09c      	sub	sp, #112	; 0x70
 8007d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d5c:	9002      	str	r0, [sp, #8]
 8007d5e:	9006      	str	r0, [sp, #24]
 8007d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <siprintf+0x38>)
 8007d66:	9107      	str	r1, [sp, #28]
 8007d68:	9104      	str	r1, [sp, #16]
 8007d6a:	4909      	ldr	r1, [pc, #36]	; (8007d90 <siprintf+0x3c>)
 8007d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	6800      	ldr	r0, [r0, #0]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	a902      	add	r1, sp, #8
 8007d78:	f000 f8fe 	bl	8007f78 <_svfiprintf_r>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	b01c      	add	sp, #112	; 0x70
 8007d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d88:	b003      	add	sp, #12
 8007d8a:	4770      	bx	lr
 8007d8c:	2000000c 	.word	0x2000000c
 8007d90:	ffff0208 	.word	0xffff0208

08007d94 <__retarget_lock_acquire_recursive>:
 8007d94:	4770      	bx	lr

08007d96 <__retarget_lock_release_recursive>:
 8007d96:	4770      	bx	lr

08007d98 <sbrk_aligned>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4e0e      	ldr	r6, [pc, #56]	; (8007dd4 <sbrk_aligned+0x3c>)
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	6831      	ldr	r1, [r6, #0]
 8007da0:	4605      	mov	r5, r0
 8007da2:	b911      	cbnz	r1, 8007daa <sbrk_aligned+0x12>
 8007da4:	f000 fb7c 	bl	80084a0 <_sbrk_r>
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 fb77 	bl	80084a0 <_sbrk_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d00a      	beq.n	8007dcc <sbrk_aligned+0x34>
 8007db6:	1cc4      	adds	r4, r0, #3
 8007db8:	f024 0403 	bic.w	r4, r4, #3
 8007dbc:	42a0      	cmp	r0, r4
 8007dbe:	d007      	beq.n	8007dd0 <sbrk_aligned+0x38>
 8007dc0:	1a21      	subs	r1, r4, r0
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 fb6c 	bl	80084a0 <_sbrk_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d101      	bne.n	8007dd0 <sbrk_aligned+0x38>
 8007dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	20000de8 	.word	0x20000de8

08007dd8 <_malloc_r>:
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	1ccd      	adds	r5, r1, #3
 8007dde:	f025 0503 	bic.w	r5, r5, #3
 8007de2:	3508      	adds	r5, #8
 8007de4:	2d0c      	cmp	r5, #12
 8007de6:	bf38      	it	cc
 8007de8:	250c      	movcc	r5, #12
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	4607      	mov	r7, r0
 8007dee:	db01      	blt.n	8007df4 <_malloc_r+0x1c>
 8007df0:	42a9      	cmp	r1, r5
 8007df2:	d905      	bls.n	8007e00 <_malloc_r+0x28>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	2600      	movs	r6, #0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	4e2e      	ldr	r6, [pc, #184]	; (8007ebc <_malloc_r+0xe4>)
 8007e02:	f000 fb85 	bl	8008510 <__malloc_lock>
 8007e06:	6833      	ldr	r3, [r6, #0]
 8007e08:	461c      	mov	r4, r3
 8007e0a:	bb34      	cbnz	r4, 8007e5a <_malloc_r+0x82>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7ff ffc2 	bl	8007d98 <sbrk_aligned>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	4604      	mov	r4, r0
 8007e18:	d14d      	bne.n	8007eb6 <_malloc_r+0xde>
 8007e1a:	6834      	ldr	r4, [r6, #0]
 8007e1c:	4626      	mov	r6, r4
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	d140      	bne.n	8007ea4 <_malloc_r+0xcc>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	4631      	mov	r1, r6
 8007e26:	4638      	mov	r0, r7
 8007e28:	eb04 0803 	add.w	r8, r4, r3
 8007e2c:	f000 fb38 	bl	80084a0 <_sbrk_r>
 8007e30:	4580      	cmp	r8, r0
 8007e32:	d13a      	bne.n	8007eaa <_malloc_r+0xd2>
 8007e34:	6821      	ldr	r1, [r4, #0]
 8007e36:	3503      	adds	r5, #3
 8007e38:	1a6d      	subs	r5, r5, r1
 8007e3a:	f025 0503 	bic.w	r5, r5, #3
 8007e3e:	3508      	adds	r5, #8
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	bf38      	it	cc
 8007e44:	250c      	movcc	r5, #12
 8007e46:	4629      	mov	r1, r5
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff ffa5 	bl	8007d98 <sbrk_aligned>
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d02b      	beq.n	8007eaa <_malloc_r+0xd2>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	442b      	add	r3, r5
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	e00e      	b.n	8007e78 <_malloc_r+0xa0>
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	1b52      	subs	r2, r2, r5
 8007e5e:	d41e      	bmi.n	8007e9e <_malloc_r+0xc6>
 8007e60:	2a0b      	cmp	r2, #11
 8007e62:	d916      	bls.n	8007e92 <_malloc_r+0xba>
 8007e64:	1961      	adds	r1, r4, r5
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	6025      	str	r5, [r4, #0]
 8007e6a:	bf18      	it	ne
 8007e6c:	6059      	strne	r1, [r3, #4]
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	bf08      	it	eq
 8007e72:	6031      	streq	r1, [r6, #0]
 8007e74:	5162      	str	r2, [r4, r5]
 8007e76:	604b      	str	r3, [r1, #4]
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f104 060b 	add.w	r6, r4, #11
 8007e7e:	f000 fb4d 	bl	800851c <__malloc_unlock>
 8007e82:	f026 0607 	bic.w	r6, r6, #7
 8007e86:	1d23      	adds	r3, r4, #4
 8007e88:	1af2      	subs	r2, r6, r3
 8007e8a:	d0b6      	beq.n	8007dfa <_malloc_r+0x22>
 8007e8c:	1b9b      	subs	r3, r3, r6
 8007e8e:	50a3      	str	r3, [r4, r2]
 8007e90:	e7b3      	b.n	8007dfa <_malloc_r+0x22>
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	bf0c      	ite	eq
 8007e98:	6032      	streq	r2, [r6, #0]
 8007e9a:	605a      	strne	r2, [r3, #4]
 8007e9c:	e7ec      	b.n	8007e78 <_malloc_r+0xa0>
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	6864      	ldr	r4, [r4, #4]
 8007ea2:	e7b2      	b.n	8007e0a <_malloc_r+0x32>
 8007ea4:	4634      	mov	r4, r6
 8007ea6:	6876      	ldr	r6, [r6, #4]
 8007ea8:	e7b9      	b.n	8007e1e <_malloc_r+0x46>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f000 fb34 	bl	800851c <__malloc_unlock>
 8007eb4:	e7a1      	b.n	8007dfa <_malloc_r+0x22>
 8007eb6:	6025      	str	r5, [r4, #0]
 8007eb8:	e7de      	b.n	8007e78 <_malloc_r+0xa0>
 8007eba:	bf00      	nop
 8007ebc:	20000de4 	.word	0x20000de4

08007ec0 <__ssputs_r>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	688e      	ldr	r6, [r1, #8]
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	4682      	mov	sl, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	4690      	mov	r8, r2
 8007ece:	461f      	mov	r7, r3
 8007ed0:	d838      	bhi.n	8007f44 <__ssputs_r+0x84>
 8007ed2:	898a      	ldrh	r2, [r1, #12]
 8007ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ed8:	d032      	beq.n	8007f40 <__ssputs_r+0x80>
 8007eda:	6825      	ldr	r5, [r4, #0]
 8007edc:	6909      	ldr	r1, [r1, #16]
 8007ede:	eba5 0901 	sub.w	r9, r5, r1
 8007ee2:	6965      	ldr	r5, [r4, #20]
 8007ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eec:	3301      	adds	r3, #1
 8007eee:	444b      	add	r3, r9
 8007ef0:	106d      	asrs	r5, r5, #1
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	bf38      	it	cc
 8007ef6:	461d      	movcc	r5, r3
 8007ef8:	0553      	lsls	r3, r2, #21
 8007efa:	d531      	bpl.n	8007f60 <__ssputs_r+0xa0>
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7ff ff6b 	bl	8007dd8 <_malloc_r>
 8007f02:	4606      	mov	r6, r0
 8007f04:	b950      	cbnz	r0, 8007f1c <__ssputs_r+0x5c>
 8007f06:	230c      	movs	r3, #12
 8007f08:	f8ca 3000 	str.w	r3, [sl]
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1c:	6921      	ldr	r1, [r4, #16]
 8007f1e:	464a      	mov	r2, r9
 8007f20:	f000 face 	bl	80084c0 <memcpy>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	6126      	str	r6, [r4, #16]
 8007f32:	6165      	str	r5, [r4, #20]
 8007f34:	444e      	add	r6, r9
 8007f36:	eba5 0509 	sub.w	r5, r5, r9
 8007f3a:	6026      	str	r6, [r4, #0]
 8007f3c:	60a5      	str	r5, [r4, #8]
 8007f3e:	463e      	mov	r6, r7
 8007f40:	42be      	cmp	r6, r7
 8007f42:	d900      	bls.n	8007f46 <__ssputs_r+0x86>
 8007f44:	463e      	mov	r6, r7
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	f000 fac6 	bl	80084dc <memmove>
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	1b9b      	subs	r3, r3, r6
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	4433      	add	r3, r6
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e7db      	b.n	8007f18 <__ssputs_r+0x58>
 8007f60:	462a      	mov	r2, r5
 8007f62:	f000 fb2d 	bl	80085c0 <_realloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1e1      	bne.n	8007f30 <__ssputs_r+0x70>
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f000 fada 	bl	8008528 <_free_r>
 8007f74:	e7c7      	b.n	8007f06 <__ssputs_r+0x46>
	...

08007f78 <_svfiprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	4698      	mov	r8, r3
 8007f7e:	898b      	ldrh	r3, [r1, #12]
 8007f80:	061b      	lsls	r3, r3, #24
 8007f82:	b09d      	sub	sp, #116	; 0x74
 8007f84:	4607      	mov	r7, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	d50e      	bpl.n	8007faa <_svfiprintf_r+0x32>
 8007f8c:	690b      	ldr	r3, [r1, #16]
 8007f8e:	b963      	cbnz	r3, 8007faa <_svfiprintf_r+0x32>
 8007f90:	2140      	movs	r1, #64	; 0x40
 8007f92:	f7ff ff21 	bl	8007dd8 <_malloc_r>
 8007f96:	6028      	str	r0, [r5, #0]
 8007f98:	6128      	str	r0, [r5, #16]
 8007f9a:	b920      	cbnz	r0, 8007fa6 <_svfiprintf_r+0x2e>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e0d1      	b.n	800814a <_svfiprintf_r+0x1d2>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	616b      	str	r3, [r5, #20]
 8007faa:	2300      	movs	r3, #0
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	2320      	movs	r3, #32
 8007fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb8:	2330      	movs	r3, #48	; 0x30
 8007fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008164 <_svfiprintf_r+0x1ec>
 8007fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fc2:	f04f 0901 	mov.w	r9, #1
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	469a      	mov	sl, r3
 8007fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fce:	b10a      	cbz	r2, 8007fd4 <_svfiprintf_r+0x5c>
 8007fd0:	2a25      	cmp	r2, #37	; 0x25
 8007fd2:	d1f9      	bne.n	8007fc8 <_svfiprintf_r+0x50>
 8007fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd8:	d00b      	beq.n	8007ff2 <_svfiprintf_r+0x7a>
 8007fda:	465b      	mov	r3, fp
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ff6d 	bl	8007ec0 <__ssputs_r>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f000 80aa 	beq.w	8008140 <_svfiprintf_r+0x1c8>
 8007fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fee:	445a      	add	r2, fp
 8007ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80a2 	beq.w	8008140 <_svfiprintf_r+0x1c8>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008006:	f10a 0a01 	add.w	sl, sl, #1
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	9307      	str	r3, [sp, #28]
 800800e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008012:	931a      	str	r3, [sp, #104]	; 0x68
 8008014:	4654      	mov	r4, sl
 8008016:	2205      	movs	r2, #5
 8008018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801c:	4851      	ldr	r0, [pc, #324]	; (8008164 <_svfiprintf_r+0x1ec>)
 800801e:	f7f8 f8e7 	bl	80001f0 <memchr>
 8008022:	9a04      	ldr	r2, [sp, #16]
 8008024:	b9d8      	cbnz	r0, 800805e <_svfiprintf_r+0xe6>
 8008026:	06d0      	lsls	r0, r2, #27
 8008028:	bf44      	itt	mi
 800802a:	2320      	movmi	r3, #32
 800802c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008030:	0711      	lsls	r1, r2, #28
 8008032:	bf44      	itt	mi
 8008034:	232b      	movmi	r3, #43	; 0x2b
 8008036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b2a      	cmp	r3, #42	; 0x2a
 8008040:	d015      	beq.n	800806e <_svfiprintf_r+0xf6>
 8008042:	9a07      	ldr	r2, [sp, #28]
 8008044:	4654      	mov	r4, sl
 8008046:	2000      	movs	r0, #0
 8008048:	f04f 0c0a 	mov.w	ip, #10
 800804c:	4621      	mov	r1, r4
 800804e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008052:	3b30      	subs	r3, #48	; 0x30
 8008054:	2b09      	cmp	r3, #9
 8008056:	d94e      	bls.n	80080f6 <_svfiprintf_r+0x17e>
 8008058:	b1b0      	cbz	r0, 8008088 <_svfiprintf_r+0x110>
 800805a:	9207      	str	r2, [sp, #28]
 800805c:	e014      	b.n	8008088 <_svfiprintf_r+0x110>
 800805e:	eba0 0308 	sub.w	r3, r0, r8
 8008062:	fa09 f303 	lsl.w	r3, r9, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	46a2      	mov	sl, r4
 800806c:	e7d2      	b.n	8008014 <_svfiprintf_r+0x9c>
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	9103      	str	r1, [sp, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfbb      	ittet	lt
 800807a:	425b      	neglt	r3, r3
 800807c:	f042 0202 	orrlt.w	r2, r2, #2
 8008080:	9307      	strge	r3, [sp, #28]
 8008082:	9307      	strlt	r3, [sp, #28]
 8008084:	bfb8      	it	lt
 8008086:	9204      	strlt	r2, [sp, #16]
 8008088:	7823      	ldrb	r3, [r4, #0]
 800808a:	2b2e      	cmp	r3, #46	; 0x2e
 800808c:	d10c      	bne.n	80080a8 <_svfiprintf_r+0x130>
 800808e:	7863      	ldrb	r3, [r4, #1]
 8008090:	2b2a      	cmp	r3, #42	; 0x2a
 8008092:	d135      	bne.n	8008100 <_svfiprintf_r+0x188>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1d1a      	adds	r2, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	9203      	str	r2, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfb8      	it	lt
 80080a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080a4:	3402      	adds	r4, #2
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008174 <_svfiprintf_r+0x1fc>
 80080ac:	7821      	ldrb	r1, [r4, #0]
 80080ae:	2203      	movs	r2, #3
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7f8 f89d 	bl	80001f0 <memchr>
 80080b6:	b140      	cbz	r0, 80080ca <_svfiprintf_r+0x152>
 80080b8:	2340      	movs	r3, #64	; 0x40
 80080ba:	eba0 000a 	sub.w	r0, r0, sl
 80080be:	fa03 f000 	lsl.w	r0, r3, r0
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	4303      	orrs	r3, r0
 80080c6:	3401      	adds	r4, #1
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	4826      	ldr	r0, [pc, #152]	; (8008168 <_svfiprintf_r+0x1f0>)
 80080d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080d4:	2206      	movs	r2, #6
 80080d6:	f7f8 f88b 	bl	80001f0 <memchr>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d038      	beq.n	8008150 <_svfiprintf_r+0x1d8>
 80080de:	4b23      	ldr	r3, [pc, #140]	; (800816c <_svfiprintf_r+0x1f4>)
 80080e0:	bb1b      	cbnz	r3, 800812a <_svfiprintf_r+0x1b2>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	3307      	adds	r3, #7
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	3308      	adds	r3, #8
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f0:	4433      	add	r3, r6
 80080f2:	9309      	str	r3, [sp, #36]	; 0x24
 80080f4:	e767      	b.n	8007fc6 <_svfiprintf_r+0x4e>
 80080f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080fa:	460c      	mov	r4, r1
 80080fc:	2001      	movs	r0, #1
 80080fe:	e7a5      	b.n	800804c <_svfiprintf_r+0xd4>
 8008100:	2300      	movs	r3, #0
 8008102:	3401      	adds	r4, #1
 8008104:	9305      	str	r3, [sp, #20]
 8008106:	4619      	mov	r1, r3
 8008108:	f04f 0c0a 	mov.w	ip, #10
 800810c:	4620      	mov	r0, r4
 800810e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008112:	3a30      	subs	r2, #48	; 0x30
 8008114:	2a09      	cmp	r2, #9
 8008116:	d903      	bls.n	8008120 <_svfiprintf_r+0x1a8>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0c5      	beq.n	80080a8 <_svfiprintf_r+0x130>
 800811c:	9105      	str	r1, [sp, #20]
 800811e:	e7c3      	b.n	80080a8 <_svfiprintf_r+0x130>
 8008120:	fb0c 2101 	mla	r1, ip, r1, r2
 8008124:	4604      	mov	r4, r0
 8008126:	2301      	movs	r3, #1
 8008128:	e7f0      	b.n	800810c <_svfiprintf_r+0x194>
 800812a:	ab03      	add	r3, sp, #12
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	462a      	mov	r2, r5
 8008130:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <_svfiprintf_r+0x1f8>)
 8008132:	a904      	add	r1, sp, #16
 8008134:	4638      	mov	r0, r7
 8008136:	f3af 8000 	nop.w
 800813a:	1c42      	adds	r2, r0, #1
 800813c:	4606      	mov	r6, r0
 800813e:	d1d6      	bne.n	80080ee <_svfiprintf_r+0x176>
 8008140:	89ab      	ldrh	r3, [r5, #12]
 8008142:	065b      	lsls	r3, r3, #25
 8008144:	f53f af2c 	bmi.w	8007fa0 <_svfiprintf_r+0x28>
 8008148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800814a:	b01d      	add	sp, #116	; 0x74
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	ab03      	add	r3, sp, #12
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	462a      	mov	r2, r5
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <_svfiprintf_r+0x1f8>)
 8008158:	a904      	add	r1, sp, #16
 800815a:	4638      	mov	r0, r7
 800815c:	f000 f87a 	bl	8008254 <_printf_i>
 8008160:	e7eb      	b.n	800813a <_svfiprintf_r+0x1c2>
 8008162:	bf00      	nop
 8008164:	0800ce70 	.word	0x0800ce70
 8008168:	0800ce7a 	.word	0x0800ce7a
 800816c:	00000000 	.word	0x00000000
 8008170:	08007ec1 	.word	0x08007ec1
 8008174:	0800ce76 	.word	0x0800ce76

08008178 <_printf_common>:
 8008178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	4616      	mov	r6, r2
 800817e:	4699      	mov	r9, r3
 8008180:	688a      	ldr	r2, [r1, #8]
 8008182:	690b      	ldr	r3, [r1, #16]
 8008184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008188:	4293      	cmp	r3, r2
 800818a:	bfb8      	it	lt
 800818c:	4613      	movlt	r3, r2
 800818e:	6033      	str	r3, [r6, #0]
 8008190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008194:	4607      	mov	r7, r0
 8008196:	460c      	mov	r4, r1
 8008198:	b10a      	cbz	r2, 800819e <_printf_common+0x26>
 800819a:	3301      	adds	r3, #1
 800819c:	6033      	str	r3, [r6, #0]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	0699      	lsls	r1, r3, #26
 80081a2:	bf42      	ittt	mi
 80081a4:	6833      	ldrmi	r3, [r6, #0]
 80081a6:	3302      	addmi	r3, #2
 80081a8:	6033      	strmi	r3, [r6, #0]
 80081aa:	6825      	ldr	r5, [r4, #0]
 80081ac:	f015 0506 	ands.w	r5, r5, #6
 80081b0:	d106      	bne.n	80081c0 <_printf_common+0x48>
 80081b2:	f104 0a19 	add.w	sl, r4, #25
 80081b6:	68e3      	ldr	r3, [r4, #12]
 80081b8:	6832      	ldr	r2, [r6, #0]
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dc26      	bgt.n	800820e <_printf_common+0x96>
 80081c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081c4:	1e13      	subs	r3, r2, #0
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	bf18      	it	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	0692      	lsls	r2, r2, #26
 80081ce:	d42b      	bmi.n	8008228 <_printf_common+0xb0>
 80081d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081d4:	4649      	mov	r1, r9
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	3001      	adds	r0, #1
 80081dc:	d01e      	beq.n	800821c <_printf_common+0xa4>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	68e5      	ldr	r5, [r4, #12]
 80081e2:	6832      	ldr	r2, [r6, #0]
 80081e4:	f003 0306 	and.w	r3, r3, #6
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	bf08      	it	eq
 80081ec:	1aad      	subeq	r5, r5, r2
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	bf0c      	ite	eq
 80081f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f8:	2500      	movne	r5, #0
 80081fa:	4293      	cmp	r3, r2
 80081fc:	bfc4      	itt	gt
 80081fe:	1a9b      	subgt	r3, r3, r2
 8008200:	18ed      	addgt	r5, r5, r3
 8008202:	2600      	movs	r6, #0
 8008204:	341a      	adds	r4, #26
 8008206:	42b5      	cmp	r5, r6
 8008208:	d11a      	bne.n	8008240 <_printf_common+0xc8>
 800820a:	2000      	movs	r0, #0
 800820c:	e008      	b.n	8008220 <_printf_common+0xa8>
 800820e:	2301      	movs	r3, #1
 8008210:	4652      	mov	r2, sl
 8008212:	4649      	mov	r1, r9
 8008214:	4638      	mov	r0, r7
 8008216:	47c0      	blx	r8
 8008218:	3001      	adds	r0, #1
 800821a:	d103      	bne.n	8008224 <_printf_common+0xac>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008224:	3501      	adds	r5, #1
 8008226:	e7c6      	b.n	80081b6 <_printf_common+0x3e>
 8008228:	18e1      	adds	r1, r4, r3
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	2030      	movs	r0, #48	; 0x30
 800822e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008232:	4422      	add	r2, r4
 8008234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800823c:	3302      	adds	r3, #2
 800823e:	e7c7      	b.n	80081d0 <_printf_common+0x58>
 8008240:	2301      	movs	r3, #1
 8008242:	4622      	mov	r2, r4
 8008244:	4649      	mov	r1, r9
 8008246:	4638      	mov	r0, r7
 8008248:	47c0      	blx	r8
 800824a:	3001      	adds	r0, #1
 800824c:	d0e6      	beq.n	800821c <_printf_common+0xa4>
 800824e:	3601      	adds	r6, #1
 8008250:	e7d9      	b.n	8008206 <_printf_common+0x8e>
	...

08008254 <_printf_i>:
 8008254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	7e0f      	ldrb	r7, [r1, #24]
 800825a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800825c:	2f78      	cmp	r7, #120	; 0x78
 800825e:	4691      	mov	r9, r2
 8008260:	4680      	mov	r8, r0
 8008262:	460c      	mov	r4, r1
 8008264:	469a      	mov	sl, r3
 8008266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800826a:	d807      	bhi.n	800827c <_printf_i+0x28>
 800826c:	2f62      	cmp	r7, #98	; 0x62
 800826e:	d80a      	bhi.n	8008286 <_printf_i+0x32>
 8008270:	2f00      	cmp	r7, #0
 8008272:	f000 80d8 	beq.w	8008426 <_printf_i+0x1d2>
 8008276:	2f58      	cmp	r7, #88	; 0x58
 8008278:	f000 80a3 	beq.w	80083c2 <_printf_i+0x16e>
 800827c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008284:	e03a      	b.n	80082fc <_printf_i+0xa8>
 8008286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800828a:	2b15      	cmp	r3, #21
 800828c:	d8f6      	bhi.n	800827c <_printf_i+0x28>
 800828e:	a101      	add	r1, pc, #4	; (adr r1, 8008294 <_printf_i+0x40>)
 8008290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008294:	080082ed 	.word	0x080082ed
 8008298:	08008301 	.word	0x08008301
 800829c:	0800827d 	.word	0x0800827d
 80082a0:	0800827d 	.word	0x0800827d
 80082a4:	0800827d 	.word	0x0800827d
 80082a8:	0800827d 	.word	0x0800827d
 80082ac:	08008301 	.word	0x08008301
 80082b0:	0800827d 	.word	0x0800827d
 80082b4:	0800827d 	.word	0x0800827d
 80082b8:	0800827d 	.word	0x0800827d
 80082bc:	0800827d 	.word	0x0800827d
 80082c0:	0800840d 	.word	0x0800840d
 80082c4:	08008331 	.word	0x08008331
 80082c8:	080083ef 	.word	0x080083ef
 80082cc:	0800827d 	.word	0x0800827d
 80082d0:	0800827d 	.word	0x0800827d
 80082d4:	0800842f 	.word	0x0800842f
 80082d8:	0800827d 	.word	0x0800827d
 80082dc:	08008331 	.word	0x08008331
 80082e0:	0800827d 	.word	0x0800827d
 80082e4:	0800827d 	.word	0x0800827d
 80082e8:	080083f7 	.word	0x080083f7
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	1d1a      	adds	r2, r3, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	602a      	str	r2, [r5, #0]
 80082f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082fc:	2301      	movs	r3, #1
 80082fe:	e0a3      	b.n	8008448 <_printf_i+0x1f4>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	6829      	ldr	r1, [r5, #0]
 8008304:	0606      	lsls	r6, r0, #24
 8008306:	f101 0304 	add.w	r3, r1, #4
 800830a:	d50a      	bpl.n	8008322 <_printf_i+0xce>
 800830c:	680e      	ldr	r6, [r1, #0]
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	2e00      	cmp	r6, #0
 8008312:	da03      	bge.n	800831c <_printf_i+0xc8>
 8008314:	232d      	movs	r3, #45	; 0x2d
 8008316:	4276      	negs	r6, r6
 8008318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800831c:	485e      	ldr	r0, [pc, #376]	; (8008498 <_printf_i+0x244>)
 800831e:	230a      	movs	r3, #10
 8008320:	e019      	b.n	8008356 <_printf_i+0x102>
 8008322:	680e      	ldr	r6, [r1, #0]
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800832a:	bf18      	it	ne
 800832c:	b236      	sxthne	r6, r6
 800832e:	e7ef      	b.n	8008310 <_printf_i+0xbc>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	6820      	ldr	r0, [r4, #0]
 8008334:	1d19      	adds	r1, r3, #4
 8008336:	6029      	str	r1, [r5, #0]
 8008338:	0601      	lsls	r1, r0, #24
 800833a:	d501      	bpl.n	8008340 <_printf_i+0xec>
 800833c:	681e      	ldr	r6, [r3, #0]
 800833e:	e002      	b.n	8008346 <_printf_i+0xf2>
 8008340:	0646      	lsls	r6, r0, #25
 8008342:	d5fb      	bpl.n	800833c <_printf_i+0xe8>
 8008344:	881e      	ldrh	r6, [r3, #0]
 8008346:	4854      	ldr	r0, [pc, #336]	; (8008498 <_printf_i+0x244>)
 8008348:	2f6f      	cmp	r7, #111	; 0x6f
 800834a:	bf0c      	ite	eq
 800834c:	2308      	moveq	r3, #8
 800834e:	230a      	movne	r3, #10
 8008350:	2100      	movs	r1, #0
 8008352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008356:	6865      	ldr	r5, [r4, #4]
 8008358:	60a5      	str	r5, [r4, #8]
 800835a:	2d00      	cmp	r5, #0
 800835c:	bfa2      	ittt	ge
 800835e:	6821      	ldrge	r1, [r4, #0]
 8008360:	f021 0104 	bicge.w	r1, r1, #4
 8008364:	6021      	strge	r1, [r4, #0]
 8008366:	b90e      	cbnz	r6, 800836c <_printf_i+0x118>
 8008368:	2d00      	cmp	r5, #0
 800836a:	d04d      	beq.n	8008408 <_printf_i+0x1b4>
 800836c:	4615      	mov	r5, r2
 800836e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008372:	fb03 6711 	mls	r7, r3, r1, r6
 8008376:	5dc7      	ldrb	r7, [r0, r7]
 8008378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800837c:	4637      	mov	r7, r6
 800837e:	42bb      	cmp	r3, r7
 8008380:	460e      	mov	r6, r1
 8008382:	d9f4      	bls.n	800836e <_printf_i+0x11a>
 8008384:	2b08      	cmp	r3, #8
 8008386:	d10b      	bne.n	80083a0 <_printf_i+0x14c>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	07de      	lsls	r6, r3, #31
 800838c:	d508      	bpl.n	80083a0 <_printf_i+0x14c>
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	6861      	ldr	r1, [r4, #4]
 8008392:	4299      	cmp	r1, r3
 8008394:	bfde      	ittt	le
 8008396:	2330      	movle	r3, #48	; 0x30
 8008398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800839c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083a0:	1b52      	subs	r2, r2, r5
 80083a2:	6122      	str	r2, [r4, #16]
 80083a4:	f8cd a000 	str.w	sl, [sp]
 80083a8:	464b      	mov	r3, r9
 80083aa:	aa03      	add	r2, sp, #12
 80083ac:	4621      	mov	r1, r4
 80083ae:	4640      	mov	r0, r8
 80083b0:	f7ff fee2 	bl	8008178 <_printf_common>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d14c      	bne.n	8008452 <_printf_i+0x1fe>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	b004      	add	sp, #16
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	4835      	ldr	r0, [pc, #212]	; (8008498 <_printf_i+0x244>)
 80083c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083c8:	6829      	ldr	r1, [r5, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80083d0:	6029      	str	r1, [r5, #0]
 80083d2:	061d      	lsls	r5, r3, #24
 80083d4:	d514      	bpl.n	8008400 <_printf_i+0x1ac>
 80083d6:	07df      	lsls	r7, r3, #31
 80083d8:	bf44      	itt	mi
 80083da:	f043 0320 	orrmi.w	r3, r3, #32
 80083de:	6023      	strmi	r3, [r4, #0]
 80083e0:	b91e      	cbnz	r6, 80083ea <_printf_i+0x196>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	f023 0320 	bic.w	r3, r3, #32
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	2310      	movs	r3, #16
 80083ec:	e7b0      	b.n	8008350 <_printf_i+0xfc>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	f043 0320 	orr.w	r3, r3, #32
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	2378      	movs	r3, #120	; 0x78
 80083f8:	4828      	ldr	r0, [pc, #160]	; (800849c <_printf_i+0x248>)
 80083fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083fe:	e7e3      	b.n	80083c8 <_printf_i+0x174>
 8008400:	0659      	lsls	r1, r3, #25
 8008402:	bf48      	it	mi
 8008404:	b2b6      	uxthmi	r6, r6
 8008406:	e7e6      	b.n	80083d6 <_printf_i+0x182>
 8008408:	4615      	mov	r5, r2
 800840a:	e7bb      	b.n	8008384 <_printf_i+0x130>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	6826      	ldr	r6, [r4, #0]
 8008410:	6961      	ldr	r1, [r4, #20]
 8008412:	1d18      	adds	r0, r3, #4
 8008414:	6028      	str	r0, [r5, #0]
 8008416:	0635      	lsls	r5, r6, #24
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	d501      	bpl.n	8008420 <_printf_i+0x1cc>
 800841c:	6019      	str	r1, [r3, #0]
 800841e:	e002      	b.n	8008426 <_printf_i+0x1d2>
 8008420:	0670      	lsls	r0, r6, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0x1c8>
 8008424:	8019      	strh	r1, [r3, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	4615      	mov	r5, r2
 800842c:	e7ba      	b.n	80083a4 <_printf_i+0x150>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	602a      	str	r2, [r5, #0]
 8008434:	681d      	ldr	r5, [r3, #0]
 8008436:	6862      	ldr	r2, [r4, #4]
 8008438:	2100      	movs	r1, #0
 800843a:	4628      	mov	r0, r5
 800843c:	f7f7 fed8 	bl	80001f0 <memchr>
 8008440:	b108      	cbz	r0, 8008446 <_printf_i+0x1f2>
 8008442:	1b40      	subs	r0, r0, r5
 8008444:	6060      	str	r0, [r4, #4]
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	2300      	movs	r3, #0
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008450:	e7a8      	b.n	80083a4 <_printf_i+0x150>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	462a      	mov	r2, r5
 8008456:	4649      	mov	r1, r9
 8008458:	4640      	mov	r0, r8
 800845a:	47d0      	blx	sl
 800845c:	3001      	adds	r0, #1
 800845e:	d0ab      	beq.n	80083b8 <_printf_i+0x164>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	079b      	lsls	r3, r3, #30
 8008464:	d413      	bmi.n	800848e <_printf_i+0x23a>
 8008466:	68e0      	ldr	r0, [r4, #12]
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	4298      	cmp	r0, r3
 800846c:	bfb8      	it	lt
 800846e:	4618      	movlt	r0, r3
 8008470:	e7a4      	b.n	80083bc <_printf_i+0x168>
 8008472:	2301      	movs	r3, #1
 8008474:	4632      	mov	r2, r6
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	47d0      	blx	sl
 800847c:	3001      	adds	r0, #1
 800847e:	d09b      	beq.n	80083b8 <_printf_i+0x164>
 8008480:	3501      	adds	r5, #1
 8008482:	68e3      	ldr	r3, [r4, #12]
 8008484:	9903      	ldr	r1, [sp, #12]
 8008486:	1a5b      	subs	r3, r3, r1
 8008488:	42ab      	cmp	r3, r5
 800848a:	dcf2      	bgt.n	8008472 <_printf_i+0x21e>
 800848c:	e7eb      	b.n	8008466 <_printf_i+0x212>
 800848e:	2500      	movs	r5, #0
 8008490:	f104 0619 	add.w	r6, r4, #25
 8008494:	e7f5      	b.n	8008482 <_printf_i+0x22e>
 8008496:	bf00      	nop
 8008498:	0800ce81 	.word	0x0800ce81
 800849c:	0800ce92 	.word	0x0800ce92

080084a0 <_sbrk_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d06      	ldr	r5, [pc, #24]	; (80084bc <_sbrk_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f7f8 fd9a 	bl	8000fe4 <_sbrk>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_sbrk_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_sbrk_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000dec 	.word	0x20000dec

080084c0 <memcpy>:
 80084c0:	440a      	add	r2, r1
 80084c2:	4291      	cmp	r1, r2
 80084c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c8:	d100      	bne.n	80084cc <memcpy+0xc>
 80084ca:	4770      	bx	lr
 80084cc:	b510      	push	{r4, lr}
 80084ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d1f9      	bne.n	80084ce <memcpy+0xe>
 80084da:	bd10      	pop	{r4, pc}

080084dc <memmove>:
 80084dc:	4288      	cmp	r0, r1
 80084de:	b510      	push	{r4, lr}
 80084e0:	eb01 0402 	add.w	r4, r1, r2
 80084e4:	d902      	bls.n	80084ec <memmove+0x10>
 80084e6:	4284      	cmp	r4, r0
 80084e8:	4623      	mov	r3, r4
 80084ea:	d807      	bhi.n	80084fc <memmove+0x20>
 80084ec:	1e43      	subs	r3, r0, #1
 80084ee:	42a1      	cmp	r1, r4
 80084f0:	d008      	beq.n	8008504 <memmove+0x28>
 80084f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084fa:	e7f8      	b.n	80084ee <memmove+0x12>
 80084fc:	4402      	add	r2, r0
 80084fe:	4601      	mov	r1, r0
 8008500:	428a      	cmp	r2, r1
 8008502:	d100      	bne.n	8008506 <memmove+0x2a>
 8008504:	bd10      	pop	{r4, pc}
 8008506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800850a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800850e:	e7f7      	b.n	8008500 <memmove+0x24>

08008510 <__malloc_lock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_lock+0x8>)
 8008512:	f7ff bc3f 	b.w	8007d94 <__retarget_lock_acquire_recursive>
 8008516:	bf00      	nop
 8008518:	20000de1 	.word	0x20000de1

0800851c <__malloc_unlock>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__malloc_unlock+0x8>)
 800851e:	f7ff bc3a 	b.w	8007d96 <__retarget_lock_release_recursive>
 8008522:	bf00      	nop
 8008524:	20000de1 	.word	0x20000de1

08008528 <_free_r>:
 8008528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852a:	2900      	cmp	r1, #0
 800852c:	d044      	beq.n	80085b8 <_free_r+0x90>
 800852e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008532:	9001      	str	r0, [sp, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f1a1 0404 	sub.w	r4, r1, #4
 800853a:	bfb8      	it	lt
 800853c:	18e4      	addlt	r4, r4, r3
 800853e:	f7ff ffe7 	bl	8008510 <__malloc_lock>
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <_free_r+0x94>)
 8008544:	9801      	ldr	r0, [sp, #4]
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	b933      	cbnz	r3, 8008558 <_free_r+0x30>
 800854a:	6063      	str	r3, [r4, #4]
 800854c:	6014      	str	r4, [r2, #0]
 800854e:	b003      	add	sp, #12
 8008550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008554:	f7ff bfe2 	b.w	800851c <__malloc_unlock>
 8008558:	42a3      	cmp	r3, r4
 800855a:	d908      	bls.n	800856e <_free_r+0x46>
 800855c:	6825      	ldr	r5, [r4, #0]
 800855e:	1961      	adds	r1, r4, r5
 8008560:	428b      	cmp	r3, r1
 8008562:	bf01      	itttt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	e7ed      	b.n	800854a <_free_r+0x22>
 800856e:	461a      	mov	r2, r3
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b10b      	cbz	r3, 8008578 <_free_r+0x50>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d9fa      	bls.n	800856e <_free_r+0x46>
 8008578:	6811      	ldr	r1, [r2, #0]
 800857a:	1855      	adds	r5, r2, r1
 800857c:	42a5      	cmp	r5, r4
 800857e:	d10b      	bne.n	8008598 <_free_r+0x70>
 8008580:	6824      	ldr	r4, [r4, #0]
 8008582:	4421      	add	r1, r4
 8008584:	1854      	adds	r4, r2, r1
 8008586:	42a3      	cmp	r3, r4
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	d1e0      	bne.n	800854e <_free_r+0x26>
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	6053      	str	r3, [r2, #4]
 8008592:	4421      	add	r1, r4
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	e7da      	b.n	800854e <_free_r+0x26>
 8008598:	d902      	bls.n	80085a0 <_free_r+0x78>
 800859a:	230c      	movs	r3, #12
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	e7d6      	b.n	800854e <_free_r+0x26>
 80085a0:	6825      	ldr	r5, [r4, #0]
 80085a2:	1961      	adds	r1, r4, r5
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf04      	itt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	6063      	str	r3, [r4, #4]
 80085ae:	bf04      	itt	eq
 80085b0:	1949      	addeq	r1, r1, r5
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	6054      	str	r4, [r2, #4]
 80085b6:	e7ca      	b.n	800854e <_free_r+0x26>
 80085b8:	b003      	add	sp, #12
 80085ba:	bd30      	pop	{r4, r5, pc}
 80085bc:	20000de4 	.word	0x20000de4

080085c0 <_realloc_r>:
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4680      	mov	r8, r0
 80085c6:	4614      	mov	r4, r2
 80085c8:	460e      	mov	r6, r1
 80085ca:	b921      	cbnz	r1, 80085d6 <_realloc_r+0x16>
 80085cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d0:	4611      	mov	r1, r2
 80085d2:	f7ff bc01 	b.w	8007dd8 <_malloc_r>
 80085d6:	b92a      	cbnz	r2, 80085e4 <_realloc_r+0x24>
 80085d8:	f7ff ffa6 	bl	8008528 <_free_r>
 80085dc:	4625      	mov	r5, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	f000 f81b 	bl	800861e <_malloc_usable_size_r>
 80085e8:	4284      	cmp	r4, r0
 80085ea:	4607      	mov	r7, r0
 80085ec:	d802      	bhi.n	80085f4 <_realloc_r+0x34>
 80085ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085f2:	d812      	bhi.n	800861a <_realloc_r+0x5a>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7ff fbee 	bl	8007dd8 <_malloc_r>
 80085fc:	4605      	mov	r5, r0
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0ed      	beq.n	80085de <_realloc_r+0x1e>
 8008602:	42bc      	cmp	r4, r7
 8008604:	4622      	mov	r2, r4
 8008606:	4631      	mov	r1, r6
 8008608:	bf28      	it	cs
 800860a:	463a      	movcs	r2, r7
 800860c:	f7ff ff58 	bl	80084c0 <memcpy>
 8008610:	4631      	mov	r1, r6
 8008612:	4640      	mov	r0, r8
 8008614:	f7ff ff88 	bl	8008528 <_free_r>
 8008618:	e7e1      	b.n	80085de <_realloc_r+0x1e>
 800861a:	4635      	mov	r5, r6
 800861c:	e7df      	b.n	80085de <_realloc_r+0x1e>

0800861e <_malloc_usable_size_r>:
 800861e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008622:	1f18      	subs	r0, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfbc      	itt	lt
 8008628:	580b      	ldrlt	r3, [r1, r0]
 800862a:	18c0      	addlt	r0, r0, r3
 800862c:	4770      	bx	lr
	...

08008630 <_init>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	bf00      	nop
 8008634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008636:	bc08      	pop	{r3}
 8008638:	469e      	mov	lr, r3
 800863a:	4770      	bx	lr

0800863c <_fini>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	bf00      	nop
 8008640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008642:	bc08      	pop	{r3}
 8008644:	469e      	mov	lr, r3
 8008646:	4770      	bx	lr
