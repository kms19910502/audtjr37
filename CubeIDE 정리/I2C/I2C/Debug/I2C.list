
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000544c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056dc  080056dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000808  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000878  20000878  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002208  00000000  00000000  00032681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00035750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002553c  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011673  00000000  00000000  0005ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de1d2  00000000  00000000  0006d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b2d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c8  00000000  00000000  0014b324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055e4 	.word	0x080055e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080055e4 	.word	0x080055e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	230a      	movs	r3, #10
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <_write+0x24>)
 80005aa:	f003 f9e4 	bl	8003976 <HAL_UART_Transmit>
	return len;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000308 	.word	0x20000308

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fd31 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f865 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f9b3 	bl	8000934 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ce:	f000 f8cb 	bl	8000768 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f957 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d6:	f000 f97f 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005da:	f000 f913 	bl	8000804 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t eeprom[10] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99};
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <main+0xcc>)
 80005e0:	463b      	mov	r3, r7
 80005e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e4:	c303      	stmia	r3!, {r0, r1}
 80005e6:	801a      	strh	r2, [r3, #0]

  HAL_I2C_Mem_Write(&hi2c1, 0x27, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 80005e8:	230a      	movs	r3, #10
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	230a      	movs	r3, #10
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	463b      	mov	r3, r7
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	2200      	movs	r2, #0
 80005f8:	2127      	movs	r1, #39	; 0x27
 80005fa:	4824      	ldr	r0, [pc, #144]	; (800068c <main+0xd0>)
 80005fc:	f001 fcc2 	bl	8001f84 <HAL_I2C_Mem_Write>

  HAL_Delay(3);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 fd83 	bl	800110c <HAL_Delay>

  for(int i = 0;i<10;i++) eeprom[i]=0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e007      	b.n	800061c <main+0x60>
 800060c:	463a      	mov	r2, r7
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b09      	cmp	r3, #9
 8000620:	ddf4      	ble.n	800060c <main+0x50>

  HAL_I2C_Mem_Read(&hi2c1, 0x27, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 8000622:	230a      	movs	r3, #10
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	230a      	movs	r3, #10
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	463b      	mov	r3, r7
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	2200      	movs	r2, #0
 8000632:	2127      	movs	r1, #39	; 0x27
 8000634:	4815      	ldr	r0, [pc, #84]	; (800068c <main+0xd0>)
 8000636:	f001 fd9f 	bl	8002178 <HAL_I2C_Mem_Read>
  while (1)
  {

	  printf("%02x %02x %02x %02x %02x \n\r",eeprom[0],eeprom[1],eeprom[2],eeprom[3],eeprom[4]);
 800063a:	783b      	ldrb	r3, [r7, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	787b      	ldrb	r3, [r7, #1]
 8000640:	4618      	mov	r0, r3
 8000642:	78bb      	ldrb	r3, [r7, #2]
 8000644:	461c      	mov	r4, r3
 8000646:	78fb      	ldrb	r3, [r7, #3]
 8000648:	793a      	ldrb	r2, [r7, #4]
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4623      	mov	r3, r4
 8000650:	4602      	mov	r2, r0
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0xd4>)
 8000654:	f004 f838 	bl	80046c8 <iprintf>
	  HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fd56 	bl	800110c <HAL_Delay>
	  printf("%02x %02x %02x %02x %02x \n\r",eeprom[5],eeprom[6],eeprom[7],eeprom[8],eeprom[9]);
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	4619      	mov	r1, r3
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	4618      	mov	r0, r3
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	461c      	mov	r4, r3
 800066c:	7a3b      	ldrb	r3, [r7, #8]
 800066e:	7a7a      	ldrb	r2, [r7, #9]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4623      	mov	r3, r4
 8000676:	4602      	mov	r2, r0
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <main+0xd4>)
 800067a:	f004 f825 	bl	80046c8 <iprintf>
	  HAL_Delay(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 fd43 	bl	800110c <HAL_Delay>
	  printf("%02x %02x %02x %02x %02x \n\r",eeprom[0],eeprom[1],eeprom[2],eeprom[3],eeprom[4]);
 8000686:	e7d8      	b.n	800063a <main+0x7e>
 8000688:	08005618 	.word	0x08005618
 800068c:	200002b4 	.word	0x200002b4
 8000690:	080055fc 	.word	0x080055fc

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f808 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fc47 	bl	8002fac <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f9b4 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fea8 	bl	800349c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f99d 	bl	8000a90 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ETH_Init+0x84>)
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <MX_ETH_Init+0x88>)
 8000770:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_ETH_Init+0x8c>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000786:	2200      	movs	r2, #0
 8000788:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_ETH_Init+0x8c>)
 800078c:	2200      	movs	r2, #0
 800078e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000792:	2200      	movs	r2, #0
 8000794:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_ETH_Init+0x84>)
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <MX_ETH_Init+0x8c>)
 800079a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_ETH_Init+0x84>)
 800079e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_ETH_Init+0x84>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_ETH_Init+0x90>)
 80007a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_ETH_Init+0x84>)
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_ETH_Init+0x94>)
 80007ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_ETH_Init+0x84>)
 80007b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_ETH_Init+0x84>)
 80007ba:	f000 fdb1 	bl	8001320 <HAL_ETH_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f964 	bl	8000a90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007c8:	2238      	movs	r2, #56	; 0x38
 80007ca:	2100      	movs	r1, #0
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ETH_Init+0x98>)
 80007ce:	f003 ff73 	bl	80046b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_ETH_Init+0x98>)
 80007d4:	2221      	movs	r2, #33	; 0x21
 80007d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_ETH_Init+0x98>)
 80007da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_ETH_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000204 	.word	0x20000204
 80007f0:	40028000 	.word	0x40028000
 80007f4:	20000858 	.word	0x20000858
 80007f8:	20000164 	.word	0x20000164
 80007fc:	200000c4 	.word	0x200000c4
 8000800:	2000008c 	.word	0x2000008c

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_I2C1_Init+0x74>)
 8000842:	f001 fa5b 	bl	8001cfc <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f920 	bl	8000a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C1_Init+0x74>)
 8000854:	f002 fa11 	bl	8002c7a <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 f917 	bl	8000a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C1_Init+0x74>)
 8000866:	f002 fa44 	bl	8002cf2 <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000870:	f000 f90e 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200002b4 	.word	0x200002b4
 800087c:	40005400 	.word	0x40005400
 8000880:	00061a80 	.word	0x00061a80

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART3_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008bc:	f003 f80e 	bl	80038dc <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f8e3 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000308 	.word	0x20000308
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2201      	movs	r2, #1
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	f002 fa28 	bl	8002d70 <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f8b3 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000034c 	.word	0x2000034c

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a4b      	ldr	r2, [pc, #300]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3d      	ldr	r2, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <MX_GPIO_Init+0x150>)
 80009fa:	f001 f965 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a04:	f001 f960 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_GPIO_Init+0x158>)
 8000a20:	f000 ffa6 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x150>)
 8000a3e:	f000 ff97 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a5a:	f000 ff89 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a72:	f000 ff7d 	bl	8001970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40020800 	.word	0x40020800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <HAL_ETH_MspInit+0x174>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80a4 	bne.w	8000c58 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd4:	2332      	movs	r3, #50	; 0x32
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <HAL_ETH_MspInit+0x17c>)
 8000bf0:	f000 febe 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf4:	2386      	movs	r3, #134	; 0x86
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <HAL_ETH_MspInit+0x180>)
 8000c10:	f000 feae 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000c32:	f000 fe9d 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c48:	230b      	movs	r3, #11
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000c54:	f000 fe8c 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3738      	adds	r7, #56	; 0x38
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40028000 	.word	0x40028000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40021800 	.word	0x40021800

08000c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_I2C_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <HAL_I2C_MspInit+0x8c>)
 8000cd4:	f000 fe4c 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_I2C_MspInit+0x88>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12c      	bne.n	8000d84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d74:	2307      	movs	r3, #7
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_UART_MspInit+0x8c>)
 8000d80:	f000 fdf6 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40004800 	.word	0x40004800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db8:	d13f      	bne.n	8000e3a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de8:	230a      	movs	r3, #10
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <HAL_PCD_MspInit+0xb0>)
 8000df4:	f000 fdbc 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <HAL_PCD_MspInit+0xb0>)
 8000e0e:	f000 fdaf 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_PCD_MspInit+0xac>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f918 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	605a      	str	r2, [r3, #4]
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_isatty>:

int _isatty(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f003 fb76 	bl	8004664 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20030000 	.word	0x20030000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000860 	.word	0x20000860
 8000fac:	20000878 	.word	0x20000878

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff0:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffe:	f7ff ffd7 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f003 fb35 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fad9 	bl	80005bc <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800100c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001018:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 800101c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001020:	20000878 	.word	0x20000878

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f931 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fd1e 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f93b 	bl	8001306 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f911 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000864 	.word	0x20000864

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000864 	.word	0x20000864

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff47 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff5c 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffb0 	bl	8001274 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06c      	b.n	800140c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2223      	movs	r2, #35	; 0x23
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fbd1 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_ETH_Init+0xf4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_ETH_Init+0xf8>)
 800136c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001370:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4927      	ldr	r1, [pc, #156]	; (8001418 <HAL_ETH_Init+0xf8>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001382:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800139a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff feaa 	bl	80010f4 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a2:	e011      	b.n	80013c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a4:	f7ff fea6 	bl	80010f4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b2:	d909      	bls.n	80013c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	22e0      	movs	r2, #224	; 0xe0
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1e4      	bne.n	80013a4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f958 	bl	8001690 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f9ff 	bl	80017e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa55 	bl	8001896 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f9bd 	bl	8001774 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2210      	movs	r2, #16
 8001406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800

0800141c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4b51      	ldr	r3, [pc, #324]	; (8001578 <ETH_SetMACConfig+0x15c>)
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <ETH_SetMACConfig+0x28>
 800143e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001442:	e000      	b.n	8001446 <ETH_SetMACConfig+0x2a>
 8001444:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7c5b      	ldrb	r3, [r3, #17]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <ETH_SetMACConfig+0x38>
 800144e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001452:	e000      	b.n	8001456 <ETH_SetMACConfig+0x3a>
 8001454:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001456:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800145c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7fdb      	ldrb	r3, [r3, #31]
 8001462:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001464:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800146a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	7f92      	ldrb	r2, [r2, #30]
 8001470:	2a00      	cmp	r2, #0
 8001472:	d102      	bne.n	800147a <ETH_SetMACConfig+0x5e>
 8001474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001478:	e000      	b.n	800147c <ETH_SetMACConfig+0x60>
 800147a:	2200      	movs	r2, #0
                        macconf->Speed |
 800147c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
 8001482:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001484:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800148a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f892 2020 	ldrb.w	r2, [r2, #32]
 800149a:	2a00      	cmp	r2, #0
 800149c:	d102      	bne.n	80014a4 <ETH_SetMACConfig+0x88>
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	e000      	b.n	80014a6 <ETH_SetMACConfig+0x8a>
 80014a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	7bdb      	ldrb	r3, [r3, #15]
 80014ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014be:	4313      	orrs	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff fe18 	bl	800110c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001502:	2a00      	cmp	r2, #0
 8001504:	d101      	bne.n	800150a <ETH_SetMACConfig+0xee>
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	e000      	b.n	800150c <ETH_SetMACConfig+0xf0>
 800150a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800150c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001512:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800151a:	2a01      	cmp	r2, #1
 800151c:	d101      	bne.n	8001522 <ETH_SetMACConfig+0x106>
 800151e:	2208      	movs	r2, #8
 8001520:	e000      	b.n	8001524 <ETH_SetMACConfig+0x108>
 8001522:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001524:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800152c:	2a01      	cmp	r2, #1
 800152e:	d101      	bne.n	8001534 <ETH_SetMACConfig+0x118>
 8001530:	2204      	movs	r2, #4
 8001532:	e000      	b.n	8001536 <ETH_SetMACConfig+0x11a>
 8001534:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001536:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800153e:	2a01      	cmp	r2, #1
 8001540:	d101      	bne.n	8001546 <ETH_SetMACConfig+0x12a>
 8001542:	2202      	movs	r2, #2
 8001544:	e000      	b.n	8001548 <ETH_SetMACConfig+0x12c>
 8001546:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001548:	4313      	orrs	r3, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fdd3 	bl	800110c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	ff20810f 	.word	0xff20810f

0800157c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4b3d      	ldr	r3, [pc, #244]	; (800168c <ETH_SetDMAConfig+0x110>)
 8001596:	4013      	ands	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <ETH_SetDMAConfig+0x2c>
 80015a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a6:	e000      	b.n	80015aa <ETH_SetDMAConfig+0x2e>
 80015a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7b5b      	ldrb	r3, [r3, #13]
 80015ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	7f52      	ldrb	r2, [r2, #29]
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d102      	bne.n	80015c0 <ETH_SetDMAConfig+0x44>
 80015ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015be:	e000      	b.n	80015c2 <ETH_SetDMAConfig+0x46>
 80015c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7b9b      	ldrb	r3, [r3, #14]
 80015c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	7f1b      	ldrb	r3, [r3, #28]
 80015d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7f9b      	ldrb	r3, [r3, #30]
 80015de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001600:	461a      	mov	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fd7a 	bl	800110c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	461a      	mov	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001630:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001636:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800163c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001644:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001646:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800164e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001654:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800165e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001662:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fd4b 	bl	800110c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	f8de3f23 	.word	0xf8de3f23

08001690 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0a6      	sub	sp, #152	; 0x98
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016cc:	2300      	movs	r3, #0
 80016ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe86 	bl	800141c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001710:	2301      	movs	r3, #1
 8001712:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800171e:	2301      	movs	r3, #1
 8001720:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800173c:	2301      	movs	r3, #1
 800173e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff08 	bl	800157c <ETH_SetDMAConfig>
}
 800176c:	bf00      	nop
 800176e:	3798      	adds	r7, #152	; 0x98
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3305      	adds	r3, #5
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	3204      	adds	r2, #4
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <ETH_MACAddressConfig+0x68>)
 8001796:	4413      	add	r3, r2
 8001798:	461a      	mov	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3303      	adds	r3, #3
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	061a      	lsls	r2, r3, #24
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3302      	adds	r3, #2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <ETH_MACAddressConfig+0x6c>)
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40028040 	.word	0x40028040
 80017e0:	40028044 	.word	0x40028044

080017e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e03e      	b.n	8001870 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	3206      	adds	r2, #6
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d80c      	bhi.n	8001854 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68d9      	ldr	r1, [r3, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	461a      	mov	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	e004      	b.n	800185e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3301      	adds	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d9bd      	bls.n	80017f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e046      	b.n	8001932 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6919      	ldr	r1, [r3, #16]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	3212      	adds	r2, #18
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d80c      	bhi.n	8001922 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	e004      	b.n	800192c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	461a      	mov	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d9b5      	bls.n	80018a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	60da      	str	r2, [r3, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e177      	b.n	8001c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8166 	bne.w	8001c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80c0 	beq.w	8001c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a61      	ldr	r2, [pc, #388]	; (8001c98 <HAL_GPIO_Init+0x328>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_GPIO_Init+0x32c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d037      	beq.n	8001bae <HAL_GPIO_Init+0x23e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_GPIO_Init+0x330>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_GPIO_Init+0x23a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x334>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_GPIO_Init+0x236>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a55      	ldr	r2, [pc, #340]	; (8001ca8 <HAL_GPIO_Init+0x338>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x232>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a54      	ldr	r2, [pc, #336]	; (8001cac <HAL_GPIO_Init+0x33c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x22e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <HAL_GPIO_Init+0x340>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x22a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_GPIO_Init+0x344>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x226>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_GPIO_Init+0x348>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x222>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <HAL_GPIO_Init+0x34c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x21e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_GPIO_Init+0x350>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x21a>
 8001b86:	2309      	movs	r3, #9
 8001b88:	e012      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	e010      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b8e:	2308      	movs	r3, #8
 8001b90:	e00e      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b92:	2307      	movs	r3, #7
 8001b94:	e00c      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00a      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x240>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc0:	4935      	ldr	r1, [pc, #212]	; (8001c98 <HAL_GPIO_Init+0x328>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_GPIO_Init+0x354>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	f67f ae84 	bls.w	800198c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020c00 	.word	0x40020c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40021400 	.word	0x40021400
 8001cb4:	40021800 	.word	0x40021800
 8001cb8:	40021c00 	.word	0x40021c00
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40022400 	.word	0x40022400
 8001cc4:	40013c00 	.word	0x40013c00

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e12b      	b.n	8001f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe ffa8 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2224      	movs	r2, #36	; 0x24
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d60:	f001 fd94 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8001d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a81      	ldr	r2, [pc, #516]	; (8001f70 <HAL_I2C_Init+0x274>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d807      	bhi.n	8001d80 <HAL_I2C_Init+0x84>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a80      	ldr	r2, [pc, #512]	; (8001f74 <HAL_I2C_Init+0x278>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e006      	b.n	8001d8e <HAL_I2C_Init+0x92>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a7d      	ldr	r2, [pc, #500]	; (8001f78 <HAL_I2C_Init+0x27c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0e7      	b.n	8001f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <HAL_I2C_Init+0x280>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9b      	lsrs	r3, r3, #18
 8001da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_I2C_Init+0x274>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_I2C_Init+0xd4>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	e009      	b.n	8001de4 <HAL_I2C_Init+0xe8>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <HAL_I2C_Init+0x284>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	3301      	adds	r3, #1
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	495c      	ldr	r1, [pc, #368]	; (8001f70 <HAL_I2C_Init+0x274>)
 8001e00:	428b      	cmp	r3, r1
 8001e02:	d819      	bhi.n	8001e38 <HAL_I2C_Init+0x13c>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e59      	subs	r1, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e12:	1c59      	adds	r1, r3, #1
 8001e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e18:	400b      	ands	r3, r1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_I2C_Init+0x138>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	e051      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e04f      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d111      	bne.n	8001e64 <HAL_I2C_Init+0x168>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e012      	b.n	8001e8a <HAL_I2C_Init+0x18e>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Init+0x196>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e022      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <HAL_I2C_Init+0x1bc>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e58      	subs	r0, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	440b      	add	r3, r1
 8001ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb6:	e00f      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	0099      	lsls	r1, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6809      	ldr	r1, [r1, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6911      	ldr	r1, [r2, #16]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	000186a0 	.word	0x000186a0
 8001f74:	001e847f 	.word	0x001e847f
 8001f78:	003d08ff 	.word	0x003d08ff
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9e:	f7ff f8a9 	bl	80010f4 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	f040 80d9 	bne.w	8002164 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2319      	movs	r3, #25
 8001fb8:	2201      	movs	r2, #1
 8001fba:	496d      	ldr	r1, [pc, #436]	; (8002170 <HAL_I2C_Mem_Write+0x1ec>)
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fc7f 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0cc      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Mem_Write+0x56>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0c5      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d007      	beq.n	8002000 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a4d      	ldr	r2, [pc, #308]	; (8002174 <HAL_I2C_Mem_Write+0x1f0>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002042:	88f8      	ldrh	r0, [r7, #6]
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4603      	mov	r3, r0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fab6 	bl	80025c4 <I2C_RequestMemoryWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d052      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e081      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fd00 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b04      	cmp	r3, #4
 8002078:	d107      	bne.n	800208a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_I2C_Mem_Write+0x180>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1aa      	bne.n	8002062 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fcec 	bl	8002aee <I2C_WaitOnBTFFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	2b04      	cmp	r3, #4
 8002122:	d107      	bne.n	8002134 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e016      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	00100002 	.word	0x00100002
 8002174:	ffff0000 	.word	0xffff0000

08002178 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002192:	f7fe ffaf 	bl	80010f4 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f040 8208 	bne.w	80025b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2319      	movs	r3, #25
 80021ac:	2201      	movs	r2, #1
 80021ae:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_I2C_Mem_Read+0x224>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fb85 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
 80021be:	e1fb      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Mem_Read+0x56>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e1f4      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2222      	movs	r2, #34	; 0x22
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_I2C_Mem_Read+0x228>)
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002236:	88f8      	ldrh	r0, [r7, #6]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	8979      	ldrh	r1, [r7, #10]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4603      	mov	r3, r0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa52 	bl	80026f0 <I2C_RequestMemoryRead>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1b0      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d113      	bne.n	8002286 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e184      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	2b01      	cmp	r3, #1
 800228c:	d11b      	bne.n	80022c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e164      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d11b      	bne.n	8002306 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	e144      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800231c:	e138      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b03      	cmp	r3, #3
 8002324:	f200 80f1 	bhi.w	800250a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b01      	cmp	r3, #1
 800232e:	d123      	bne.n	8002378 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fc1b 	bl	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e139      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002376:	e10b      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b02      	cmp	r3, #2
 800237e:	d14e      	bne.n	800241e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002386:	2200      	movs	r2, #0
 8002388:	4906      	ldr	r1, [pc, #24]	; (80023a4 <HAL_I2C_Mem_Read+0x22c>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa98 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e10e      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
 800239a:	bf00      	nop
 800239c:	00100002 	.word	0x00100002
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800241c:	e0b8      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	2200      	movs	r2, #0
 8002426:	4966      	ldr	r1, [pc, #408]	; (80025c0 <HAL_I2C_Mem_Read+0x448>)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa49 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0bf      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	2200      	movs	r2, #0
 8002482:	494f      	ldr	r1, [pc, #316]	; (80025c0 <HAL_I2C_Mem_Read+0x448>)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fa1b 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e091      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002508:	e042      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb2e 	bl	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e04c      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d118      	bne.n	8002590 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f aec2 	bne.w	800231e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	00010004 	.word	0x00010004

080025c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f960 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d103      	bne.n	800261e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e05f      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	492d      	ldr	r1, [pc, #180]	; (80026ec <I2C_RequestMemoryWrite+0x128>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f998 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e04c      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa02 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e02b      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e021      	b.n	80026e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9dc 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e005      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d6:	893b      	ldrh	r3, [r7, #8]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	00010002 	.word	0x00010002

080026f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	460b      	mov	r3, r1
 8002704:	813b      	strh	r3, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2200      	movs	r2, #0
 8002732:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8c2 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002750:	d103      	bne.n	800275a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0aa      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800276c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	4952      	ldr	r1, [pc, #328]	; (80028bc <I2C_RequestMemoryRead+0x1cc>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f8fa 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e097      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f964 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d107      	bne.n	80027c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e076      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027cc:	893b      	ldrh	r3, [r7, #8]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	e021      	b.n	800281c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	6a39      	ldr	r1, [r7, #32]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f93e 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d107      	bne.n	800280e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e050      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002812:	893b      	ldrh	r3, [r7, #8]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	6a39      	ldr	r1, [r7, #32]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f923 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b04      	cmp	r3, #4
 8002832:	d107      	bne.n	8002844 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e035      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2200      	movs	r2, #0
 8002860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f82b 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d103      	bne.n	8002888 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e013      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800288c:	897b      	ldrh	r3, [r7, #10]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	6a3a      	ldr	r2, [r7, #32]
 80028a0:	4906      	ldr	r1, [pc, #24]	; (80028bc <I2C_RequestMemoryRead+0x1cc>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f863 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00010002 	.word	0x00010002

080028c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d0:	e025      	b.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d021      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028da:	f7fe fc0b 	bl	80010f4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e023      	b.n	8002966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10d      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	e00c      	b.n	800295e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d0b6      	beq.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297c:	e051      	b.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298c:	d123      	bne.n	80029d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e046      	b.n	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d021      	beq.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe fb89 	bl	80010f4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e020      	b.n	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e00b      	b.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d18d      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a78:	e02d      	b.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8ce 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e02d      	b.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d021      	beq.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fb2f 	bl	80010f4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d116      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d1ca      	bne.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afa:	e02d      	b.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f88d 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e02d      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d021      	beq.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b14:	f7fe faee 	bl	80010f4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d302      	bcc.n	8002b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d1ca      	bne.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b7c:	e042      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d119      	bne.n	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0210 	mvn.w	r2, #16
 8002b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e029      	b.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7fe fa98 	bl	80010f4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e007      	b.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d1b5      	bne.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d11b      	bne.n	8002c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d129      	bne.n	8002ce4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0210 	bic.w	r2, r2, #16
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d12a      	bne.n	8002d62 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	89fa      	ldrh	r2, [r7, #14]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	b08f      	sub	sp, #60	; 0x3c
 8002d74:	af0a      	add	r7, sp, #40	; 0x28
 8002d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e10f      	b.n	8002fa2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd fffb 	bl	8000d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2203      	movs	r2, #3
 8002da6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f9ae 	bl	8004122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	687e      	ldr	r6, [r7, #4]
 8002dce:	466d      	mov	r5, sp
 8002dd0:	f106 0410 	add.w	r4, r6, #16
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de4:	1d33      	adds	r3, r6, #4
 8002de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de8:	6838      	ldr	r0, [r7, #0]
 8002dea:	f001 f939 	bl	8004060 <USB_CoreInit>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0d0      	b.n	8002fa2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f99c 	bl	8004144 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	e04a      	b.n	8002ea8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	333d      	adds	r3, #61	; 0x3d
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	333c      	adds	r3, #60	; 0x3c
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	b298      	uxth	r0, r3
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	; 0x44
 8002e4e:	4602      	mov	r2, r0
 8002e50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3340      	adds	r3, #64	; 0x40
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3348      	adds	r3, #72	; 0x48
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	; 0x4c
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3354      	adds	r3, #84	; 0x54
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d3af      	bcc.n	8002e12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e044      	b.n	8002f42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3b5      	bcc.n	8002eb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	687e      	ldr	r6, [r7, #4]
 8002f54:	466d      	mov	r5, sp
 8002f56:	f106 0410 	add.w	r4, r6, #16
 8002f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f66:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f6a:	1d33      	adds	r3, r6, #4
 8002f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	f001 f934 	bl	80041dc <USB_DevInit>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 faff 	bl	800459e <USB_DevDisconnect>

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e267      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e242      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe f846 	bl	80010f4 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe f842 	bl	80010f4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e207      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe f832 	bl	80010f4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe f82e 	bl	80010f4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f3      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c7      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fd ffe7 	bl	80010f4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7fd ffe3 	bl	80010f4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a8      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fd ffc6 	bl	80010f4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7fd ffc2 	bl	80010f4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e187      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fd ffa6 	bl	80010f4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fd ffa2 	bl	80010f4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e167      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e01b      	b.n	8003204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fd ff8f 	bl	80010f4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7fd ff8b 	bl	80010f4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e150      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470000 	.word	0x42470000
 80031f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8097 	beq.w	8003340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fd ff4b 	bl	80010f4 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd ff47 	bl	80010f4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e10c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ea>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x30c>
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd ff0c 	bl	80010f4 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fd ff08 	bl	80010f4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCC_OscConfig+0x334>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fd fef6 	bl	80010f4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fd fef2 	bl	80010f4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b5      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a1 	beq.w	800348c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d05c      	beq.n	8003410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d141      	bne.n	80033e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fec6 	bl	80010f4 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd fec2 	bl	80010f4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fd fe9b 	bl	80010f4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fd fe97 	bl	80010f4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x416>
 80033e0:	e054      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fe84 	bl	80010f4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd fe80 	bl	80010f4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
 800340e:	e03d      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e038      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fd fdb2 	bl	80010f4 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fd fdae 	bl	80010f4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fd12 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	08005624 	.word	0x08005624
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b094      	sub	sp, #80	; 0x50
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	2300      	movs	r3, #0
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003678:	2300      	movs	r3, #0
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b79      	ldr	r3, [pc, #484]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80e1 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e0db      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036a0:	e0db      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_GetSysClockFreq+0x208>)
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a6:	e0d8      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	0159      	lsls	r1, r3, #5
 80036e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ec:	0150      	lsls	r0, r2, #5
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4621      	mov	r1, r4
 80036f4:	1a51      	subs	r1, r2, r1
 80036f6:	6139      	str	r1, [r7, #16]
 80036f8:	4629      	mov	r1, r5
 80036fa:	eb63 0301 	sbc.w	r3, r3, r1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800370c:	4659      	mov	r1, fp
 800370e:	018b      	lsls	r3, r1, #6
 8003710:	4651      	mov	r1, sl
 8003712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003716:	4651      	mov	r1, sl
 8003718:	018a      	lsls	r2, r1, #6
 800371a:	4651      	mov	r1, sl
 800371c:	ebb2 0801 	subs.w	r8, r2, r1
 8003720:	4659      	mov	r1, fp
 8003722:	eb63 0901 	sbc.w	r9, r3, r1
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800373a:	4690      	mov	r8, r2
 800373c:	4699      	mov	r9, r3
 800373e:	4623      	mov	r3, r4
 8003740:	eb18 0303 	adds.w	r3, r8, r3
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	462b      	mov	r3, r5
 8003748:	eb49 0303 	adc.w	r3, r9, r3
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800375a:	4629      	mov	r1, r5
 800375c:	024b      	lsls	r3, r1, #9
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003764:	4621      	mov	r1, r4
 8003766:	024a      	lsls	r2, r1, #9
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	2200      	movs	r2, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003778:	f7fc fd8a 	bl	8000290 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	e058      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	099b      	lsrs	r3, r3, #6
 800378c:	2200      	movs	r2, #0
 800378e:	4618      	mov	r0, r3
 8003790:	4611      	mov	r1, r2
 8003792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b2:	0150      	lsls	r0, r2, #5
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4641      	mov	r1, r8
 80037ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037d8:	ebb2 040a 	subs.w	r4, r2, sl
 80037dc:	eb63 050b 	sbc.w	r5, r3, fp
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	00eb      	lsls	r3, r5, #3
 80037ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ee:	00e2      	lsls	r2, r4, #3
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	18e3      	adds	r3, r4, r3
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb45 0303 	adc.w	r3, r5, r3
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800380e:	4629      	mov	r1, r5
 8003810:	028b      	lsls	r3, r1, #10
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003818:	4621      	mov	r1, r4
 800381a:	028a      	lsls	r2, r1, #10
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	61fa      	str	r2, [r7, #28]
 8003828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382c:	f7fc fd30 	bl	8000290 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800385c:	4618      	mov	r0, r3
 800385e:	3750      	adds	r7, #80	; 0x50
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08005634 	.word	0x08005634

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08005634 	.word	0x08005634

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fa00 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f929 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af02      	add	r7, sp, #8
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	d17c      	bne.n	8003a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Transmit+0x2c>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e075      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x3e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e06e      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2221      	movs	r2, #33	; 0x21
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ca:	f7fd fb93 	bl	80010f4 <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a08:	e02a      	b.n	8003a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f840 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e007      	b.n	8003a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1cf      	bne.n	8003a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f810 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e006      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b090      	sub	sp, #64	; 0x40
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e050      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d04c      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	f7fd fb1b 	bl	80010f4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d241      	bcs.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aea:	637a      	str	r2, [r7, #52]	; 0x34
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b1e:	623a      	str	r2, [r7, #32]
 8003b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	69f9      	ldr	r1, [r7, #28]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e00f      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d09f      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3740      	adds	r7, #64	; 0x40
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b0c0      	sub	sp, #256	; 0x100
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	68d9      	ldr	r1, [r3, #12]
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bd0:	f021 010c 	bic.w	r1, r1, #12
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bde:	430b      	orrs	r3, r1
 8003be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	6999      	ldr	r1, [r3, #24]
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	ea40 0301 	orr.w	r3, r0, r1
 8003bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <UART_SetConfig+0xa0>
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <UART_SetConfig+0x2d0>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d104      	bne.n	8003c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff fe4c 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c20:	e003      	b.n	8003c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f7ff fe33 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8003c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	f040 810c 	bne.w	8003e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c52:	415b      	adcs	r3, r3
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	eb12 0801 	adds.w	r8, r2, r1
 8003c60:	4629      	mov	r1, r5
 8003c62:	eb43 0901 	adc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb49 0303 	adc.w	r3, r9, r3
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	18db      	adds	r3, r3, r3
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
 8003cac:	4613      	mov	r3, r2
 8003cae:	eb42 0303 	adc.w	r3, r2, r3
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cbc:	f7fc fae8 	bl	8000290 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	011c      	lsls	r4, r3, #4
 8003cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d10:	4692      	mov	sl, r2
 8003d12:	469b      	mov	fp, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	eb1a 0303 	adds.w	r3, sl, r3
 8003d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	eb4b 0303 	adc.w	r3, fp, r3
 8003d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	18db      	adds	r3, r3, r3
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
 8003d42:	4613      	mov	r3, r2
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d52:	f7fc fa9d 	bl	8000290 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2264      	movs	r2, #100	; 0x64
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d74:	fba3 2302 	umull	r2, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d80:	441c      	add	r4, r3
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003da4:	4641      	mov	r1, r8
 8003da6:	1851      	adds	r1, r2, r1
 8003da8:	6339      	str	r1, [r7, #48]	; 0x30
 8003daa:	4649      	mov	r1, r9
 8003dac:	414b      	adcs	r3, r1
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd8:	464b      	mov	r3, r9
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003df8:	460b      	mov	r3, r1
 8003dfa:	18db      	adds	r3, r3, r3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	4613      	mov	r3, r2
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e0e:	f7fc fa3f 	bl	8000290 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4422      	add	r2, r4
 8003e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e40:	e105      	b.n	800404e <UART_SetConfig+0x4d6>
 8003e42:	bf00      	nop
 8003e44:	40011000 	.word	0x40011000
 8003e48:	40011400 	.word	0x40011400
 8003e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e62:	4642      	mov	r2, r8
 8003e64:	464b      	mov	r3, r9
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	6239      	str	r1, [r7, #32]
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e72:	4641      	mov	r1, r8
 8003e74:	1854      	adds	r4, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb43 0501 	adc.w	r5, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e98:	464b      	mov	r3, r9
 8003e9a:	eb45 0303 	adc.w	r3, r5, r3
 8003e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	008b      	lsls	r3, r1, #2
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec8:	4621      	mov	r1, r4
 8003eca:	008a      	lsls	r2, r1, #2
 8003ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ed0:	f7fc f9de 	bl	8000290 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4b60      	ldr	r3, [pc, #384]	; (800405c <UART_SetConfig+0x4e4>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	011c      	lsls	r4, r3, #4
 8003ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	61b9      	str	r1, [r7, #24]
 8003efc:	415b      	adcs	r3, r3
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f04:	4641      	mov	r1, r8
 8003f06:	1851      	adds	r1, r2, r1
 8003f08:	6139      	str	r1, [r7, #16]
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f26:	4651      	mov	r1, sl
 8003f28:	00ca      	lsls	r2, r1, #3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4642      	mov	r2, r8
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	008b      	lsls	r3, r1, #2
 8003f60:	4641      	mov	r1, r8
 8003f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f66:	4641      	mov	r1, r8
 8003f68:	008a      	lsls	r2, r1, #2
 8003f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f6e:	f7fc f98f 	bl	8000290 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <UART_SetConfig+0x4e4>)
 8003f78:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	2164      	movs	r1, #100	; 0x64
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	3332      	adds	r3, #50	; 0x32
 8003f8a:	4a34      	ldr	r2, [pc, #208]	; (800405c <UART_SetConfig+0x4e4>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f96:	441c      	add	r4, r3
 8003f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8003fa2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	464b      	mov	r3, r9
 8003faa:	1891      	adds	r1, r2, r2
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	415b      	adcs	r3, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	1851      	adds	r1, r2, r1
 8003fba:	6039      	str	r1, [r7, #0]
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	414b      	adcs	r3, r1
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fce:	4659      	mov	r1, fp
 8003fd0:	00cb      	lsls	r3, r1, #3
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd8:	4651      	mov	r1, sl
 8003fda:	00ca      	lsls	r2, r1, #3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	189b      	adds	r3, r3, r2
 8003fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe8:	464b      	mov	r3, r9
 8003fea:	460a      	mov	r2, r1
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800400a:	4649      	mov	r1, r9
 800400c:	008b      	lsls	r3, r1, #2
 800400e:	4641      	mov	r1, r8
 8004010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004014:	4641      	mov	r1, r8
 8004016:	008a      	lsls	r2, r1, #2
 8004018:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800401c:	f7fc f938 	bl	8000290 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <UART_SetConfig+0x4e4>)
 8004026:	fba3 1302 	umull	r1, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2164      	movs	r1, #100	; 0x64
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	3332      	adds	r3, #50	; 0x32
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <UART_SetConfig+0x4e4>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4422      	add	r2, r4
 800404c:	609a      	str	r2, [r3, #8]
}
 800404e:	bf00      	nop
 8004050:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	51eb851f 	.word	0x51eb851f

08004060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004060:	b084      	sub	sp, #16
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	f107 001c 	add.w	r0, r7, #28
 800406e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2b01      	cmp	r3, #1
 8004076:	d122      	bne.n	80040be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 faa2 	bl	80045fc <USB_CoreReset>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e01a      	b.n	80040f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa96 	bl	80045fc <USB_CoreReset>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
 80040e6:	e005      	b.n	80040f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10b      	bne.n	8004112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f043 0206 	orr.w	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800411e:	b004      	add	sp, #16
 8004120:	4770      	bx	lr

08004122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d115      	bne.n	8004192 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004172:	2001      	movs	r0, #1
 8004174:	f7fc ffca 	bl	800110c <HAL_Delay>
      ms++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa2e 	bl	80045e0 <USB_GetMode>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d01e      	beq.n	80041c8 <USB_SetCurrentMode+0x84>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b31      	cmp	r3, #49	; 0x31
 800418e:	d9f0      	bls.n	8004172 <USB_SetCurrentMode+0x2e>
 8004190:	e01a      	b.n	80041c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d115      	bne.n	80041c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7fc ffb1 	bl	800110c <HAL_Delay>
      ms++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa15 	bl	80045e0 <USB_GetMode>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <USB_SetCurrentMode+0x84>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b31      	cmp	r3, #49	; 0x31
 80041c0:	d9f0      	bls.n	80041a4 <USB_SetCurrentMode+0x60>
 80041c2:	e001      	b.n	80041c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e005      	b.n	80041d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b32      	cmp	r3, #50	; 0x32
 80041cc:	d101      	bne.n	80041d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041dc:	b084      	sub	sp, #16
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	e009      	b.n	8004210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3340      	adds	r3, #64	; 0x40
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3301      	adds	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0e      	cmp	r3, #14
 8004214:	d9f2      	bls.n	80041fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11c      	bne.n	8004256 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
 8004254:	e00b      	b.n	800426e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004274:	461a      	mov	r2, r3
 8004276:	2300      	movs	r3, #0
 8004278:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	4619      	mov	r1, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	461a      	mov	r2, r3
 800428a:	680b      	ldr	r3, [r1, #0]
 800428c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	2b01      	cmp	r3, #1
 8004292:	d10c      	bne.n	80042ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800429a:	2100      	movs	r1, #0
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f965 	bl	800456c <USB_SetDevSpeed>
 80042a2:	e008      	b.n	80042b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042a4:	2101      	movs	r1, #1
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f960 	bl	800456c <USB_SetDevSpeed>
 80042ac:	e003      	b.n	80042b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ae:	2103      	movs	r1, #3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f95b 	bl	800456c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042b6:	2110      	movs	r1, #16
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8f3 	bl	80044a4 <USB_FlushTxFifo>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f91f 	bl	800450c <USB_FlushRxFifo>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	461a      	mov	r2, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e043      	b.n	800438a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004318:	d118      	bne.n	800434c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e013      	b.n	800435e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e008      	b.n	800435e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004382:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	3301      	adds	r3, #1
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3b7      	bcc.n	8004302 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	e043      	b.n	8004420 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ae:	d118      	bne.n	80043e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e013      	b.n	80043f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e008      	b.n	80043f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	461a      	mov	r2, r3
 8004402:	2300      	movs	r3, #0
 8004404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	3301      	adds	r3, #1
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d3b7      	bcc.n	8004398 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0210 	orr.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <USB_DevInit+0x2c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800447a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004490:	7dfb      	ldrb	r3, [r7, #23]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800449c:	b004      	add	sp, #16
 800449e:	4770      	bx	lr
 80044a0:	803c3800 	.word	0x803c3800

080044a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <USB_FlushTxFifo+0x64>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e01b      	b.n	80044fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	daf2      	bge.n	80044b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	019b      	lsls	r3, r3, #6
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <USB_FlushTxFifo+0x64>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e006      	b.n	80044fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d0f0      	beq.n	80044dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	00030d40 	.word	0x00030d40

0800450c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <USB_FlushRxFifo+0x5c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e018      	b.n	800455c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	daf2      	bge.n	8004518 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2210      	movs	r2, #16
 800453a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3301      	adds	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a08      	ldr	r2, [pc, #32]	; (8004568 <USB_FlushRxFifo+0x5c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e006      	b.n	800455c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d0f0      	beq.n	800453c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	00030d40 	.word	0x00030d40

0800456c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045b8:	f023 0303 	bic.w	r3, r3, #3
 80045bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a13      	ldr	r2, [pc, #76]	; (8004660 <USB_CoreReset+0x64>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e01b      	b.n	8004652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	daf2      	bge.n	8004608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <USB_CoreReset+0x64>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e006      	b.n	8004652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d0f0      	beq.n	8004632 <USB_CoreReset+0x36>

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	00030d40 	.word	0x00030d40

08004664 <__errno>:
 8004664:	4b01      	ldr	r3, [pc, #4]	; (800466c <__errno+0x8>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4d0d      	ldr	r5, [pc, #52]	; (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2600      	movs	r6, #0
 800467c:	42a6      	cmp	r6, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4d0b      	ldr	r5, [pc, #44]	; (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x44>)
 8004684:	f000 ffae 	bl	80055e4 <_init>
 8004688:	1b64      	subs	r4, r4, r5
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2600      	movs	r6, #0
 800468e:	42a6      	cmp	r6, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f855 3b04 	ldr.w	r3, [r5], #4
 8004698:	4798      	blx	r3
 800469a:	3601      	adds	r6, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a2:	4798      	blx	r3
 80046a4:	3601      	adds	r6, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	080056dc 	.word	0x080056dc
 80046ac:	080056dc 	.word	0x080056dc
 80046b0:	080056dc 	.word	0x080056dc
 80046b4:	080056e0 	.word	0x080056e0

080046b8 <memset>:
 80046b8:	4402      	add	r2, r0
 80046ba:	4603      	mov	r3, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <iprintf>:
 80046c8:	b40f      	push	{r0, r1, r2, r3}
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <iprintf+0x2c>)
 80046cc:	b513      	push	{r0, r1, r4, lr}
 80046ce:	681c      	ldr	r4, [r3, #0]
 80046d0:	b124      	cbz	r4, 80046dc <iprintf+0x14>
 80046d2:	69a3      	ldr	r3, [r4, #24]
 80046d4:	b913      	cbnz	r3, 80046dc <iprintf+0x14>
 80046d6:	4620      	mov	r0, r4
 80046d8:	f000 f866 	bl	80047a8 <__sinit>
 80046dc:	ab05      	add	r3, sp, #20
 80046de:	9a04      	ldr	r2, [sp, #16]
 80046e0:	68a1      	ldr	r1, [r4, #8]
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 f9bd 	bl	8004a64 <_vfiprintf_r>
 80046ea:	b002      	add	sp, #8
 80046ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f0:	b004      	add	sp, #16
 80046f2:	4770      	bx	lr
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <std>:
 80046f8:	2300      	movs	r3, #0
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004706:	6083      	str	r3, [r0, #8]
 8004708:	8181      	strh	r1, [r0, #12]
 800470a:	6643      	str	r3, [r0, #100]	; 0x64
 800470c:	81c2      	strh	r2, [r0, #14]
 800470e:	6183      	str	r3, [r0, #24]
 8004710:	4619      	mov	r1, r3
 8004712:	2208      	movs	r2, #8
 8004714:	305c      	adds	r0, #92	; 0x5c
 8004716:	f7ff ffcf 	bl	80046b8 <memset>
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <std+0x38>)
 800471c:	6263      	str	r3, [r4, #36]	; 0x24
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <std+0x3c>)
 8004720:	62a3      	str	r3, [r4, #40]	; 0x28
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <std+0x40>)
 8004724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <std+0x44>)
 8004728:	6224      	str	r4, [r4, #32]
 800472a:	6323      	str	r3, [r4, #48]	; 0x30
 800472c:	bd10      	pop	{r4, pc}
 800472e:	bf00      	nop
 8004730:	0800500d 	.word	0x0800500d
 8004734:	0800502f 	.word	0x0800502f
 8004738:	08005067 	.word	0x08005067
 800473c:	0800508b 	.word	0x0800508b

08004740 <_cleanup_r>:
 8004740:	4901      	ldr	r1, [pc, #4]	; (8004748 <_cleanup_r+0x8>)
 8004742:	f000 b8af 	b.w	80048a4 <_fwalk_reent>
 8004746:	bf00      	nop
 8004748:	08005365 	.word	0x08005365

0800474c <__sfmoreglue>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2268      	movs	r2, #104	; 0x68
 8004750:	1e4d      	subs	r5, r1, #1
 8004752:	4355      	muls	r5, r2
 8004754:	460e      	mov	r6, r1
 8004756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800475a:	f000 f8e5 	bl	8004928 <_malloc_r>
 800475e:	4604      	mov	r4, r0
 8004760:	b140      	cbz	r0, 8004774 <__sfmoreglue+0x28>
 8004762:	2100      	movs	r1, #0
 8004764:	e9c0 1600 	strd	r1, r6, [r0]
 8004768:	300c      	adds	r0, #12
 800476a:	60a0      	str	r0, [r4, #8]
 800476c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004770:	f7ff ffa2 	bl	80046b8 <memset>
 8004774:	4620      	mov	r0, r4
 8004776:	bd70      	pop	{r4, r5, r6, pc}

08004778 <__sfp_lock_acquire>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__sfp_lock_acquire+0x8>)
 800477a:	f000 b8b3 	b.w	80048e4 <__retarget_lock_acquire_recursive>
 800477e:	bf00      	nop
 8004780:	20000869 	.word	0x20000869

08004784 <__sfp_lock_release>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__sfp_lock_release+0x8>)
 8004786:	f000 b8ae 	b.w	80048e6 <__retarget_lock_release_recursive>
 800478a:	bf00      	nop
 800478c:	20000869 	.word	0x20000869

08004790 <__sinit_lock_acquire>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__sinit_lock_acquire+0x8>)
 8004792:	f000 b8a7 	b.w	80048e4 <__retarget_lock_acquire_recursive>
 8004796:	bf00      	nop
 8004798:	2000086a 	.word	0x2000086a

0800479c <__sinit_lock_release>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__sinit_lock_release+0x8>)
 800479e:	f000 b8a2 	b.w	80048e6 <__retarget_lock_release_recursive>
 80047a2:	bf00      	nop
 80047a4:	2000086a 	.word	0x2000086a

080047a8 <__sinit>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	f7ff fff0 	bl	8004790 <__sinit_lock_acquire>
 80047b0:	69a3      	ldr	r3, [r4, #24]
 80047b2:	b11b      	cbz	r3, 80047bc <__sinit+0x14>
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b8:	f7ff bff0 	b.w	800479c <__sinit_lock_release>
 80047bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047c0:	6523      	str	r3, [r4, #80]	; 0x50
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <__sinit+0x68>)
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <__sinit+0x6c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	bf04      	itt	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	61a3      	streq	r3, [r4, #24]
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 f820 	bl	8004818 <__sfp>
 80047d8:	6060      	str	r0, [r4, #4]
 80047da:	4620      	mov	r0, r4
 80047dc:	f000 f81c 	bl	8004818 <__sfp>
 80047e0:	60a0      	str	r0, [r4, #8]
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f818 	bl	8004818 <__sfp>
 80047e8:	2200      	movs	r2, #0
 80047ea:	60e0      	str	r0, [r4, #12]
 80047ec:	2104      	movs	r1, #4
 80047ee:	6860      	ldr	r0, [r4, #4]
 80047f0:	f7ff ff82 	bl	80046f8 <std>
 80047f4:	68a0      	ldr	r0, [r4, #8]
 80047f6:	2201      	movs	r2, #1
 80047f8:	2109      	movs	r1, #9
 80047fa:	f7ff ff7d 	bl	80046f8 <std>
 80047fe:	68e0      	ldr	r0, [r4, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	2112      	movs	r1, #18
 8004804:	f7ff ff78 	bl	80046f8 <std>
 8004808:	2301      	movs	r3, #1
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	e7d2      	b.n	80047b4 <__sinit+0xc>
 800480e:	bf00      	nop
 8004810:	0800563c 	.word	0x0800563c
 8004814:	08004741 	.word	0x08004741

08004818 <__sfp>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	4607      	mov	r7, r0
 800481c:	f7ff ffac 	bl	8004778 <__sfp_lock_acquire>
 8004820:	4b1e      	ldr	r3, [pc, #120]	; (800489c <__sfp+0x84>)
 8004822:	681e      	ldr	r6, [r3, #0]
 8004824:	69b3      	ldr	r3, [r6, #24]
 8004826:	b913      	cbnz	r3, 800482e <__sfp+0x16>
 8004828:	4630      	mov	r0, r6
 800482a:	f7ff ffbd 	bl	80047a8 <__sinit>
 800482e:	3648      	adds	r6, #72	; 0x48
 8004830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004834:	3b01      	subs	r3, #1
 8004836:	d503      	bpl.n	8004840 <__sfp+0x28>
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	b30b      	cbz	r3, 8004880 <__sfp+0x68>
 800483c:	6836      	ldr	r6, [r6, #0]
 800483e:	e7f7      	b.n	8004830 <__sfp+0x18>
 8004840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004844:	b9d5      	cbnz	r5, 800487c <__sfp+0x64>
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <__sfp+0x88>)
 8004848:	60e3      	str	r3, [r4, #12]
 800484a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800484e:	6665      	str	r5, [r4, #100]	; 0x64
 8004850:	f000 f847 	bl	80048e2 <__retarget_lock_init_recursive>
 8004854:	f7ff ff96 	bl	8004784 <__sfp_lock_release>
 8004858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800485c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004860:	6025      	str	r5, [r4, #0]
 8004862:	61a5      	str	r5, [r4, #24]
 8004864:	2208      	movs	r2, #8
 8004866:	4629      	mov	r1, r5
 8004868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800486c:	f7ff ff24 	bl	80046b8 <memset>
 8004870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004878:	4620      	mov	r0, r4
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487c:	3468      	adds	r4, #104	; 0x68
 800487e:	e7d9      	b.n	8004834 <__sfp+0x1c>
 8004880:	2104      	movs	r1, #4
 8004882:	4638      	mov	r0, r7
 8004884:	f7ff ff62 	bl	800474c <__sfmoreglue>
 8004888:	4604      	mov	r4, r0
 800488a:	6030      	str	r0, [r6, #0]
 800488c:	2800      	cmp	r0, #0
 800488e:	d1d5      	bne.n	800483c <__sfp+0x24>
 8004890:	f7ff ff78 	bl	8004784 <__sfp_lock_release>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	e7ee      	b.n	8004878 <__sfp+0x60>
 800489a:	bf00      	nop
 800489c:	0800563c 	.word	0x0800563c
 80048a0:	ffff0001 	.word	0xffff0001

080048a4 <_fwalk_reent>:
 80048a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a8:	4606      	mov	r6, r0
 80048aa:	4688      	mov	r8, r1
 80048ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048b0:	2700      	movs	r7, #0
 80048b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048b6:	f1b9 0901 	subs.w	r9, r9, #1
 80048ba:	d505      	bpl.n	80048c8 <_fwalk_reent+0x24>
 80048bc:	6824      	ldr	r4, [r4, #0]
 80048be:	2c00      	cmp	r4, #0
 80048c0:	d1f7      	bne.n	80048b2 <_fwalk_reent+0xe>
 80048c2:	4638      	mov	r0, r7
 80048c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c8:	89ab      	ldrh	r3, [r5, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d907      	bls.n	80048de <_fwalk_reent+0x3a>
 80048ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048d2:	3301      	adds	r3, #1
 80048d4:	d003      	beq.n	80048de <_fwalk_reent+0x3a>
 80048d6:	4629      	mov	r1, r5
 80048d8:	4630      	mov	r0, r6
 80048da:	47c0      	blx	r8
 80048dc:	4307      	orrs	r7, r0
 80048de:	3568      	adds	r5, #104	; 0x68
 80048e0:	e7e9      	b.n	80048b6 <_fwalk_reent+0x12>

080048e2 <__retarget_lock_init_recursive>:
 80048e2:	4770      	bx	lr

080048e4 <__retarget_lock_acquire_recursive>:
 80048e4:	4770      	bx	lr

080048e6 <__retarget_lock_release_recursive>:
 80048e6:	4770      	bx	lr

080048e8 <sbrk_aligned>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4e0e      	ldr	r6, [pc, #56]	; (8004924 <sbrk_aligned+0x3c>)
 80048ec:	460c      	mov	r4, r1
 80048ee:	6831      	ldr	r1, [r6, #0]
 80048f0:	4605      	mov	r5, r0
 80048f2:	b911      	cbnz	r1, 80048fa <sbrk_aligned+0x12>
 80048f4:	f000 fb7a 	bl	8004fec <_sbrk_r>
 80048f8:	6030      	str	r0, [r6, #0]
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 fb75 	bl	8004fec <_sbrk_r>
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d00a      	beq.n	800491c <sbrk_aligned+0x34>
 8004906:	1cc4      	adds	r4, r0, #3
 8004908:	f024 0403 	bic.w	r4, r4, #3
 800490c:	42a0      	cmp	r0, r4
 800490e:	d007      	beq.n	8004920 <sbrk_aligned+0x38>
 8004910:	1a21      	subs	r1, r4, r0
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fb6a 	bl	8004fec <_sbrk_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d101      	bne.n	8004920 <sbrk_aligned+0x38>
 800491c:	f04f 34ff 	mov.w	r4, #4294967295
 8004920:	4620      	mov	r0, r4
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	20000870 	.word	0x20000870

08004928 <_malloc_r>:
 8004928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	1ccd      	adds	r5, r1, #3
 800492e:	f025 0503 	bic.w	r5, r5, #3
 8004932:	3508      	adds	r5, #8
 8004934:	2d0c      	cmp	r5, #12
 8004936:	bf38      	it	cc
 8004938:	250c      	movcc	r5, #12
 800493a:	2d00      	cmp	r5, #0
 800493c:	4607      	mov	r7, r0
 800493e:	db01      	blt.n	8004944 <_malloc_r+0x1c>
 8004940:	42a9      	cmp	r1, r5
 8004942:	d905      	bls.n	8004950 <_malloc_r+0x28>
 8004944:	230c      	movs	r3, #12
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	2600      	movs	r6, #0
 800494a:	4630      	mov	r0, r6
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004950:	4e2e      	ldr	r6, [pc, #184]	; (8004a0c <_malloc_r+0xe4>)
 8004952:	f000 fdbb 	bl	80054cc <__malloc_lock>
 8004956:	6833      	ldr	r3, [r6, #0]
 8004958:	461c      	mov	r4, r3
 800495a:	bb34      	cbnz	r4, 80049aa <_malloc_r+0x82>
 800495c:	4629      	mov	r1, r5
 800495e:	4638      	mov	r0, r7
 8004960:	f7ff ffc2 	bl	80048e8 <sbrk_aligned>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	4604      	mov	r4, r0
 8004968:	d14d      	bne.n	8004a06 <_malloc_r+0xde>
 800496a:	6834      	ldr	r4, [r6, #0]
 800496c:	4626      	mov	r6, r4
 800496e:	2e00      	cmp	r6, #0
 8004970:	d140      	bne.n	80049f4 <_malloc_r+0xcc>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4631      	mov	r1, r6
 8004976:	4638      	mov	r0, r7
 8004978:	eb04 0803 	add.w	r8, r4, r3
 800497c:	f000 fb36 	bl	8004fec <_sbrk_r>
 8004980:	4580      	cmp	r8, r0
 8004982:	d13a      	bne.n	80049fa <_malloc_r+0xd2>
 8004984:	6821      	ldr	r1, [r4, #0]
 8004986:	3503      	adds	r5, #3
 8004988:	1a6d      	subs	r5, r5, r1
 800498a:	f025 0503 	bic.w	r5, r5, #3
 800498e:	3508      	adds	r5, #8
 8004990:	2d0c      	cmp	r5, #12
 8004992:	bf38      	it	cc
 8004994:	250c      	movcc	r5, #12
 8004996:	4629      	mov	r1, r5
 8004998:	4638      	mov	r0, r7
 800499a:	f7ff ffa5 	bl	80048e8 <sbrk_aligned>
 800499e:	3001      	adds	r0, #1
 80049a0:	d02b      	beq.n	80049fa <_malloc_r+0xd2>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	442b      	add	r3, r5
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	e00e      	b.n	80049c8 <_malloc_r+0xa0>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	1b52      	subs	r2, r2, r5
 80049ae:	d41e      	bmi.n	80049ee <_malloc_r+0xc6>
 80049b0:	2a0b      	cmp	r2, #11
 80049b2:	d916      	bls.n	80049e2 <_malloc_r+0xba>
 80049b4:	1961      	adds	r1, r4, r5
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	6025      	str	r5, [r4, #0]
 80049ba:	bf18      	it	ne
 80049bc:	6059      	strne	r1, [r3, #4]
 80049be:	6863      	ldr	r3, [r4, #4]
 80049c0:	bf08      	it	eq
 80049c2:	6031      	streq	r1, [r6, #0]
 80049c4:	5162      	str	r2, [r4, r5]
 80049c6:	604b      	str	r3, [r1, #4]
 80049c8:	4638      	mov	r0, r7
 80049ca:	f104 060b 	add.w	r6, r4, #11
 80049ce:	f000 fd83 	bl	80054d8 <__malloc_unlock>
 80049d2:	f026 0607 	bic.w	r6, r6, #7
 80049d6:	1d23      	adds	r3, r4, #4
 80049d8:	1af2      	subs	r2, r6, r3
 80049da:	d0b6      	beq.n	800494a <_malloc_r+0x22>
 80049dc:	1b9b      	subs	r3, r3, r6
 80049de:	50a3      	str	r3, [r4, r2]
 80049e0:	e7b3      	b.n	800494a <_malloc_r+0x22>
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	bf0c      	ite	eq
 80049e8:	6032      	streq	r2, [r6, #0]
 80049ea:	605a      	strne	r2, [r3, #4]
 80049ec:	e7ec      	b.n	80049c8 <_malloc_r+0xa0>
 80049ee:	4623      	mov	r3, r4
 80049f0:	6864      	ldr	r4, [r4, #4]
 80049f2:	e7b2      	b.n	800495a <_malloc_r+0x32>
 80049f4:	4634      	mov	r4, r6
 80049f6:	6876      	ldr	r6, [r6, #4]
 80049f8:	e7b9      	b.n	800496e <_malloc_r+0x46>
 80049fa:	230c      	movs	r3, #12
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	4638      	mov	r0, r7
 8004a00:	f000 fd6a 	bl	80054d8 <__malloc_unlock>
 8004a04:	e7a1      	b.n	800494a <_malloc_r+0x22>
 8004a06:	6025      	str	r5, [r4, #0]
 8004a08:	e7de      	b.n	80049c8 <_malloc_r+0xa0>
 8004a0a:	bf00      	nop
 8004a0c:	2000086c 	.word	0x2000086c

08004a10 <__sfputc_r>:
 8004a10:	6893      	ldr	r3, [r2, #8]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	b410      	push	{r4}
 8004a18:	6093      	str	r3, [r2, #8]
 8004a1a:	da08      	bge.n	8004a2e <__sfputc_r+0x1e>
 8004a1c:	6994      	ldr	r4, [r2, #24]
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	db01      	blt.n	8004a26 <__sfputc_r+0x16>
 8004a22:	290a      	cmp	r1, #10
 8004a24:	d103      	bne.n	8004a2e <__sfputc_r+0x1e>
 8004a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2a:	f000 bb33 	b.w	8005094 <__swbuf_r>
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	1c58      	adds	r0, r3, #1
 8004a32:	6010      	str	r0, [r2, #0]
 8004a34:	7019      	strb	r1, [r3, #0]
 8004a36:	4608      	mov	r0, r1
 8004a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <__sfputs_r>:
 8004a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a40:	4606      	mov	r6, r0
 8004a42:	460f      	mov	r7, r1
 8004a44:	4614      	mov	r4, r2
 8004a46:	18d5      	adds	r5, r2, r3
 8004a48:	42ac      	cmp	r4, r5
 8004a4a:	d101      	bne.n	8004a50 <__sfputs_r+0x12>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e007      	b.n	8004a60 <__sfputs_r+0x22>
 8004a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a54:	463a      	mov	r2, r7
 8004a56:	4630      	mov	r0, r6
 8004a58:	f7ff ffda 	bl	8004a10 <__sfputc_r>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d1f3      	bne.n	8004a48 <__sfputs_r+0xa>
 8004a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a64 <_vfiprintf_r>:
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	460d      	mov	r5, r1
 8004a6a:	b09d      	sub	sp, #116	; 0x74
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	4698      	mov	r8, r3
 8004a70:	4606      	mov	r6, r0
 8004a72:	b118      	cbz	r0, 8004a7c <_vfiprintf_r+0x18>
 8004a74:	6983      	ldr	r3, [r0, #24]
 8004a76:	b90b      	cbnz	r3, 8004a7c <_vfiprintf_r+0x18>
 8004a78:	f7ff fe96 	bl	80047a8 <__sinit>
 8004a7c:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <_vfiprintf_r+0x240>)
 8004a7e:	429d      	cmp	r5, r3
 8004a80:	d11b      	bne.n	8004aba <_vfiprintf_r+0x56>
 8004a82:	6875      	ldr	r5, [r6, #4]
 8004a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_vfiprintf_r+0x32>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	059a      	lsls	r2, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_vfiprintf_r+0x32>
 8004a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a92:	f7ff ff27 	bl	80048e4 <__retarget_lock_acquire_recursive>
 8004a96:	89ab      	ldrh	r3, [r5, #12]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	d501      	bpl.n	8004aa0 <_vfiprintf_r+0x3c>
 8004a9c:	692b      	ldr	r3, [r5, #16]
 8004a9e:	b9eb      	cbnz	r3, 8004adc <_vfiprintf_r+0x78>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 fb5a 	bl	800515c <__swsetup_r>
 8004aa8:	b1c0      	cbz	r0, 8004adc <_vfiprintf_r+0x78>
 8004aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aac:	07dc      	lsls	r4, r3, #31
 8004aae:	d50e      	bpl.n	8004ace <_vfiprintf_r+0x6a>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	b01d      	add	sp, #116	; 0x74
 8004ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aba:	4b7b      	ldr	r3, [pc, #492]	; (8004ca8 <_vfiprintf_r+0x244>)
 8004abc:	429d      	cmp	r5, r3
 8004abe:	d101      	bne.n	8004ac4 <_vfiprintf_r+0x60>
 8004ac0:	68b5      	ldr	r5, [r6, #8]
 8004ac2:	e7df      	b.n	8004a84 <_vfiprintf_r+0x20>
 8004ac4:	4b79      	ldr	r3, [pc, #484]	; (8004cac <_vfiprintf_r+0x248>)
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	bf08      	it	eq
 8004aca:	68f5      	ldreq	r5, [r6, #12]
 8004acc:	e7da      	b.n	8004a84 <_vfiprintf_r+0x20>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	0598      	lsls	r0, r3, #22
 8004ad2:	d4ed      	bmi.n	8004ab0 <_vfiprintf_r+0x4c>
 8004ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ad6:	f7ff ff06 	bl	80048e6 <__retarget_lock_release_recursive>
 8004ada:	e7e9      	b.n	8004ab0 <_vfiprintf_r+0x4c>
 8004adc:	2300      	movs	r3, #0
 8004ade:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae0:	2320      	movs	r3, #32
 8004ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aea:	2330      	movs	r3, #48	; 0x30
 8004aec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cb0 <_vfiprintf_r+0x24c>
 8004af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004af4:	f04f 0901 	mov.w	r9, #1
 8004af8:	4623      	mov	r3, r4
 8004afa:	469a      	mov	sl, r3
 8004afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b00:	b10a      	cbz	r2, 8004b06 <_vfiprintf_r+0xa2>
 8004b02:	2a25      	cmp	r2, #37	; 0x25
 8004b04:	d1f9      	bne.n	8004afa <_vfiprintf_r+0x96>
 8004b06:	ebba 0b04 	subs.w	fp, sl, r4
 8004b0a:	d00b      	beq.n	8004b24 <_vfiprintf_r+0xc0>
 8004b0c:	465b      	mov	r3, fp
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ff93 	bl	8004a3e <__sfputs_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f000 80aa 	beq.w	8004c72 <_vfiprintf_r+0x20e>
 8004b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b20:	445a      	add	r2, fp
 8004b22:	9209      	str	r2, [sp, #36]	; 0x24
 8004b24:	f89a 3000 	ldrb.w	r3, [sl]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a2 	beq.w	8004c72 <_vfiprintf_r+0x20e>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b38:	f10a 0a01 	add.w	sl, sl, #1
 8004b3c:	9304      	str	r3, [sp, #16]
 8004b3e:	9307      	str	r3, [sp, #28]
 8004b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b44:	931a      	str	r3, [sp, #104]	; 0x68
 8004b46:	4654      	mov	r4, sl
 8004b48:	2205      	movs	r2, #5
 8004b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4e:	4858      	ldr	r0, [pc, #352]	; (8004cb0 <_vfiprintf_r+0x24c>)
 8004b50:	f7fb fb4e 	bl	80001f0 <memchr>
 8004b54:	9a04      	ldr	r2, [sp, #16]
 8004b56:	b9d8      	cbnz	r0, 8004b90 <_vfiprintf_r+0x12c>
 8004b58:	06d1      	lsls	r1, r2, #27
 8004b5a:	bf44      	itt	mi
 8004b5c:	2320      	movmi	r3, #32
 8004b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b62:	0713      	lsls	r3, r2, #28
 8004b64:	bf44      	itt	mi
 8004b66:	232b      	movmi	r3, #43	; 0x2b
 8004b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b70:	2b2a      	cmp	r3, #42	; 0x2a
 8004b72:	d015      	beq.n	8004ba0 <_vfiprintf_r+0x13c>
 8004b74:	9a07      	ldr	r2, [sp, #28]
 8004b76:	4654      	mov	r4, sl
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f04f 0c0a 	mov.w	ip, #10
 8004b7e:	4621      	mov	r1, r4
 8004b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b84:	3b30      	subs	r3, #48	; 0x30
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	d94e      	bls.n	8004c28 <_vfiprintf_r+0x1c4>
 8004b8a:	b1b0      	cbz	r0, 8004bba <_vfiprintf_r+0x156>
 8004b8c:	9207      	str	r2, [sp, #28]
 8004b8e:	e014      	b.n	8004bba <_vfiprintf_r+0x156>
 8004b90:	eba0 0308 	sub.w	r3, r0, r8
 8004b94:	fa09 f303 	lsl.w	r3, r9, r3
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	46a2      	mov	sl, r4
 8004b9e:	e7d2      	b.n	8004b46 <_vfiprintf_r+0xe2>
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	1d19      	adds	r1, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	9103      	str	r1, [sp, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfbb      	ittet	lt
 8004bac:	425b      	neglt	r3, r3
 8004bae:	f042 0202 	orrlt.w	r2, r2, #2
 8004bb2:	9307      	strge	r3, [sp, #28]
 8004bb4:	9307      	strlt	r3, [sp, #28]
 8004bb6:	bfb8      	it	lt
 8004bb8:	9204      	strlt	r2, [sp, #16]
 8004bba:	7823      	ldrb	r3, [r4, #0]
 8004bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bbe:	d10c      	bne.n	8004bda <_vfiprintf_r+0x176>
 8004bc0:	7863      	ldrb	r3, [r4, #1]
 8004bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc4:	d135      	bne.n	8004c32 <_vfiprintf_r+0x1ce>
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	1d1a      	adds	r2, r3, #4
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	9203      	str	r2, [sp, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb8      	it	lt
 8004bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bd6:	3402      	adds	r4, #2
 8004bd8:	9305      	str	r3, [sp, #20]
 8004bda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cc0 <_vfiprintf_r+0x25c>
 8004bde:	7821      	ldrb	r1, [r4, #0]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4650      	mov	r0, sl
 8004be4:	f7fb fb04 	bl	80001f0 <memchr>
 8004be8:	b140      	cbz	r0, 8004bfc <_vfiprintf_r+0x198>
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	eba0 000a 	sub.w	r0, r0, sl
 8004bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8004bf4:	9b04      	ldr	r3, [sp, #16]
 8004bf6:	4303      	orrs	r3, r0
 8004bf8:	3401      	adds	r4, #1
 8004bfa:	9304      	str	r3, [sp, #16]
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	482c      	ldr	r0, [pc, #176]	; (8004cb4 <_vfiprintf_r+0x250>)
 8004c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c06:	2206      	movs	r2, #6
 8004c08:	f7fb faf2 	bl	80001f0 <memchr>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d03f      	beq.n	8004c90 <_vfiprintf_r+0x22c>
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <_vfiprintf_r+0x254>)
 8004c12:	bb1b      	cbnz	r3, 8004c5c <_vfiprintf_r+0x1f8>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	3307      	adds	r3, #7
 8004c18:	f023 0307 	bic.w	r3, r3, #7
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c22:	443b      	add	r3, r7
 8004c24:	9309      	str	r3, [sp, #36]	; 0x24
 8004c26:	e767      	b.n	8004af8 <_vfiprintf_r+0x94>
 8004c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	2001      	movs	r0, #1
 8004c30:	e7a5      	b.n	8004b7e <_vfiprintf_r+0x11a>
 8004c32:	2300      	movs	r3, #0
 8004c34:	3401      	adds	r4, #1
 8004c36:	9305      	str	r3, [sp, #20]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 0c0a 	mov.w	ip, #10
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c44:	3a30      	subs	r2, #48	; 0x30
 8004c46:	2a09      	cmp	r2, #9
 8004c48:	d903      	bls.n	8004c52 <_vfiprintf_r+0x1ee>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0c5      	beq.n	8004bda <_vfiprintf_r+0x176>
 8004c4e:	9105      	str	r1, [sp, #20]
 8004c50:	e7c3      	b.n	8004bda <_vfiprintf_r+0x176>
 8004c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c56:	4604      	mov	r4, r0
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e7f0      	b.n	8004c3e <_vfiprintf_r+0x1da>
 8004c5c:	ab03      	add	r3, sp, #12
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	462a      	mov	r2, r5
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <_vfiprintf_r+0x258>)
 8004c64:	a904      	add	r1, sp, #16
 8004c66:	4630      	mov	r0, r6
 8004c68:	f3af 8000 	nop.w
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	1c78      	adds	r0, r7, #1
 8004c70:	d1d6      	bne.n	8004c20 <_vfiprintf_r+0x1bc>
 8004c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c74:	07d9      	lsls	r1, r3, #31
 8004c76:	d405      	bmi.n	8004c84 <_vfiprintf_r+0x220>
 8004c78:	89ab      	ldrh	r3, [r5, #12]
 8004c7a:	059a      	lsls	r2, r3, #22
 8004c7c:	d402      	bmi.n	8004c84 <_vfiprintf_r+0x220>
 8004c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c80:	f7ff fe31 	bl	80048e6 <__retarget_lock_release_recursive>
 8004c84:	89ab      	ldrh	r3, [r5, #12]
 8004c86:	065b      	lsls	r3, r3, #25
 8004c88:	f53f af12 	bmi.w	8004ab0 <_vfiprintf_r+0x4c>
 8004c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c8e:	e711      	b.n	8004ab4 <_vfiprintf_r+0x50>
 8004c90:	ab03      	add	r3, sp, #12
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	462a      	mov	r2, r5
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <_vfiprintf_r+0x258>)
 8004c98:	a904      	add	r1, sp, #16
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 f880 	bl	8004da0 <_printf_i>
 8004ca0:	e7e4      	b.n	8004c6c <_vfiprintf_r+0x208>
 8004ca2:	bf00      	nop
 8004ca4:	08005660 	.word	0x08005660
 8004ca8:	08005680 	.word	0x08005680
 8004cac:	08005640 	.word	0x08005640
 8004cb0:	080056a0 	.word	0x080056a0
 8004cb4:	080056aa 	.word	0x080056aa
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	08004a3f 	.word	0x08004a3f
 8004cc0:	080056a6 	.word	0x080056a6

08004cc4 <_printf_common>:
 8004cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	4616      	mov	r6, r2
 8004cca:	4699      	mov	r9, r3
 8004ccc:	688a      	ldr	r2, [r1, #8]
 8004cce:	690b      	ldr	r3, [r1, #16]
 8004cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	bfb8      	it	lt
 8004cd8:	4613      	movlt	r3, r2
 8004cda:	6033      	str	r3, [r6, #0]
 8004cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	b10a      	cbz	r2, 8004cea <_printf_common+0x26>
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	0699      	lsls	r1, r3, #26
 8004cee:	bf42      	ittt	mi
 8004cf0:	6833      	ldrmi	r3, [r6, #0]
 8004cf2:	3302      	addmi	r3, #2
 8004cf4:	6033      	strmi	r3, [r6, #0]
 8004cf6:	6825      	ldr	r5, [r4, #0]
 8004cf8:	f015 0506 	ands.w	r5, r5, #6
 8004cfc:	d106      	bne.n	8004d0c <_printf_common+0x48>
 8004cfe:	f104 0a19 	add.w	sl, r4, #25
 8004d02:	68e3      	ldr	r3, [r4, #12]
 8004d04:	6832      	ldr	r2, [r6, #0]
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	42ab      	cmp	r3, r5
 8004d0a:	dc26      	bgt.n	8004d5a <_printf_common+0x96>
 8004d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d10:	1e13      	subs	r3, r2, #0
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	0692      	lsls	r2, r2, #26
 8004d1a:	d42b      	bmi.n	8004d74 <_printf_common+0xb0>
 8004d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d20:	4649      	mov	r1, r9
 8004d22:	4638      	mov	r0, r7
 8004d24:	47c0      	blx	r8
 8004d26:	3001      	adds	r0, #1
 8004d28:	d01e      	beq.n	8004d68 <_printf_common+0xa4>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	68e5      	ldr	r5, [r4, #12]
 8004d2e:	6832      	ldr	r2, [r6, #0]
 8004d30:	f003 0306 	and.w	r3, r3, #6
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	bf08      	it	eq
 8004d38:	1aad      	subeq	r5, r5, r2
 8004d3a:	68a3      	ldr	r3, [r4, #8]
 8004d3c:	6922      	ldr	r2, [r4, #16]
 8004d3e:	bf0c      	ite	eq
 8004d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d44:	2500      	movne	r5, #0
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bfc4      	itt	gt
 8004d4a:	1a9b      	subgt	r3, r3, r2
 8004d4c:	18ed      	addgt	r5, r5, r3
 8004d4e:	2600      	movs	r6, #0
 8004d50:	341a      	adds	r4, #26
 8004d52:	42b5      	cmp	r5, r6
 8004d54:	d11a      	bne.n	8004d8c <_printf_common+0xc8>
 8004d56:	2000      	movs	r0, #0
 8004d58:	e008      	b.n	8004d6c <_printf_common+0xa8>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4638      	mov	r0, r7
 8004d62:	47c0      	blx	r8
 8004d64:	3001      	adds	r0, #1
 8004d66:	d103      	bne.n	8004d70 <_printf_common+0xac>
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d70:	3501      	adds	r5, #1
 8004d72:	e7c6      	b.n	8004d02 <_printf_common+0x3e>
 8004d74:	18e1      	adds	r1, r4, r3
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	2030      	movs	r0, #48	; 0x30
 8004d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d7e:	4422      	add	r2, r4
 8004d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d88:	3302      	adds	r3, #2
 8004d8a:	e7c7      	b.n	8004d1c <_printf_common+0x58>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4622      	mov	r2, r4
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d0e6      	beq.n	8004d68 <_printf_common+0xa4>
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7d9      	b.n	8004d52 <_printf_common+0x8e>
	...

08004da0 <_printf_i>:
 8004da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	7e0f      	ldrb	r7, [r1, #24]
 8004da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004da8:	2f78      	cmp	r7, #120	; 0x78
 8004daa:	4691      	mov	r9, r2
 8004dac:	4680      	mov	r8, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	469a      	mov	sl, r3
 8004db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004db6:	d807      	bhi.n	8004dc8 <_printf_i+0x28>
 8004db8:	2f62      	cmp	r7, #98	; 0x62
 8004dba:	d80a      	bhi.n	8004dd2 <_printf_i+0x32>
 8004dbc:	2f00      	cmp	r7, #0
 8004dbe:	f000 80d8 	beq.w	8004f72 <_printf_i+0x1d2>
 8004dc2:	2f58      	cmp	r7, #88	; 0x58
 8004dc4:	f000 80a3 	beq.w	8004f0e <_printf_i+0x16e>
 8004dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd0:	e03a      	b.n	8004e48 <_printf_i+0xa8>
 8004dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dd6:	2b15      	cmp	r3, #21
 8004dd8:	d8f6      	bhi.n	8004dc8 <_printf_i+0x28>
 8004dda:	a101      	add	r1, pc, #4	; (adr r1, 8004de0 <_printf_i+0x40>)
 8004ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de0:	08004e39 	.word	0x08004e39
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004dc9 	.word	0x08004dc9
 8004dec:	08004dc9 	.word	0x08004dc9
 8004df0:	08004dc9 	.word	0x08004dc9
 8004df4:	08004dc9 	.word	0x08004dc9
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004dc9 	.word	0x08004dc9
 8004e00:	08004dc9 	.word	0x08004dc9
 8004e04:	08004dc9 	.word	0x08004dc9
 8004e08:	08004dc9 	.word	0x08004dc9
 8004e0c:	08004f59 	.word	0x08004f59
 8004e10:	08004e7d 	.word	0x08004e7d
 8004e14:	08004f3b 	.word	0x08004f3b
 8004e18:	08004dc9 	.word	0x08004dc9
 8004e1c:	08004dc9 	.word	0x08004dc9
 8004e20:	08004f7b 	.word	0x08004f7b
 8004e24:	08004dc9 	.word	0x08004dc9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004dc9 	.word	0x08004dc9
 8004e30:	08004dc9 	.word	0x08004dc9
 8004e34:	08004f43 	.word	0x08004f43
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0a3      	b.n	8004f94 <_printf_i+0x1f4>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	6829      	ldr	r1, [r5, #0]
 8004e50:	0606      	lsls	r6, r0, #24
 8004e52:	f101 0304 	add.w	r3, r1, #4
 8004e56:	d50a      	bpl.n	8004e6e <_printf_i+0xce>
 8004e58:	680e      	ldr	r6, [r1, #0]
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	2e00      	cmp	r6, #0
 8004e5e:	da03      	bge.n	8004e68 <_printf_i+0xc8>
 8004e60:	232d      	movs	r3, #45	; 0x2d
 8004e62:	4276      	negs	r6, r6
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	485e      	ldr	r0, [pc, #376]	; (8004fe4 <_printf_i+0x244>)
 8004e6a:	230a      	movs	r3, #10
 8004e6c:	e019      	b.n	8004ea2 <_printf_i+0x102>
 8004e6e:	680e      	ldr	r6, [r1, #0]
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e76:	bf18      	it	ne
 8004e78:	b236      	sxthne	r6, r6
 8004e7a:	e7ef      	b.n	8004e5c <_printf_i+0xbc>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	6029      	str	r1, [r5, #0]
 8004e84:	0601      	lsls	r1, r0, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0xec>
 8004e88:	681e      	ldr	r6, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_printf_i+0xf2>
 8004e8c:	0646      	lsls	r6, r0, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0xe8>
 8004e90:	881e      	ldrh	r6, [r3, #0]
 8004e92:	4854      	ldr	r0, [pc, #336]	; (8004fe4 <_printf_i+0x244>)
 8004e94:	2f6f      	cmp	r7, #111	; 0x6f
 8004e96:	bf0c      	ite	eq
 8004e98:	2308      	moveq	r3, #8
 8004e9a:	230a      	movne	r3, #10
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea2:	6865      	ldr	r5, [r4, #4]
 8004ea4:	60a5      	str	r5, [r4, #8]
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	bfa2      	ittt	ge
 8004eaa:	6821      	ldrge	r1, [r4, #0]
 8004eac:	f021 0104 	bicge.w	r1, r1, #4
 8004eb0:	6021      	strge	r1, [r4, #0]
 8004eb2:	b90e      	cbnz	r6, 8004eb8 <_printf_i+0x118>
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	d04d      	beq.n	8004f54 <_printf_i+0x1b4>
 8004eb8:	4615      	mov	r5, r2
 8004eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ec2:	5dc7      	ldrb	r7, [r0, r7]
 8004ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ec8:	4637      	mov	r7, r6
 8004eca:	42bb      	cmp	r3, r7
 8004ecc:	460e      	mov	r6, r1
 8004ece:	d9f4      	bls.n	8004eba <_printf_i+0x11a>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10b      	bne.n	8004eec <_printf_i+0x14c>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	07de      	lsls	r6, r3, #31
 8004ed8:	d508      	bpl.n	8004eec <_printf_i+0x14c>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	6861      	ldr	r1, [r4, #4]
 8004ede:	4299      	cmp	r1, r3
 8004ee0:	bfde      	ittt	le
 8004ee2:	2330      	movle	r3, #48	; 0x30
 8004ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eec:	1b52      	subs	r2, r2, r5
 8004eee:	6122      	str	r2, [r4, #16]
 8004ef0:	f8cd a000 	str.w	sl, [sp]
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	aa03      	add	r2, sp, #12
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fee2 	bl	8004cc4 <_printf_common>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d14c      	bne.n	8004f9e <_printf_i+0x1fe>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	b004      	add	sp, #16
 8004f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0e:	4835      	ldr	r0, [pc, #212]	; (8004fe4 <_printf_i+0x244>)
 8004f10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f14:	6829      	ldr	r1, [r5, #0]
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f1c:	6029      	str	r1, [r5, #0]
 8004f1e:	061d      	lsls	r5, r3, #24
 8004f20:	d514      	bpl.n	8004f4c <_printf_i+0x1ac>
 8004f22:	07df      	lsls	r7, r3, #31
 8004f24:	bf44      	itt	mi
 8004f26:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2a:	6023      	strmi	r3, [r4, #0]
 8004f2c:	b91e      	cbnz	r6, 8004f36 <_printf_i+0x196>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	f023 0320 	bic.w	r3, r3, #32
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	2310      	movs	r3, #16
 8004f38:	e7b0      	b.n	8004e9c <_printf_i+0xfc>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	f043 0320 	orr.w	r3, r3, #32
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	2378      	movs	r3, #120	; 0x78
 8004f44:	4828      	ldr	r0, [pc, #160]	; (8004fe8 <_printf_i+0x248>)
 8004f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f4a:	e7e3      	b.n	8004f14 <_printf_i+0x174>
 8004f4c:	0659      	lsls	r1, r3, #25
 8004f4e:	bf48      	it	mi
 8004f50:	b2b6      	uxthmi	r6, r6
 8004f52:	e7e6      	b.n	8004f22 <_printf_i+0x182>
 8004f54:	4615      	mov	r5, r2
 8004f56:	e7bb      	b.n	8004ed0 <_printf_i+0x130>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	6826      	ldr	r6, [r4, #0]
 8004f5c:	6961      	ldr	r1, [r4, #20]
 8004f5e:	1d18      	adds	r0, r3, #4
 8004f60:	6028      	str	r0, [r5, #0]
 8004f62:	0635      	lsls	r5, r6, #24
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	d501      	bpl.n	8004f6c <_printf_i+0x1cc>
 8004f68:	6019      	str	r1, [r3, #0]
 8004f6a:	e002      	b.n	8004f72 <_printf_i+0x1d2>
 8004f6c:	0670      	lsls	r0, r6, #25
 8004f6e:	d5fb      	bpl.n	8004f68 <_printf_i+0x1c8>
 8004f70:	8019      	strh	r1, [r3, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	6123      	str	r3, [r4, #16]
 8004f76:	4615      	mov	r5, r2
 8004f78:	e7ba      	b.n	8004ef0 <_printf_i+0x150>
 8004f7a:	682b      	ldr	r3, [r5, #0]
 8004f7c:	1d1a      	adds	r2, r3, #4
 8004f7e:	602a      	str	r2, [r5, #0]
 8004f80:	681d      	ldr	r5, [r3, #0]
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	2100      	movs	r1, #0
 8004f86:	4628      	mov	r0, r5
 8004f88:	f7fb f932 	bl	80001f0 <memchr>
 8004f8c:	b108      	cbz	r0, 8004f92 <_printf_i+0x1f2>
 8004f8e:	1b40      	subs	r0, r0, r5
 8004f90:	6060      	str	r0, [r4, #4]
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	6123      	str	r3, [r4, #16]
 8004f96:	2300      	movs	r3, #0
 8004f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9c:	e7a8      	b.n	8004ef0 <_printf_i+0x150>
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	47d0      	blx	sl
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d0ab      	beq.n	8004f04 <_printf_i+0x164>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	079b      	lsls	r3, r3, #30
 8004fb0:	d413      	bmi.n	8004fda <_printf_i+0x23a>
 8004fb2:	68e0      	ldr	r0, [r4, #12]
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	4298      	cmp	r0, r3
 8004fb8:	bfb8      	it	lt
 8004fba:	4618      	movlt	r0, r3
 8004fbc:	e7a4      	b.n	8004f08 <_printf_i+0x168>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	4640      	mov	r0, r8
 8004fc6:	47d0      	blx	sl
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d09b      	beq.n	8004f04 <_printf_i+0x164>
 8004fcc:	3501      	adds	r5, #1
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	9903      	ldr	r1, [sp, #12]
 8004fd2:	1a5b      	subs	r3, r3, r1
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	dcf2      	bgt.n	8004fbe <_printf_i+0x21e>
 8004fd8:	e7eb      	b.n	8004fb2 <_printf_i+0x212>
 8004fda:	2500      	movs	r5, #0
 8004fdc:	f104 0619 	add.w	r6, r4, #25
 8004fe0:	e7f5      	b.n	8004fce <_printf_i+0x22e>
 8004fe2:	bf00      	nop
 8004fe4:	080056b1 	.word	0x080056b1
 8004fe8:	080056c2 	.word	0x080056c2

08004fec <_sbrk_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d06      	ldr	r5, [pc, #24]	; (8005008 <_sbrk_r+0x1c>)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fb ffa4 	bl	8000f44 <_sbrk>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_sbrk_r+0x1a>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_sbrk_r+0x1a>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	20000874 	.word	0x20000874

0800500c <__sread>:
 800500c:	b510      	push	{r4, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005014:	f000 fab2 	bl	800557c <_read_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	bfab      	itete	ge
 800501c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800501e:	89a3      	ldrhlt	r3, [r4, #12]
 8005020:	181b      	addge	r3, r3, r0
 8005022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005026:	bfac      	ite	ge
 8005028:	6563      	strge	r3, [r4, #84]	; 0x54
 800502a:	81a3      	strhlt	r3, [r4, #12]
 800502c:	bd10      	pop	{r4, pc}

0800502e <__swrite>:
 800502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005032:	461f      	mov	r7, r3
 8005034:	898b      	ldrh	r3, [r1, #12]
 8005036:	05db      	lsls	r3, r3, #23
 8005038:	4605      	mov	r5, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4616      	mov	r6, r2
 800503e:	d505      	bpl.n	800504c <__swrite+0x1e>
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	2302      	movs	r3, #2
 8005046:	2200      	movs	r2, #0
 8005048:	f000 f9c8 	bl	80053dc <_lseek_r>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	4628      	mov	r0, r5
 800505e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	f000 b869 	b.w	8005138 <_write_r>

08005066 <__sseek>:
 8005066:	b510      	push	{r4, lr}
 8005068:	460c      	mov	r4, r1
 800506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506e:	f000 f9b5 	bl	80053dc <_lseek_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	bf15      	itete	ne
 8005078:	6560      	strne	r0, [r4, #84]	; 0x54
 800507a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800507e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005082:	81a3      	strheq	r3, [r4, #12]
 8005084:	bf18      	it	ne
 8005086:	81a3      	strhne	r3, [r4, #12]
 8005088:	bd10      	pop	{r4, pc}

0800508a <__sclose>:
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 b8d3 	b.w	8005238 <_close_r>
	...

08005094 <__swbuf_r>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	460e      	mov	r6, r1
 8005098:	4614      	mov	r4, r2
 800509a:	4605      	mov	r5, r0
 800509c:	b118      	cbz	r0, 80050a6 <__swbuf_r+0x12>
 800509e:	6983      	ldr	r3, [r0, #24]
 80050a0:	b90b      	cbnz	r3, 80050a6 <__swbuf_r+0x12>
 80050a2:	f7ff fb81 	bl	80047a8 <__sinit>
 80050a6:	4b21      	ldr	r3, [pc, #132]	; (800512c <__swbuf_r+0x98>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	d12b      	bne.n	8005104 <__swbuf_r+0x70>
 80050ac:	686c      	ldr	r4, [r5, #4]
 80050ae:	69a3      	ldr	r3, [r4, #24]
 80050b0:	60a3      	str	r3, [r4, #8]
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	071a      	lsls	r2, r3, #28
 80050b6:	d52f      	bpl.n	8005118 <__swbuf_r+0x84>
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	b36b      	cbz	r3, 8005118 <__swbuf_r+0x84>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	1ac0      	subs	r0, r0, r3
 80050c2:	6963      	ldr	r3, [r4, #20]
 80050c4:	b2f6      	uxtb	r6, r6
 80050c6:	4283      	cmp	r3, r0
 80050c8:	4637      	mov	r7, r6
 80050ca:	dc04      	bgt.n	80050d6 <__swbuf_r+0x42>
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 f948 	bl	8005364 <_fflush_r>
 80050d4:	bb30      	cbnz	r0, 8005124 <__swbuf_r+0x90>
 80050d6:	68a3      	ldr	r3, [r4, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	701e      	strb	r6, [r3, #0]
 80050e4:	6963      	ldr	r3, [r4, #20]
 80050e6:	3001      	adds	r0, #1
 80050e8:	4283      	cmp	r3, r0
 80050ea:	d004      	beq.n	80050f6 <__swbuf_r+0x62>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	07db      	lsls	r3, r3, #31
 80050f0:	d506      	bpl.n	8005100 <__swbuf_r+0x6c>
 80050f2:	2e0a      	cmp	r6, #10
 80050f4:	d104      	bne.n	8005100 <__swbuf_r+0x6c>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f933 	bl	8005364 <_fflush_r>
 80050fe:	b988      	cbnz	r0, 8005124 <__swbuf_r+0x90>
 8005100:	4638      	mov	r0, r7
 8005102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <__swbuf_r+0x9c>)
 8005106:	429c      	cmp	r4, r3
 8005108:	d101      	bne.n	800510e <__swbuf_r+0x7a>
 800510a:	68ac      	ldr	r4, [r5, #8]
 800510c:	e7cf      	b.n	80050ae <__swbuf_r+0x1a>
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <__swbuf_r+0xa0>)
 8005110:	429c      	cmp	r4, r3
 8005112:	bf08      	it	eq
 8005114:	68ec      	ldreq	r4, [r5, #12]
 8005116:	e7ca      	b.n	80050ae <__swbuf_r+0x1a>
 8005118:	4621      	mov	r1, r4
 800511a:	4628      	mov	r0, r5
 800511c:	f000 f81e 	bl	800515c <__swsetup_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	d0cb      	beq.n	80050bc <__swbuf_r+0x28>
 8005124:	f04f 37ff 	mov.w	r7, #4294967295
 8005128:	e7ea      	b.n	8005100 <__swbuf_r+0x6c>
 800512a:	bf00      	nop
 800512c:	08005660 	.word	0x08005660
 8005130:	08005680 	.word	0x08005680
 8005134:	08005640 	.word	0x08005640

08005138 <_write_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	; (8005158 <_write_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fb fa24 	bl	8000594 <_write>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_write_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_write_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000874 	.word	0x20000874

0800515c <__swsetup_r>:
 800515c:	4b32      	ldr	r3, [pc, #200]	; (8005228 <__swsetup_r+0xcc>)
 800515e:	b570      	push	{r4, r5, r6, lr}
 8005160:	681d      	ldr	r5, [r3, #0]
 8005162:	4606      	mov	r6, r0
 8005164:	460c      	mov	r4, r1
 8005166:	b125      	cbz	r5, 8005172 <__swsetup_r+0x16>
 8005168:	69ab      	ldr	r3, [r5, #24]
 800516a:	b913      	cbnz	r3, 8005172 <__swsetup_r+0x16>
 800516c:	4628      	mov	r0, r5
 800516e:	f7ff fb1b 	bl	80047a8 <__sinit>
 8005172:	4b2e      	ldr	r3, [pc, #184]	; (800522c <__swsetup_r+0xd0>)
 8005174:	429c      	cmp	r4, r3
 8005176:	d10f      	bne.n	8005198 <__swsetup_r+0x3c>
 8005178:	686c      	ldr	r4, [r5, #4]
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005180:	0719      	lsls	r1, r3, #28
 8005182:	d42c      	bmi.n	80051de <__swsetup_r+0x82>
 8005184:	06dd      	lsls	r5, r3, #27
 8005186:	d411      	bmi.n	80051ac <__swsetup_r+0x50>
 8005188:	2309      	movs	r3, #9
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	f04f 30ff 	mov.w	r0, #4294967295
 8005196:	e03e      	b.n	8005216 <__swsetup_r+0xba>
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <__swsetup_r+0xd4>)
 800519a:	429c      	cmp	r4, r3
 800519c:	d101      	bne.n	80051a2 <__swsetup_r+0x46>
 800519e:	68ac      	ldr	r4, [r5, #8]
 80051a0:	e7eb      	b.n	800517a <__swsetup_r+0x1e>
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <__swsetup_r+0xd8>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	bf08      	it	eq
 80051a8:	68ec      	ldreq	r4, [r5, #12]
 80051aa:	e7e6      	b.n	800517a <__swsetup_r+0x1e>
 80051ac:	0758      	lsls	r0, r3, #29
 80051ae:	d512      	bpl.n	80051d6 <__swsetup_r+0x7a>
 80051b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051b2:	b141      	cbz	r1, 80051c6 <__swsetup_r+0x6a>
 80051b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d002      	beq.n	80051c2 <__swsetup_r+0x66>
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 f991 	bl	80054e4 <_free_r>
 80051c2:	2300      	movs	r3, #0
 80051c4:	6363      	str	r3, [r4, #52]	; 0x34
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	2300      	movs	r3, #0
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f043 0308 	orr.w	r3, r3, #8
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	b94b      	cbnz	r3, 80051f6 <__swsetup_r+0x9a>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ec:	d003      	beq.n	80051f6 <__swsetup_r+0x9a>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 f92b 	bl	800544c <__smakebuf_r>
 80051f6:	89a0      	ldrh	r0, [r4, #12]
 80051f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051fc:	f010 0301 	ands.w	r3, r0, #1
 8005200:	d00a      	beq.n	8005218 <__swsetup_r+0xbc>
 8005202:	2300      	movs	r3, #0
 8005204:	60a3      	str	r3, [r4, #8]
 8005206:	6963      	ldr	r3, [r4, #20]
 8005208:	425b      	negs	r3, r3
 800520a:	61a3      	str	r3, [r4, #24]
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	b943      	cbnz	r3, 8005222 <__swsetup_r+0xc6>
 8005210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005214:	d1ba      	bne.n	800518c <__swsetup_r+0x30>
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	0781      	lsls	r1, r0, #30
 800521a:	bf58      	it	pl
 800521c:	6963      	ldrpl	r3, [r4, #20]
 800521e:	60a3      	str	r3, [r4, #8]
 8005220:	e7f4      	b.n	800520c <__swsetup_r+0xb0>
 8005222:	2000      	movs	r0, #0
 8005224:	e7f7      	b.n	8005216 <__swsetup_r+0xba>
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c
 800522c:	08005660 	.word	0x08005660
 8005230:	08005680 	.word	0x08005680
 8005234:	08005640 	.word	0x08005640

08005238 <_close_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	; (8005254 <_close_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fb fe49 	bl	8000eda <_close>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_close_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_close_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20000874 	.word	0x20000874

08005258 <__sflush_r>:
 8005258:	898a      	ldrh	r2, [r1, #12]
 800525a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	4605      	mov	r5, r0
 8005260:	0710      	lsls	r0, r2, #28
 8005262:	460c      	mov	r4, r1
 8005264:	d458      	bmi.n	8005318 <__sflush_r+0xc0>
 8005266:	684b      	ldr	r3, [r1, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc05      	bgt.n	8005278 <__sflush_r+0x20>
 800526c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	dc02      	bgt.n	8005278 <__sflush_r+0x20>
 8005272:	2000      	movs	r0, #0
 8005274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527a:	2e00      	cmp	r6, #0
 800527c:	d0f9      	beq.n	8005272 <__sflush_r+0x1a>
 800527e:	2300      	movs	r3, #0
 8005280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005284:	682f      	ldr	r7, [r5, #0]
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	d032      	beq.n	80052f0 <__sflush_r+0x98>
 800528a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	075a      	lsls	r2, r3, #29
 8005290:	d505      	bpl.n	800529e <__sflush_r+0x46>
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	1ac0      	subs	r0, r0, r3
 8005296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005298:	b10b      	cbz	r3, 800529e <__sflush_r+0x46>
 800529a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800529c:	1ac0      	subs	r0, r0, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	4602      	mov	r2, r0
 80052a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052a4:	6a21      	ldr	r1, [r4, #32]
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b0      	blx	r6
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	d106      	bne.n	80052be <__sflush_r+0x66>
 80052b0:	6829      	ldr	r1, [r5, #0]
 80052b2:	291d      	cmp	r1, #29
 80052b4:	d82c      	bhi.n	8005310 <__sflush_r+0xb8>
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <__sflush_r+0x108>)
 80052b8:	40ca      	lsrs	r2, r1
 80052ba:	07d6      	lsls	r6, r2, #31
 80052bc:	d528      	bpl.n	8005310 <__sflush_r+0xb8>
 80052be:	2200      	movs	r2, #0
 80052c0:	6062      	str	r2, [r4, #4]
 80052c2:	04d9      	lsls	r1, r3, #19
 80052c4:	6922      	ldr	r2, [r4, #16]
 80052c6:	6022      	str	r2, [r4, #0]
 80052c8:	d504      	bpl.n	80052d4 <__sflush_r+0x7c>
 80052ca:	1c42      	adds	r2, r0, #1
 80052cc:	d101      	bne.n	80052d2 <__sflush_r+0x7a>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	b903      	cbnz	r3, 80052d4 <__sflush_r+0x7c>
 80052d2:	6560      	str	r0, [r4, #84]	; 0x54
 80052d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052d6:	602f      	str	r7, [r5, #0]
 80052d8:	2900      	cmp	r1, #0
 80052da:	d0ca      	beq.n	8005272 <__sflush_r+0x1a>
 80052dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <__sflush_r+0x92>
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 f8fd 	bl	80054e4 <_free_r>
 80052ea:	2000      	movs	r0, #0
 80052ec:	6360      	str	r0, [r4, #52]	; 0x34
 80052ee:	e7c1      	b.n	8005274 <__sflush_r+0x1c>
 80052f0:	6a21      	ldr	r1, [r4, #32]
 80052f2:	2301      	movs	r3, #1
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	1c41      	adds	r1, r0, #1
 80052fa:	d1c7      	bne.n	800528c <__sflush_r+0x34>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0c4      	beq.n	800528c <__sflush_r+0x34>
 8005302:	2b1d      	cmp	r3, #29
 8005304:	d001      	beq.n	800530a <__sflush_r+0xb2>
 8005306:	2b16      	cmp	r3, #22
 8005308:	d101      	bne.n	800530e <__sflush_r+0xb6>
 800530a:	602f      	str	r7, [r5, #0]
 800530c:	e7b1      	b.n	8005272 <__sflush_r+0x1a>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e7ad      	b.n	8005274 <__sflush_r+0x1c>
 8005318:	690f      	ldr	r7, [r1, #16]
 800531a:	2f00      	cmp	r7, #0
 800531c:	d0a9      	beq.n	8005272 <__sflush_r+0x1a>
 800531e:	0793      	lsls	r3, r2, #30
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	bf08      	it	eq
 8005324:	694b      	ldreq	r3, [r1, #20]
 8005326:	600f      	str	r7, [r1, #0]
 8005328:	bf18      	it	ne
 800532a:	2300      	movne	r3, #0
 800532c:	eba6 0807 	sub.w	r8, r6, r7
 8005330:	608b      	str	r3, [r1, #8]
 8005332:	f1b8 0f00 	cmp.w	r8, #0
 8005336:	dd9c      	ble.n	8005272 <__sflush_r+0x1a>
 8005338:	6a21      	ldr	r1, [r4, #32]
 800533a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800533c:	4643      	mov	r3, r8
 800533e:	463a      	mov	r2, r7
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	2800      	cmp	r0, #0
 8005346:	dc06      	bgt.n	8005356 <__sflush_r+0xfe>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534e:	81a3      	strh	r3, [r4, #12]
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	e78e      	b.n	8005274 <__sflush_r+0x1c>
 8005356:	4407      	add	r7, r0
 8005358:	eba8 0800 	sub.w	r8, r8, r0
 800535c:	e7e9      	b.n	8005332 <__sflush_r+0xda>
 800535e:	bf00      	nop
 8005360:	20400001 	.word	0x20400001

08005364 <_fflush_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	b913      	cbnz	r3, 8005374 <_fflush_r+0x10>
 800536e:	2500      	movs	r5, #0
 8005370:	4628      	mov	r0, r5
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	b118      	cbz	r0, 800537e <_fflush_r+0x1a>
 8005376:	6983      	ldr	r3, [r0, #24]
 8005378:	b90b      	cbnz	r3, 800537e <_fflush_r+0x1a>
 800537a:	f7ff fa15 	bl	80047a8 <__sinit>
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <_fflush_r+0x6c>)
 8005380:	429c      	cmp	r4, r3
 8005382:	d11b      	bne.n	80053bc <_fflush_r+0x58>
 8005384:	686c      	ldr	r4, [r5, #4]
 8005386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ef      	beq.n	800536e <_fflush_r+0xa>
 800538e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005390:	07d0      	lsls	r0, r2, #31
 8005392:	d404      	bmi.n	800539e <_fflush_r+0x3a>
 8005394:	0599      	lsls	r1, r3, #22
 8005396:	d402      	bmi.n	800539e <_fflush_r+0x3a>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f7ff faa3 	bl	80048e4 <__retarget_lock_acquire_recursive>
 800539e:	4628      	mov	r0, r5
 80053a0:	4621      	mov	r1, r4
 80053a2:	f7ff ff59 	bl	8005258 <__sflush_r>
 80053a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053a8:	07da      	lsls	r2, r3, #31
 80053aa:	4605      	mov	r5, r0
 80053ac:	d4e0      	bmi.n	8005370 <_fflush_r+0xc>
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	059b      	lsls	r3, r3, #22
 80053b2:	d4dd      	bmi.n	8005370 <_fflush_r+0xc>
 80053b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053b6:	f7ff fa96 	bl	80048e6 <__retarget_lock_release_recursive>
 80053ba:	e7d9      	b.n	8005370 <_fflush_r+0xc>
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <_fflush_r+0x70>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d101      	bne.n	80053c6 <_fflush_r+0x62>
 80053c2:	68ac      	ldr	r4, [r5, #8]
 80053c4:	e7df      	b.n	8005386 <_fflush_r+0x22>
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <_fflush_r+0x74>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	bf08      	it	eq
 80053cc:	68ec      	ldreq	r4, [r5, #12]
 80053ce:	e7da      	b.n	8005386 <_fflush_r+0x22>
 80053d0:	08005660 	.word	0x08005660
 80053d4:	08005680 	.word	0x08005680
 80053d8:	08005640 	.word	0x08005640

080053dc <_lseek_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d07      	ldr	r5, [pc, #28]	; (80053fc <_lseek_r+0x20>)
 80053e0:	4604      	mov	r4, r0
 80053e2:	4608      	mov	r0, r1
 80053e4:	4611      	mov	r1, r2
 80053e6:	2200      	movs	r2, #0
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f7fb fd9c 	bl	8000f28 <_lseek>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_lseek_r+0x1e>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_lseek_r+0x1e>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000874 	.word	0x20000874

08005400 <__swhatbuf_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	460e      	mov	r6, r1
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	2900      	cmp	r1, #0
 800540a:	b096      	sub	sp, #88	; 0x58
 800540c:	4614      	mov	r4, r2
 800540e:	461d      	mov	r5, r3
 8005410:	da08      	bge.n	8005424 <__swhatbuf_r+0x24>
 8005412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	061a      	lsls	r2, r3, #24
 800541c:	d410      	bmi.n	8005440 <__swhatbuf_r+0x40>
 800541e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005422:	e00e      	b.n	8005442 <__swhatbuf_r+0x42>
 8005424:	466a      	mov	r2, sp
 8005426:	f000 f8bb 	bl	80055a0 <_fstat_r>
 800542a:	2800      	cmp	r0, #0
 800542c:	dbf1      	blt.n	8005412 <__swhatbuf_r+0x12>
 800542e:	9a01      	ldr	r2, [sp, #4]
 8005430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005438:	425a      	negs	r2, r3
 800543a:	415a      	adcs	r2, r3
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	e7ee      	b.n	800541e <__swhatbuf_r+0x1e>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	2000      	movs	r0, #0
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	b016      	add	sp, #88	; 0x58
 8005448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800544c <__smakebuf_r>:
 800544c:	898b      	ldrh	r3, [r1, #12]
 800544e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005450:	079d      	lsls	r5, r3, #30
 8005452:	4606      	mov	r6, r0
 8005454:	460c      	mov	r4, r1
 8005456:	d507      	bpl.n	8005468 <__smakebuf_r+0x1c>
 8005458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	2301      	movs	r3, #1
 8005462:	6163      	str	r3, [r4, #20]
 8005464:	b002      	add	sp, #8
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	ab01      	add	r3, sp, #4
 800546a:	466a      	mov	r2, sp
 800546c:	f7ff ffc8 	bl	8005400 <__swhatbuf_r>
 8005470:	9900      	ldr	r1, [sp, #0]
 8005472:	4605      	mov	r5, r0
 8005474:	4630      	mov	r0, r6
 8005476:	f7ff fa57 	bl	8004928 <_malloc_r>
 800547a:	b948      	cbnz	r0, 8005490 <__smakebuf_r+0x44>
 800547c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005480:	059a      	lsls	r2, r3, #22
 8005482:	d4ef      	bmi.n	8005464 <__smakebuf_r+0x18>
 8005484:	f023 0303 	bic.w	r3, r3, #3
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e7e3      	b.n	8005458 <__smakebuf_r+0xc>
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <__smakebuf_r+0x7c>)
 8005492:	62b3      	str	r3, [r6, #40]	; 0x28
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	6163      	str	r3, [r4, #20]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	6120      	str	r0, [r4, #16]
 80054a6:	b15b      	cbz	r3, 80054c0 <__smakebuf_r+0x74>
 80054a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 f889 	bl	80055c4 <_isatty_r>
 80054b2:	b128      	cbz	r0, 80054c0 <__smakebuf_r+0x74>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	89a0      	ldrh	r0, [r4, #12]
 80054c2:	4305      	orrs	r5, r0
 80054c4:	81a5      	strh	r5, [r4, #12]
 80054c6:	e7cd      	b.n	8005464 <__smakebuf_r+0x18>
 80054c8:	08004741 	.word	0x08004741

080054cc <__malloc_lock>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__malloc_lock+0x8>)
 80054ce:	f7ff ba09 	b.w	80048e4 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	20000868 	.word	0x20000868

080054d8 <__malloc_unlock>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__malloc_unlock+0x8>)
 80054da:	f7ff ba04 	b.w	80048e6 <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	20000868 	.word	0x20000868

080054e4 <_free_r>:
 80054e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d044      	beq.n	8005574 <_free_r+0x90>
 80054ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ee:	9001      	str	r0, [sp, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f1a1 0404 	sub.w	r4, r1, #4
 80054f6:	bfb8      	it	lt
 80054f8:	18e4      	addlt	r4, r4, r3
 80054fa:	f7ff ffe7 	bl	80054cc <__malloc_lock>
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <_free_r+0x94>)
 8005500:	9801      	ldr	r0, [sp, #4]
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	b933      	cbnz	r3, 8005514 <_free_r+0x30>
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	6014      	str	r4, [r2, #0]
 800550a:	b003      	add	sp, #12
 800550c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005510:	f7ff bfe2 	b.w	80054d8 <__malloc_unlock>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d908      	bls.n	800552a <_free_r+0x46>
 8005518:	6825      	ldr	r5, [r4, #0]
 800551a:	1961      	adds	r1, r4, r5
 800551c:	428b      	cmp	r3, r1
 800551e:	bf01      	itttt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	1949      	addeq	r1, r1, r5
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	e7ed      	b.n	8005506 <_free_r+0x22>
 800552a:	461a      	mov	r2, r3
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	b10b      	cbz	r3, 8005534 <_free_r+0x50>
 8005530:	42a3      	cmp	r3, r4
 8005532:	d9fa      	bls.n	800552a <_free_r+0x46>
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	1855      	adds	r5, r2, r1
 8005538:	42a5      	cmp	r5, r4
 800553a:	d10b      	bne.n	8005554 <_free_r+0x70>
 800553c:	6824      	ldr	r4, [r4, #0]
 800553e:	4421      	add	r1, r4
 8005540:	1854      	adds	r4, r2, r1
 8005542:	42a3      	cmp	r3, r4
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	d1e0      	bne.n	800550a <_free_r+0x26>
 8005548:	681c      	ldr	r4, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	6053      	str	r3, [r2, #4]
 800554e:	4421      	add	r1, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	e7da      	b.n	800550a <_free_r+0x26>
 8005554:	d902      	bls.n	800555c <_free_r+0x78>
 8005556:	230c      	movs	r3, #12
 8005558:	6003      	str	r3, [r0, #0]
 800555a:	e7d6      	b.n	800550a <_free_r+0x26>
 800555c:	6825      	ldr	r5, [r4, #0]
 800555e:	1961      	adds	r1, r4, r5
 8005560:	428b      	cmp	r3, r1
 8005562:	bf04      	itt	eq
 8005564:	6819      	ldreq	r1, [r3, #0]
 8005566:	685b      	ldreq	r3, [r3, #4]
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	bf04      	itt	eq
 800556c:	1949      	addeq	r1, r1, r5
 800556e:	6021      	streq	r1, [r4, #0]
 8005570:	6054      	str	r4, [r2, #4]
 8005572:	e7ca      	b.n	800550a <_free_r+0x26>
 8005574:	b003      	add	sp, #12
 8005576:	bd30      	pop	{r4, r5, pc}
 8005578:	2000086c 	.word	0x2000086c

0800557c <_read_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_read_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fc88 	bl	8000ea0 <_read>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_read_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_read_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000874 	.word	0x20000874

080055a0 <_fstat_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	; (80055c0 <_fstat_r+0x20>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	f7fb fca0 	bl	8000ef2 <_fstat>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	d102      	bne.n	80055bc <_fstat_r+0x1c>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	b103      	cbz	r3, 80055bc <_fstat_r+0x1c>
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	20000874 	.word	0x20000874

080055c4 <_isatty_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d06      	ldr	r5, [pc, #24]	; (80055e0 <_isatty_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	f7fb fc9f 	bl	8000f12 <_isatty>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_isatty_r+0x1a>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_isatty_r+0x1a>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000874 	.word	0x20000874

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
